{
    "test": [
        {
            "createdDate": "2022-04-07 12:39:00",
            "modifiedDate": "2023-03-20 14:51:11",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2785968,
            "testName": "Webex Cloud Agent-Video traffic test",
            "type": "agent-to-agent",
            "interval": 300,
            "subinterval": -1,
            "port": 49153,
            "protocol": "UDP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "throughputMeasurements": 0,
            "dscpId": 34,
            "alertsEnabled": 0,
            "liveShare": 0,
            "targetAgentId": 364036,
            "throughputDuration": 10000,
            "throughputRate": 64,
            "mss": 200,
            "direction": "BIDIRECTIONAL",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2785968"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2785968"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2785968"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2785968"
                }
            ],
            "dscp": "AF 41 (DSCP 34)"
        },
        {
            "createdDate": "2019-08-20 22:28:06",
            "modifiedDate": "2023-12-21 14:38:44",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1063758,
            "testName": "Webex: Command & Control",
            "type": "agent-to-server",
            "interval": 120,
            "subinterval": -1,
            "server": "msj4mcccl01.webex.com:443",
            "protocol": "TCP",
            "ipv6Policy": "USE_AGENT_POLICY",
            "networkMeasurements": 1,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "dscpId": 0,
            "alertsEnabled": 0,
            "liveShare": 0,
            "pingPayloadSize": -1,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1063758"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1063758"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1063758"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1063758"
                }
            ],
            "dscp": "Best Effort (DSCP 0)"
        },
        {
            "createdDate": "2019-08-21 13:30:30",
            "modifiedDate": "2023-12-21 14:38:45",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1064227,
            "testName": "Webex: Media Control - Audio & Video",
            "type": "agent-to-server",
            "interval": 120,
            "subinterval": -1,
            "server": "msj4mcs104.webex.com:443",
            "protocol": "TCP",
            "ipv6Policy": "USE_AGENT_POLICY",
            "networkMeasurements": 1,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "dscpId": 0,
            "alertsEnabled": 0,
            "liveShare": 0,
            "pingPayloadSize": -1,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1064227"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1064227"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1064227"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1064227"
                }
            ],
            "dscp": "Best Effort (DSCP 0)"
        },
        {
            "createdDate": "2019-07-18 05:14:33",
            "modifiedDate": "2023-12-21 14:38:49",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1032068,
            "testName": "Webex: Meeting Launch TCP Network",
            "type": "agent-to-server",
            "interval": 120,
            "subinterval": -1,
            "server": "amex.webex.com:443",
            "protocol": "TCP",
            "ipv6Policy": "USE_AGENT_POLICY",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "dscpId": 0,
            "alertsEnabled": 0,
            "liveShare": 0,
            "pingPayloadSize": -1,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1032068"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1032068"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1032068"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1032068"
                }
            ],
            "dscp": "Best Effort (DSCP 0)"
        },
        {
            "createdDate": "2022-01-13 15:23:34",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2519951,
            "testName": "011322 - aexp.okta.com ICMP (Jan 13, 2022 15:14 UTC)",
            "type": "agent-to-server",
            "interval": 60,
            "subinterval": -1,
            "server": "aexp.okta.com",
            "protocol": "ICMP",
            "ipv6Policy": "USE_AGENT_POLICY",
            "networkMeasurements": 1,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "dscpId": 0,
            "alertsEnabled": 0,
            "liveShare": 0,
            "pingPayloadSize": -1,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2519951"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2519951"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2519951"
                }
            ],
            "dscp": "Best Effort (DSCP 0)"
        },
        {
            "createdDate": "2022-01-13 15:23:49",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2519953,
            "testName": "011322 - aexp.okta.com:443 (Jan 13, 2022 15:09 UTC)",
            "type": "agent-to-server",
            "interval": 60,
            "subinterval": -1,
            "server": "aexp.okta.com:443",
            "protocol": "TCP",
            "ipv6Policy": "USE_AGENT_POLICY",
            "networkMeasurements": 1,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "dscpId": 0,
            "alertsEnabled": 0,
            "liveShare": 0,
            "pingPayloadSize": -1,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2519953"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2519953"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2519953"
                }
            ],
            "dscp": "Best Effort (DSCP 0)"
        },
        {
            "createdDate": "2019-11-25 09:28:24",
            "modifiedDate": "2023-12-21 14:38:49",
            "createdBy": "Gary Brind (gary.brind@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1170954,
            "testName": "Webex Nebula",
            "type": "http-server",
            "interval": 120,
            "subinterval": -1,
            "url": "http://global-nebulal.webex.com",
            "protocol": "TCP",
            "ipv6Policy": "USE_AGENT_POLICY",
            "networkMeasurements": 1,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1170954"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1170954"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1170954"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1170954"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1170954"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-09-20 18:07:31",
            "modifiedDate": "2023-12-21 14:38:44",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4146213,
            "testName": "Webex Scheduler for Outlook",
            "type": "http-server",
            "interval": 60,
            "subinterval": -1,
            "url": "http://meetings-api.webex.com/",
            "protocol": "TCP",
            "ipv6Policy": "USE_AGENT_POLICY",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4146213"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4146213"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4146213"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4146213"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4146213"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2019-07-17 07:04:11",
            "modifiedDate": "2023-12-21 14:38:43",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1030916,
            "testName": "Webex: XML Service",
            "type": "http-server",
            "interval": 120,
            "subinterval": -1,
            "url": "https://amex.webex.com/WBXService/XMLService",
            "protocol": "TCP",
            "ipv6Policy": "USE_AGENT_POLICY",
            "networkMeasurements": 0,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1030916"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1030916"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-02 13:59:47",
            "modifiedDate": "2023-11-08 19:39:17",
            "createdBy": "Roy Seidler-Brennan (Roy.Seidler-Brennan@aexp.com)",
            "modifiedBy": "Roy Seidler-Brennan (William.R.SeidlerBrennan1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1931170,
            "testName": "Email - Outlook Web - Availability",
            "type": "page-load",
            "interval": 600,
            "subinterval": 60,
            "httpInterval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "httpTimeLimit": 5,
            "httpTargetTime": 4000,
            "httpVersion": 2,
            "pageLoadTimeLimit": 10,
            "pageLoadTargetTime": 8,
            "followRedirects": 1,
            "username": "svc.ThousEyeExo@aexp.com",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1931170"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1931170"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/page-load/1931170"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1931170"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1931170"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1931170"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-02 13:52:31",
            "createdBy": "Roy Seidler-Brennan (Roy.Seidler-Brennan@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1931160,
            "testName": "EXO - OWA Availability (Mar 2, 2021 13:51 UTC)",
            "type": "page-load",
            "interval": 60,
            "httpInterval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "httpTimeLimit": 49,
            "httpTargetTime": 4000,
            "httpVersion": 2,
            "pageLoadTimeLimit": 50,
            "pageLoadTargetTime": 30,
            "followRedirects": 1,
            "username": "svc.ThousEyeExo@aexp.com",
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.100.0",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1931160"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1931160"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/page-load/1931160"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1931160"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1931160"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2021-03-02 14:29:47",
            "createdBy": "Roy Seidler-Brennan (Roy.Seidler-Brennan@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1931331,
            "testName": "EXO - OWA Availability (Mar 2, 2021 14:27 UTC)",
            "type": "page-load",
            "interval": 60,
            "httpInterval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "httpTimeLimit": 30,
            "httpTargetTime": 4000,
            "httpVersion": 2,
            "pageLoadTimeLimit": 30,
            "pageLoadTargetTime": 30,
            "followRedirects": 1,
            "username": "svc.ThousEyeExo@aexp.com",
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.100.0",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1931331"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1931331"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/page-load/1931331"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1931331"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1931331"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2021-02-18 23:17:20",
            "createdBy": "Roy Seidler-Brennan (Roy.Seidler-Brennan@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1906304,
            "testName": "EXO-Test OWA (Feb 18, 2021 23:12 UTC)",
            "type": "page-load",
            "interval": 60,
            "httpInterval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "pageLoadTimeLimit": 10,
            "pageLoadTargetTime": 6,
            "followRedirects": 1,
            "username": "svc.thouseyeexo@aexp.com",
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1906304"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1906304"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/page-load/1906304"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1906304"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1906304"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-04-07 12:00:56",
            "modifiedDate": "2023-06-13 18:16:14",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "modifiedBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2785881,
            "testName": "Webex Cloud Agent-RTP Stream test",
            "type": "voice",
            "interval": 1800,
            "subinterval": -1,
            "server": "vps5-sjc02.webex.ag1.thousandeyes.com:49152",
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "duration": 5,
            "codec": "G.711 @ 64 Kbps",
            "codecId": 0,
            "dscpId": 46,
            "jitterBuffer": 40,
            "alertsEnabled": 0,
            "liveShare": 0,
            "targetAgentId": 350646,
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2785881"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/voice/rtp-stream/2785881"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2785881"
                }
            ],
            "dscp": "EF (DSCP 46)"
        },
        {
            "createdDate": "2022-04-07 12:00:56",
            "modifiedDate": "2023-06-13 18:16:14",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "modifiedBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2785881,
            "testName": "Webex Cloud Agent-RTP Stream test",
            "type": "voice",
            "interval": 1800,
            "subinterval": -1,
            "server": "vps4-sjc02.webex.ag1.thousandeyes.com:49152",
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "duration": 5,
            "codec": "G.711 @ 64 Kbps",
            "codecId": 0,
            "dscpId": 46,
            "jitterBuffer": 40,
            "alertsEnabled": 0,
            "liveShare": 0,
            "targetAgentId": 350646,
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2785881"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/voice/rtp-stream/2785881"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2785881"
                }
            ],
            "dscp": "EF (DSCP 46)"
        },
        {
            "createdDate": "2022-04-07 12:00:56",
            "modifiedDate": "2023-06-13 18:16:14",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "modifiedBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2785881,
            "testName": "Webex Cloud Agent-RTP Stream test",
            "type": "voice",
            "interval": 1800,
            "subinterval": -1,
            "server": "vps8-sjc02.webex.ag1.thousandeyes.com:49152",
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "duration": 5,
            "codec": "G.711 @ 64 Kbps",
            "codecId": 0,
            "dscpId": 46,
            "jitterBuffer": 40,
            "alertsEnabled": 0,
            "liveShare": 0,
            "targetAgentId": 350646,
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2785881"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/voice/rtp-stream/2785881"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2785881"
                }
            ],
            "dscp": "EF (DSCP 46)"
        },
        {
            "createdDate": "2022-04-07 12:00:56",
            "modifiedDate": "2023-06-13 18:16:14",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "modifiedBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2785881,
            "testName": "Webex Cloud Agent-RTP Stream test",
            "type": "voice",
            "interval": 1800,
            "subinterval": -1,
            "server": "vps6-sjc02.webex.ag1.thousandeyes.com:49152",
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "duration": 5,
            "codec": "G.711 @ 64 Kbps",
            "codecId": 0,
            "dscpId": 46,
            "jitterBuffer": 40,
            "alertsEnabled": 0,
            "liveShare": 0,
            "targetAgentId": 350646,
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2785881"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/voice/rtp-stream/2785881"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2785881"
                }
            ],
            "dscp": "EF (DSCP 46)"
        },
        {
            "createdDate": "2023-03-22 05:48:25",
            "modifiedDate": "2023-06-13 18:13:00",
            "createdBy": "Deleted User",
            "modifiedBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3580280,
            "testName": "[PS] DMZ - JY-Slack Login + Post Msg US",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 80,
            "targetTime": 60,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nconst strOktaURL = 'https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0';\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  await driver.get(strOktaURL);\r\n\r\n  // Login to OKTA\r\n  markers.start('Slack Login');\r\n    await oktaLogin();\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n    await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n    //await click(By.css('[aria-label=\"Send now\"]'));\r\n    await pressEnter(By.xpath('//div[@class=\"ql-editor\"]'));\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n    await driver.findElement(selector)\r\n                .sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function oktaLogin(){\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));  \r\n  await driver.takeScreenshot();\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 1,
            "allowGeolocation": 1,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "JY-Slack Login + Post Msg",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3580280"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3580280"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3580280"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3580280"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3580280"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3580280"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-03-22 04:20:51",
            "modifiedDate": "2023-05-29 20:48:49",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3580200,
            "testName": "[PS] JY-Slack Login + Post Msg GUR",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 23,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nconst strOktaURL = 'https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0';\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  await driver.get(strOktaURL);\r\n\r\n  // Login to OKTA\r\n  markers.start('Slack Login');\r\n    await oktaLogin();\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  await driver.takeScreenshot();\r\n  markers.start('Slack Loading');\r\n    await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n    await click(By.css('[aria-label=\"Send now\"]'));\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function oktaLogin(){\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));  \r\n  await driver.takeScreenshot();\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "JY-Slack Login + Post Msg",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3580200"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3580200"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3580200"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3580200"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3580200"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3580200"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2023-03-22 04:10:13",
            "modifiedDate": "2023-05-29 20:48:50",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3580190,
            "testName": "[PS] JY-Slack Login + Post Msg SIN/SYD",
            "type": "web-transactions",
            "interval": 3600,
            "subinterval": 1800,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 1,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 25,
            "httpTimeLimit": 14,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nconst strOktaURL = 'https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0';\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  await driver.get(strOktaURL);\r\n\r\n  // Login to OKTA\r\n  markers.start('Slack Login');\r\n    await oktaLogin();\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  await driver.takeScreenshot();\r\n  markers.start('Slack Loading');\r\n    await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n    await click(By.css('[aria-label=\"Send now\"]'));\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function oktaLogin(){\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));  \r\n  await driver.takeScreenshot();\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "JY-Slack Login + Post Msg",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3580190"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3580190"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3580190"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3580190"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3580190"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3580190"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2023-03-22 04:20:23",
            "modifiedDate": "2023-05-29 20:48:51",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3580198,
            "testName": "[PS] JY-Slack Login + Post Msg US/BTN",
            "type": "web-transactions",
            "interval": 3600,
            "subinterval": 1200,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 40,
            "targetTime": 25,
            "httpTimeLimit": 6,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nconst strOktaURL = 'https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0';\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  await driver.get(strOktaURL);\r\n\r\n  // Login to OKTA\r\n  markers.start('Slack Login');\r\n    await oktaLogin();\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  await driver.takeScreenshot();\r\n  markers.start('Slack Loading');\r\n    await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n    await click(By.css('[aria-label=\"Send now\"]'));\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function oktaLogin(){\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));  \r\n  await driver.takeScreenshot();\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "JY-Slack Login + Post Msg",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3580198"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3580198"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3580198"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3580198"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3580198"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3580198"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-03-22 03:17:33",
            "modifiedDate": "2023-05-29 20:48:52",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3580123,
            "testName": "[PS] JY-Slack Login + Upload File GUR",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 25,
            "httpTimeLimit": 6,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, uploads } from 'thousandeyes';\r\n\r\nconst strSlackURL = 'https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    const strMyFilePath = await uploads.generateRandomTextFile(1024);\r\n    const strFilename = strMyFilePath.split('/').pop();\r\n\r\n    await configureDriver();\r\n    \r\n    //Load slack Login Page \r\n    await driver.get(strSlackURL);\r\n\r\n    // Login to OKTA\r\n    await loginToOkta();\r\n  \r\n    //Start Slack Loads\r\n    markers.start('Slack Loading');\r\n        //File Upload\r\n        //Click Attachments & Shortcuts\r\n        //Click Upload from your computer\r\n        await click(By.css(`[aria-label=\"Attachments & shortcuts\"]`));\r\n        await click(By.css('[aria-label=\"Last item in group attach, Upload from your computer\"]')) \r\n    markers.stop('Slack Loading');\r\n\r\n    // Send the file path to the input element\r\n    await typeText(strMyFilePath,By.xpath(`//input[@type='file']`));\r\n\r\n    // Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n    //Start Upload File\r\n    markers.start('Upload File');\r\n        // Click send Message\r\n        // Verify the uploaded file appears in the file list\r\n        await click(By.css('[aria-label=\"Send now\"]'));\r\n        var strUploadingXPath = `//div[@class=\"p-workspace__primary_view\"]//div[@class=\"c-files_container\"]//span[text()=\"${strFilename}\"]`;\r\n        await driver.wait(until.elementLocated(By.xpath(strUploadingXPath)));\r\n    markers.stop('Upload File');\r\n\r\n    await driver.takeScreenshot();\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function loginToOkta(){\r\n    markers.start('Slack Login');\r\n        //Type in Workspace Name\r\n        //Click 'Continue'\r\n        //Click 'Sign in with Okta'\r\n        await typeText('aexp-hr', By.id(`domain`));\r\n        await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n        await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n        //Enter Username and Pwd\r\n        //Click 'Next'\r\n        //Click on 'Sign In' to Login\r\n        await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n        await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n        await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n        await click(By.id(`okta-signin-submit`));\r\n        // Take Snapshot\r\n        await driver.takeScreenshot(); \r\n    markers.stop('Slack Login');\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "JY-Slack Login + Upload File Gur",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3580123"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3580123"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3580123"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3580123"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3580123"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3580123"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-03-22 03:18:07",
            "modifiedDate": "2023-05-29 20:48:56",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3580126,
            "testName": "[PS] JY-Slack Login + Upload File US/BTN",
            "type": "web-transactions",
            "interval": 3600,
            "subinterval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 55,
            "targetTime": 25,
            "httpTimeLimit": 6,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, uploads } from 'thousandeyes';\r\n\r\nconst strSlackURL = 'https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    const strMyFilePath = await uploads.generateRandomTextFile(1024);\r\n    const strFilename = strMyFilePath.split('/').pop();\r\n\r\n    await configureDriver();\r\n    \r\n    //Load slack Login Page \r\n    await driver.get(strSlackURL);\r\n\r\n    // Login to OKTA\r\n    await loginToOkta();\r\n  \r\n    //Start Slack Loads\r\n    markers.start('Slack Loading');\r\n        //File Upload\r\n        //Click Attachments & Shortcuts\r\n        //Click Upload from your computer\r\n        await click(By.css(`[aria-label=\"Attachments & shortcuts\"]`));\r\n        await click(By.css('[aria-label=\"Last item in group attach, Upload from your computer\"]')) \r\n    markers.stop('Slack Loading');\r\n\r\n    // Send the file path to the input element\r\n    await typeText(strMyFilePath,By.xpath(`//input[@type='file']`));\r\n\r\n    // Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n    //Start Upload File\r\n    markers.start('Upload File');\r\n        // Click send Message\r\n        // Verify the uploaded file appears in the file list\r\n        await click(By.css('[aria-label=\"Send now\"]'));\r\n        var strUploadingXPath = `//div[@class=\"p-workspace__primary_view\"]//div[@class=\"c-files_container\"]//span[text()=\"${strFilename}\"]`;\r\n        await driver.wait(until.elementLocated(By.xpath(strUploadingXPath)));\r\n    markers.stop('Upload File');\r\n\r\n    await driver.takeScreenshot();\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function loginToOkta(){\r\n    markers.start('Slack Login');\r\n        //Type in Workspace Name\r\n        //Click 'Continue'\r\n        //Click 'Sign in with Okta'\r\n        await typeText('aexp-hr', By.id(`domain`));\r\n        await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n        await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n        //Enter Username and Pwd\r\n        //Click 'Next'\r\n        //Click on 'Sign In' to Login\r\n        await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n        await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n        await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n        await click(By.id(`okta-signin-submit`));\r\n        // Take Snapshot\r\n        await driver.takeScreenshot(); \r\n    markers.stop('Slack Login');\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "JY-Slack Login + Upload File US/BTN",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3580126"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3580126"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3580126"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3580126"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3580126"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3580126"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-03-16 22:22:16",
            "modifiedDate": "2023-05-29 20:48:56",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3567712,
            "testName": "[PS] OneDrive_FileDownload_Browser",
            "type": "web-transactions",
            "interval": 1800,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/ThousandEyes",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 51,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads } from 'thousandeyes';\r\n\r\nconst strOneDriveURL = 'https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/ThousandEyes/Download';\r\nconst strLogoutURL = 'https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fdrive.aexp.com%2Fpersonal%2Fvamsi_k_gadde_aexp_com%2FThousandEyes%2FForms%2FAllItems.aspx';\r\n\r\nrunScript();\r\nasync function runScript() {\r\n \r\n  await configureDriver();\r\n\r\n  // Page Load\r\n  markers.start('Page Load');\r\n    await driver.get(strOneDriveURL);\r\n  markers.stop('Page Load');\r\n  \r\n  await oktaLogin();\r\n  await click(By.css(`[aria-label=\"IoyzPbORK1.txt\"] [data-icon-name=\"StatusCircleCheckmark\"]`));\r\n  \r\n  markers.start('Download');\r\n    await click(By.css(`[data-icon-name=\"download\"]`));\r\n    await downloads.waitForDownload('IoyzPbORK1.txt',500000);\r\n  markers.stop('Download');\r\n\tawait driver.takeScreenshot();\t\t  \r\n\r\n  // Logout\r\n  await markers.start('Logout');\r\n    await driver.get(strLogoutURL)  \r\n    await driver.takeScreenshot();   \r\n  await markers.stop('Logout'); \r\n}; \r\n\r\nasync function oktaLogin(){\r\n  \r\n  markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n    await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\t\t\t\t\t \t\t\t\t  \r\n    await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n\r\n  markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n    await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n    await driver.takeScreenshot();\r\n    await click(By.id(`okta-signin-submit`));\r\n  markers.stop('OKTA Login');\r\n\r\n  markers.start('Shared Documents');\r\n    await click(By.id('idBtn_Back'));\r\n    await driver.takeScreenshot();\r\n    await driver.sleep(1000);\r\n  markers.stop('Shared Documents');\r\n}\r\n\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n} \r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector)\r\n              .sendKeys(value);\r\n} \r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n} \r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n      await driver.findElement(selector)\r\n                  .click().then(null, async function (err) {\r\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\r\n          await driver.findElement(selector)\r\n                      .click();\r\n      });\r\n  }\r\n} \r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n      return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n      return false; // Will throw an error if element is not connected to the document\r\n\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t \r\n  }\r\n} \r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n      try {\r\n          numberOfAttempts += 1;\r\n          await attemptActionFn();\r\n      }\r\n      catch (error) {\r\n          attemptError = error;\r\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n          continue; // Attempt failed, reattempt\r\n      }\r\n      attemptError = null;\r\n      break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n      throw attemptError;\r\n  }\r\n} ",
            "desiredStatusCode": "403",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3567712"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3567712"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3567712"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3567712"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3567712"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3567712"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-02-26 07:11:19",
            "modifiedDate": "2023-05-29 20:48:57",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3519803,
            "testName": "[PS] OneDrive_FileUpload_Browser",
            "type": "web-transactions",
            "interval": 3600,
            "subinterval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 60,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, uploads } from 'thousandeyes';\r\n\r\nconst strOneDriveURL = 'https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/ThousandEyes/Forms/AllItems.aspx';\r\nconst strLogoutURL = 'https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fdrive.aexp.com%2Fpersonal%2Fvamsi_k_gadde_aexp_com%2FThousandEyes%2FForms%2FAllItems.aspx';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n  // Generate a random text file for upload\r\n  var myFilePath = await uploads.generateRandomTextFile(1024);\r\n  var fileName = myFilePath.slice(-14);\r\n\r\n  await configureDriver();\r\n\r\n  // Page Load\r\n  markers.start('Page Load');\r\n    await driver.get(strOneDriveURL);\r\n  markers.stop('Page Load');\r\n\r\n  await oktaLogin();\r\n\r\n  markers.start('Upload File');\r\n    await click(By.name(`Upload`));\r\n    await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n    // Locate the file input element\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(myFilePath);\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"` + fileName + `\")]`)));\r\n  markers.stop('Upload File');\r\n\r\n  // Logout\r\n  markers.start('Logout');\r\n    await driver.takeScreenshot();\r\n    await driver.get(strLogoutURL);\r\n    await driver.takeScreenshot();\r\n  markers.stop('Logout');\r\n}\r\n\r\nasync function oktaLogin(){\r\n  \r\n  markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n    await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\t\t\t\t\t \t\t\t\t  \r\n    await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n\r\n  markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n    await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n    await driver.takeScreenshot();\r\n    await click(By.id(`okta-signin-submit`));\r\n  markers.stop('OKTA Login');\r\n\r\n  markers.start('Shared Documents');\r\n    await click(By.id('idBtn_Back'));\r\n    await driver.takeScreenshot();\r\n    await driver.sleep(1000);\r\n  markers.stop('Shared Documents');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector)\r\n      .click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n",
            "desiredStatusCode": "403",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3519803"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3519803"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3519803"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3519803"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3519803"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3519803"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-03-16 22:35:18",
            "modifiedDate": "2023-05-29 20:48:58",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3567736,
            "testName": "[PS] SharePoint_FileDownload_Browser",
            "type": "web-transactions",
            "interval": 1800,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 95,
            "targetTime": 60,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, transaction } from 'thousandeyes';\r\n\r\nconst strSharepointURL = 'https://spaces.aexp.com/teams/vgadde';\r\nconst strSharepointDownloadURL = 'https://spaces.aexp.com/teams/vgadde/ThousandEyes/download';\r\nconst strLogoutURL = 'https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  markers.start('Page Load');\r\n    await driver.get(strSharepointURL);\r\n  markers.stop('Page Load');\r\n  \r\n  await oktaLogin();\r\n\r\n  markers.start('Download Page');\r\n    await driver.wait(until.titleContains('Vamsi_Test'));\r\n    await driver.get(strSharepointDownloadURL);\r\n    await driver.takeScreenshot();\r\n    await click(By.css(`[aria-label=\"0CdW0MUPUn.txt\"] [data-icon-name=\"StatusCircleCheckmark\"]`));  \r\n  markers.stop('Download Page');\r\n \r\n  markers.start('Download');\r\n    await click(By.css(`[data-icon-name=\"download\"]`));\r\n    await downloads.waitForDownload('0CdW0MUPUn.txt', 60000);\r\n  markers.stop('Download');\r\n  await driver.takeScreenshot();\r\n\r\n  // Logout\r\n    await markers.start('Logout');\r\n      await driver.get(strLogoutURL);\r\n      await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n}; \r\n\r\nasync function oktaLogin(){\r\n  \r\n  markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n    await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\t\t\t\t\t \t\t\t\t  \r\n    await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n\r\n  markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n    await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n    await driver.takeScreenshot();\r\n    await click(By.id(`okta-signin-submit`));\r\n  markers.stop('OKTA Login');\r\n\r\n  markers.start('Shared Documents');\r\n    await click(By.id('idBtn_Back'));\r\n    await driver.takeScreenshot();\r\n    await driver.sleep(1000);\r\n  markers.stop('Shared Documents');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n} \r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector)\r\n              .sendKeys(value);\r\n} \r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n} \r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n      await driver.findElement(selector)\r\n                  .click().then(null, async function (err) {\r\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\r\n          await driver.findElement(selector)\r\n                      .click();\r\n      });\r\n  }\r\n} \r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n      return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n      return false; // Will throw an error if element is not connected to the document\r\n  }\r\n} \r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n      try {\r\n          numberOfAttempts += 1;\r\n          await attemptActionFn();\r\n      }\r\n      catch (error) {\r\n          attemptError = error;\r\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n          continue; // Attempt failed, reattempt\r\n      }\r\n      attemptError = null;\r\n      break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n      throw attemptError;\r\n  }\r\n}\r\n",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3567736"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3567736"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3567736"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3567736"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3567736"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3567736"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-03-16 23:13:49",
            "modifiedDate": "2023-07-13 02:58:59",
            "createdBy": "Deleted User",
            "modifiedBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3567802,
            "testName": "[PS] SharePoint_FileUpload_Browser",
            "type": "web-transactions",
            "interval": 3600,
            "subinterval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 80,
            "targetTime": 60,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, uploads } from 'thousandeyes';\r\n\r\nconst strSharepointURL = 'https://spaces.aexp.com/teams/vgadde';\r\nconst strLogoutURL = 'https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n  // Generate a random text file for upload\r\n  const strFilePath = await uploads.generateRandomTextFile(1024);\r\n  const strFileName = await strFilePath.slice(-14);\r\n\r\n  await configureDriver();\r\n  // Page Load\r\n  markers.start('Page Load');\r\n    await driver.get(strSharepointURL);\r\n  markers.stop('Page Load');\r\n\r\n  await oktaLogin();\r\n\r\n  markers.start('Upload Page');\r\n    // Wait for backend page to load\r\n    await driver.wait(until.titleContains('Vamsi_Test'));\r\n    // Click on 'Documents'\r\n    await click(By.css(`[href=\"/teams/vgadde/ThousandEyes/Forms/AllItems.aspx\"] > .ms-Nav-linkText`));\r\n  markers.stop('Upload Page');\r\n  \r\n  markers.start('Upload File');\r\n    // Wait for the main page to load until the Upload button is present\r\n    await driver.wait(until.elementLocated(By.name(`Upload`)));\r\n    // Click Upload > Files\r\n    await click(By.name(`Upload`));\r\n    await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n    // Locate the file input element\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(strFilePath);\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"${strFileName}\")]`)));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Upload File');\r\n\r\n  await markers.start('Logout');\r\n    await driver.get(strLogoutURL)\r\n    await driver.takeScreenshot();\r\n  await markers.stop('Logout');\r\n}\r\n\r\nasync function oktaLogin(){\r\n  \r\n  markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n    await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\t\t\t\t\t \t\t\t\t  \r\n    await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n\r\n  markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n    await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n    await driver.takeScreenshot();\r\n    await click(By.id(`okta-signin-submit`));\r\n  markers.stop('OKTA Login');\r\n\r\n  markers.start('Shared Documents');\r\n    await click(By.id('idBtn_Back'));\r\n    await driver.takeScreenshot();\r\n    await driver.sleep(1000);\r\n  markers.stop('Shared Documents');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector)\r\n      .click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n",
            "desiredStatusCode": "403",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3567802"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3567802"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3567802"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3567802"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3567802"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3567802"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-09 15:00:14",
            "modifiedDate": "2024-01-05 17:00:20",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3775807,
            "testName": "Avaya Syslogs btn-rdcvccmaeth0",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl05`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'BTN-RDCVCCMAETH0')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3775807"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3775807"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3775807"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3775807"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3775807"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3775807"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-09 15:01:10",
            "modifiedDate": "2024-01-05 17:00:09",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3775810,
            "testName": "Avaya Syslogs btn-rdcvccmbeth0",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl06`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'BTN-RDCVCCMBETH0')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3775810"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3775810"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3775810"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3775810"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3775810"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3775810"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-14 15:39:29",
            "modifiedDate": "2024-01-05 16:59:55",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3790226,
            "testName": "Avaya Syslogs cyberbo-srv1-cmaphy",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl07`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'cyberbo-srv1-cmaphy')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3790226"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3790226"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3790226"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3790226"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3790226"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3790226"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-14 15:51:53",
            "modifiedDate": "2024-01-05 16:59:43",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3790253,
            "testName": "Avaya Syslogs cyberbo-srv2-cmaphy ",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl08`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'cyberbo-srv2-cmaphy')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3790253"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3790253"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3790253"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3790253"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3790253"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3790253"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-05-31 23:19:02",
            "modifiedDate": "2024-01-05 16:59:30",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3757943,
            "testName": "Avaya Syslogs cybercc-srv1-cmaphy",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl09`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'cybercc-srv1-cmaphy')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3757943"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3757943"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3757943"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3757943"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3757943"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3757943"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-09 14:41:07",
            "modifiedDate": "2024-01-05 16:59:16",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3775601,
            "testName": "Avaya Syslogs cybercc-srv2-cmaphy",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl10`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'cybercc-srv2-cmaphy')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 80 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3775601"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3775601"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3775601"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3775601"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3775601"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3775601"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-14 15:54:17",
            "modifiedDate": "2024-01-05 16:59:03",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3790260,
            "testName": "Avaya Syslogs gso-dc1voicecm-a",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl11`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'gso-dc1voicecm-a')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3790260"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3790260"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3790260"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3790260"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3790260"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3790260"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-14 15:55:45",
            "modifiedDate": "2024-01-05 16:58:47",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3790263,
            "testName": "Avaya Syslogs gso-dc1voicecm-b",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl12`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'gso-dc1voicecm-b')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3790263"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3790263"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3790263"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3790263"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3790263"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3790263"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-14 15:59:05",
            "modifiedDate": "2024-01-05 16:58:26",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3790274,
            "testName": "Avaya Syslogs phx-core-cma",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 103,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl26`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'PHX-Core-CMa')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3790274"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3790274"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3790274"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3790274"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3790274"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3790274"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-14 16:00:07",
            "modifiedDate": "2023-12-21 14:38:46",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3790302,
            "testName": "Avaya Syslogs phx-core-cmb",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl27`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'PHX-Core-CMb')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3790302"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3790302"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3790302"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3790302"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3790302"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3790302"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-08-02 17:29:11",
            "modifiedDate": "2023-11-15 21:35:41",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3935270,
            "testName": "Avaya Syslogs Record of old script",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nlet d = new Date();\r\nlet utc = d.getTime() + d.getTimezoneOffset() * 60000;\r\nlet date = new Date(utc + 3600000 * -6);\r\n//const date = new Date();\r\n\r\nlet day = date.getDate();\r\nlet dy = \"\";\r\nif (day < 10) {\r\n  dy = \"0\" + day.toString();\r\n} else {\r\n    dy = day.toString();\r\n}\r\nlet month = date.getMonth() + 1;\r\nlet mo = \"\";\r\nif (month < 10) {\r\n  mo = \"0\" + month.toString();\r\n} else {\r\n    mo = month.toString();\r\n}\r\nlet year = date.getFullYear();\r\nlet today = `${mo}/${dy}/${year}`;\r\n\r\nlet yesterday = date;\r\nyesterday.setDate(date.getDate() -1);\r\n\r\nlet yr = yesterday.getFullYear();\r\nday = yesterday.getDate();\r\ndy = \"\";\r\nif (day < 10) {\r\n  dy = \"0\" + day.toString();\r\n} else {\r\n    dy = day.toString()\r\n}\r\n month = yesterday.getMonth() + 1;\r\n mo = \"\";\r\nif (month < 10) {\r\n  mo = \"0\" + month.toString();\r\n} else {\r\n    mo = month.toString()\r\n}\r\nlet yes = `${mo}/${dy}/${year}`;\r\n\r\n\r\n\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  // Make driver sleep for 5 seconds\r\n \r\n\r\n  //Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"${today}\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"${yes}\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ddDropDownButton`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl04`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'BTN-RDCVCCMAETH0')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3935270"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3935270"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3935270"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3935270"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3935270"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3935270"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-14 16:01:46",
            "modifiedDate": "2023-12-21 14:38:50",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3790310,
            "testName": "Avaya Syslogs sin-dc1-cmsrva",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 81,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl28`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'SIN-DC1-CMSRVA')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3790310"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3790310"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3790310"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3790310"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3790310"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3790310"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-14 16:02:59",
            "modifiedDate": "2023-12-21 14:38:44",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3790312,
            "testName": "Avaya Syslogs sin-dc1-cmsrvb",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl29`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'SIN-DC1-CMSRVB')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3790312"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3790312"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3790312"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3790312"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3790312"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3790312"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-19 11:29:06",
            "modifiedDate": "2021-05-13 15:47:43",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2013740,
            "testName": "Bomgar - Dev(Spanish)",
            "type": "web-transactions",
            "interval": 1800,
            "subinterval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://btcdev.tims.intra.aexp.com/#/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 88,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.RUMtest",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n\r\n  // Load page\r\n  await driver.get(settings.url);\r\n\r\n\r\n  // Click on 'Chat with an Engineer'\r\n  await click(By.linkText('Chat with an Engineer'));\r\n  markers.start('chatendtoend');\r\n\r\n  await selectOption(By.id(`language`), By.css(`[value=\"spanish\"]`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`.btn-primary:nth-child(1)`));\r\n   markers.start('chatlaunchedandtilltaken'); \r\n   \r\n  let handles = await openNewTab(driver);\r\n  await driver.switchTo().window(handles[1]);\r\n\r\n  await click(By.css('#flex-container > bt-chat-log'));\r\n\r\n  await driver.wait(until.elementIsEnabled(driver.findElement(By.id('userText'))));\r\n  markers.stop('chatlaunchedandtilltaken');\r\n  markers.start('chattakentillclose');\r\n  await driver.takeScreenshot();\r\n\r\n  await typeText('Hola', By.id(`userText`));\r\n  await click(By.css(`#sendButton > .ui-button-text`));\r\n\r\n  await driver.wait(until.elementLocated(By.css('#flex-container > bt-chat-log > bt-chat-message:nth-of-type(9) > bt-chat-text:nth-of-type(3) > span')));\r\n  var chatelement = await driver.findElement(By.css('#flex-container > bt-chat-log > bt-chat-message:nth-of-type(9) > bt-chat-text:nth-of-type(3) > span'));\r\n  let chatText = await chatelement.getText();\r\n\r\n  assert.equal(chatText, 'Su cuenta ha sido bloqueada temporalmente');\r\n  await typeText('por favor, env\u00edame un correo sobre este incidente', By.id(`userText`));\r\n\r\n\r\n  // Click on 'Enviar'\r\n  await click(By.css(`#sendButton > .ui-button-text`));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('chattakentillclose');\r\n\r\n  await click(By.css(`.ui-button-icon-left`));\r\n\r\n  // Click on 'S\u00ed'\r\n  await click(By.css(`.bt-dialog-footer > .ui-button:nth-child(1) > .ui-button-text`));\r\n\r\n  await driver.switchTo().window(handles[0]);\r\n  markers.stop('chatendtoend');\r\n  await driver.takeScreenshot();\r\n}\r\n\r\nconst openNewTab = async driver => {\r\n  let handlesRetunr;\r\n  await driver.wait(function () {\r\n    return driver.getAllWindowHandles().then(function (handles) {\r\n      var isHandleCount2 = handles.length == 2;\r\n      if (isHandleCount2) {\r\n        handlesRetunr = handles;\r\n        return isHandleCount2;\r\n      }\r\n    });\r\n  });\r\n  return handlesRetunr;\r\n};\r\n\r\n\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 4 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2013740"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2013740"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2013740"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2013740"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2013740"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2013740"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-01-20 09:44:41",
            "modifiedDate": "2021-05-13 15:47:42",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1859595,
            "testName": "Bomgar Dev - Chat",
            "type": "web-transactions",
            "interval": 1800,
            "subinterval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://btcdev.tims.intra.aexp.com/#/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 80,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.RUMtest",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get(\"https://btcdev.tims.intra.aexp.com/#/\");\r\n\r\n  markers.start('chatendtoend');\r\n  await click(By.css(`#chatPanel > img`));\r\n\r\n  // Click on 'Chat with an Engineer'\r\n  await click(By.css(`.chatColumns:nth-child(2) > .noLinkDec`));\r\n  await driver.takeScreenshot();\r\n\r\n  driver.switchTo().activeElement();\r\n  await click(By.css(`.btn-primary:nth-child(1)`));\r\n  markers.start('initializingchat');\r\n\r\n  let handles = await openNewTab(driver);\r\n  await driver.switchTo().window(handles[1]);\r\n\r\n  await click(By.css('#flex-container > bt-chat-log'));\r\n  driver.findElement(By.css('#flex-container > bt-chat-log')).isDisplayed();\r\n  await driver.takeScreenshot();\r\n  markers.stop('initializingchat');\r\n  // Click on 'End Chat'\r\n  await click(By.xpath(`//span[text()='End Chat']`));\r\n  await driver.takeScreenshot();\r\n  // Click on 'Yes'\r\n  driver.switchTo().activeElement();\r\n  await click(By.xpath(`//span[text()='Yes']`));\r\n\r\n\r\n  markers.stop('chatendtoend');\r\n  await driver.switchTo().window(handles[0]);\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1051,\r\n    height: 806 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 12 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nconst openNewTab = async driver => {\r\n  let handlesRetunr;\r\n  await driver.wait(function () {\r\n    return driver.getAllWindowHandles().then(function (handles) {\r\n      var isHandleCount2 = handles.length == 2;\r\n      if (isHandleCount2) {\r\n        handlesRetunr = handles;\r\n        return isHandleCount2;\r\n      }\r\n    });\r\n  });\r\n  return handlesRetunr;\r\n};\r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1859595"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1859595"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1859595"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1859595"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1859595"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1859595"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-01-22 10:57:39",
            "modifiedDate": "2021-05-13 15:47:43",
            "createdBy": "Deleted User",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1862887,
            "testName": "Bomgar Prod - Start Chat - Chrome",
            "type": "web-transactions",
            "interval": 1800,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://techcare.aexp.com/#/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.RUMtest",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get(\"https://techcare.aexp.com/#/\");\r\n\r\n  markers.start('chatendtoend');\r\n  await click(By.css(`#chatPanel > img`));\r\n\r\n  // Click on 'Chat with an Engineer'\r\n  await click(By.css(`.chatColumns:nth-child(2) > .noLinkDec`));\r\nawait driver.takeScreenshot();\r\n  \r\n  driver.switchTo().activeElement();\r\n  await click(By.css(`.btn-primary:nth-child(1)`));\r\n  markers.start('initializingchat');\r\n\r\n  let handles = await openNewTab(driver);\r\n  await driver.switchTo().window(handles[1]);\r\n\r\n  await click(By.css('#flex-container > bt-chat-log'));\r\n   driver.findElement(By.css('#flex-container > bt-chat-log')).isDisplayed();\r\n   markers.stop('initializingchat');\r\n  // Click on 'End Chat'\r\n  await click(By.xpath(`//span[text()='End Chat']`));\r\n   await driver.takeScreenshot();\r\n  // Click on 'Yes'\r\n  await click(By.css(`.bt-dialog-footer > .ui-button:nth-child(1) > .ui-button-text`));\r\n // Make driver sleep for 5 seconds\r\n \r\n  markers.stop('chatendtoend');\r\n   await driver.switchTo().window(handles[0]);\r\n    await driver.takeScreenshot();\r\n \r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1051,\r\n    height: 806 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 12 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n  const openNewTab = async (driver) =>{\r\n       let handlesRetunr;\r\n  await driver.wait(function () {\r\n    return driver.getAllWindowHandles().then(function (handles) {\r\n      var isHandleCount2 = (handles.length == 2);\r\n      if (isHandleCount2) {\r\n          handlesRetunr = handles;\r\n         return isHandleCount2;\r\n      }\r\n    });\r\n  });\r\n  return handlesRetunr;\r\n} \r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1862887"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1862887"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1862887"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1862887"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1862887"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1862887"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-19 23:11:35",
            "modifiedDate": "2024-01-05 16:58:00",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3802950,
            "testName": "Cisco Syslogs btn-rdcpbxpuba.rdc.uk.aexp.com",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/CISCO%20CUCM/CISCO%20CUCM%20SysLogs",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 100,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(10000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  //await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl05`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'btn-rdcpbxpuba.rdc.uk.aexp.com')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3802950"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3802950"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3802950"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3802950"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3802950"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3802950"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-07-10 22:58:08",
            "modifiedDate": "2024-01-05 16:57:41",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3848653,
            "testName": "Cisco Syslogs gso-ipc2-cucm-pub-01.gso.aexp.com",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/CISCO%20CUCM/CISCO%20CUCM%20SysLogs",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 100,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(10000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  //await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl13`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'GSO-IPC2-CUCM-PUB-01.gso.aexp.com')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3848653"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3848653"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3848653"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3848653"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3848653"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3848653"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-19 23:08:13",
            "modifiedDate": "2024-01-05 16:57:20",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3802941,
            "testName": "Cisco Syslogs gso-wfc-cucm-pub.us.aexp.com",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/CISCO%20CUCM/CISCO%20CUCM%20SysLogs",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 100,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(10000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  //await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl20`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'GSO-WFC-CUCM-PUB.us.aexp.com')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3802941"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3802941"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3802941"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3802941"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3802941"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3802941"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-16 22:06:49",
            "modifiedDate": "2024-01-05 16:56:59",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3797409,
            "testName": "Cisco Syslogs gurcybucs1pub.in.aexp.com",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/CISCO%20CUCM/CISCO%20CUCM%20SysLogs",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 100,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(10000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  //await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl22`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'gurcybucs1pub.in.aexp.com')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3797409"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3797409"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3797409"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3797409"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3797409"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3797409"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-19 23:06:28",
            "modifiedDate": "2024-01-05 16:55:43",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3802937,
            "testName": "Cisco Syslogs phx-ipc-uc1-cucm-pub.phx.aexp.com",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/CISCO%20CUCM/CISCO%20CUCM%20SysLogs",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 100,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(10000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  //await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl36`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'phx-ipc-uc1-cucm-pub.phx.aexp.com')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3802937"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3802937"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3802937"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3802937"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3802937"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3802937"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-19 23:09:30",
            "modifiedDate": "2024-01-05 16:55:19",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3802945,
            "testName": "Cisco Syslogs sin-mbc-uc1-cucm-pub.sg.aexp.com",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/CISCO%20CUCM/CISCO%20CUCM%20SysLogs",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 100,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(10000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  //await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl44`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'sin-mbc-uc1-cucm-pub.sg.aexp.com')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3802945"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3802945"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3802945"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3802945"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3802945"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3802945"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-07-10 23:39:10",
            "modifiedDate": "2024-01-05 16:54:56",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3848764,
            "testName": "Cisco Syslogs syd-har-cucm-pub-01.au.aexp.com",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/CISCO%20CUCM/CISCO%20CUCM%20SysLogs",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 100,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(10000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  //await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl49`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'syd-har-cucm-pub-01.au.aexp.com')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3848764"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3848764"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3848764"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3848764"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3848764"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3848764"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-16 21:52:46",
            "modifiedDate": "2023-12-21 14:38:46",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3797399,
            "testName": "Concur",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://us2.concursolutions.com/nui/signin",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 50,
            "targetTime": 25,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  await driver.get(settings.url);\r\n  markers.start('Login');\r\n  // Add any steps you'd like to time or otherwise mark here\r\n\r\n  await click(By.id(`username-input`));\r\n\r\n  await typeText(credentials.get('Concur_SVC'), By.id(`username-input`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.id(`btnSubmit`));\r\n\r\n  await typeText(credentials.get('Concur_PW'), By.id(`password`));\r\n\r\n  // Click on 'Sign In'\r\n  await click(By.id(`btnSubmit`));\r\n  await driver.takeScreenshot();\r\n  markers.stop('Login');\r\n\r\n  markers.start('Homepage Load');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'My Tasks')]]\"));\r\n  await driver.takeScreenshot();\r\n  markers.stop('Homepage Load');\r\n\r\n  markers.start('Expense Module');\r\n  await click(By.css(`.cnqr-quicktask:nth-child(1) .action`));\r\n\r\n  //Inspect window for text \"Report Date\"\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'Report Date')]]\"));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Expense Module');\r\n  // Click on 'Cancel'\r\n  await click(By.css(`.sapcnqr-button--muted > .sapcnqr-button__text`));\r\n\r\n  //Click on profile\r\n  await click(By.css(`.sapcnqr-icon-823d4a`));\r\n\r\n  //Click on logout\r\n  await click(By.css(`[role=\"button\"]`));\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 200;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3797399"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3797399"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3797399"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3797399"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3797399"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3797399"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-05-30 15:01:18",
            "modifiedDate": "2023-10-05 21:41:57",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 2908096,
            "testName": "DMZ - JY-Slack Login + Post Msg SIN",
            "type": "web-transactions",
            "interval": 900,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 105,
            "targetTime": 35,
            "httpTimeLimit": 35,
            "httpTargetTime": 5000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n  \r\n  // Added screenshot 10-5-21 JY\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  //commenting out the Okta login process 9-21 (lines 24,29,31,37)\r\n  //uncommented the OKTA lines 092921 - 1013 MST\r\n  //101121 - Removed HTTP auth credentials in Advanced Tab\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  //await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1920,\r\n    height: 1080 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.150 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "JY-Slack Login + Post Msg",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2908096"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2908096"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2908096"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2908096"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2908096"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2908096"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-29 16:36:32",
            "modifiedDate": "2024-01-08 17:22:59",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 2280391,
            "testName": "DMZ - JY-Slack Login + Post Msg US",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 300,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 85,
            "targetTime": 60,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n  \r\n  // Added screenshot 10-5-21 JY\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  //commenting out the Okta login process 9-21 (lines 24,29,31,37)\r\n  //uncommented the OKTA lines 092921 - 1013 MST\r\n  //101121 - Removed HTTP auth credentials in Advanced Tab\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  //await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1920,\r\n    height: 1080 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.150 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "JY-Slack Login + Post Msg",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2280391"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2280391"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2280391"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2280391"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2280391"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2280391"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-11-12 04:49:34",
            "modifiedDate": "2023-11-14 16:24:00",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2390925,
            "testName": "DMZ Webex amex.webex.com - Login + Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 24,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n    await driver.get(settings.url);\r\n    await authenticateToOKTA();\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n    await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n    //Locate iframe\r\n    let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n    if (intThinIFrames == 0) {\r\n      markers.stop('1- Clicking \"Start a Meeting\"');\r\n      markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n      markers.set('Taking thiniframes=0 ScreenShot');\r\n      await driver.takeScreenshot();\r\n      //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n      let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start\")]');\r\n      markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n      if (intStartMeetingPage > 0) {\r\n        markers.start('2: Clicking \"Start a Meeting\"');\r\n        await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n        await driver.takeScreenshot();\r\n        await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n        markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n      }\r\n    }\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try { markers.stop('1- Clicking \"Start\"'); } catch { };\r\n  try { markers.stop('2- Clicking \"Start\"'); } catch { };\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n    sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n      click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2390925"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2390925"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2390925"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2390925"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2390925"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2390925"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-11-12 04:53:32",
            "modifiedDate": "2023-10-31 23:30:18",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2390937,
            "testName": "DMZ Webex amexame.webex.com - Login + Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amexame.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 30,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n    await driver.get(settings.url);\r\n    await authenticateToOKTA();\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n    await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n    //Locate iframe\r\n    let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n    if (intThinIFrames == 0) {\r\n      markers.stop('1- Clicking \"Start a Meeting\"');\r\n      markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n      markers.set('Taking thiniframes=0 ScreenShot');\r\n      await driver.takeScreenshot();\r\n      //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n      let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start\")]');\r\n      markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n      if (intStartMeetingPage > 0) {\r\n        markers.start('2: Clicking \"Start a Meeting\"');\r\n        await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n        await driver.takeScreenshot();\r\n        await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n        markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n      }\r\n    }\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try { markers.stop('1- Clicking \"Start\"'); } catch { };\r\n  try { markers.stop('2- Clicking \"Start\"'); } catch { };\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n    sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n      click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2390937"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2390937"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2390937"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2390937"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2390937"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2390937"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-11-12 04:54:32",
            "modifiedDate": "2023-10-31 23:30:19",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2390940,
            "testName": "DMZ Webex amexstream.webex.com - Login + Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amexstream.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 30,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n    await driver.get(settings.url);\r\n    await authenticateToOKTA();\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n    await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n    //Locate iframe\r\n    let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n    if (intThinIFrames == 0) {\r\n      markers.stop('1- Clicking \"Start a Meeting\"');\r\n      markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n      markers.set('Taking thiniframes=0 ScreenShot');\r\n      await driver.takeScreenshot();\r\n      //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n      let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start\")]');\r\n      markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n      if (intStartMeetingPage > 0) {\r\n        markers.start('2: Clicking \"Start a Meeting\"');\r\n        await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n        await driver.takeScreenshot();\r\n        await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n        markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n      }\r\n    }\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try { markers.stop('1- Clicking \"Start\"'); } catch { };\r\n  try { markers.stop('2- Clicking \"Start\"'); } catch { };\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n    sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n      click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "Testing copy prepared by Benton (benton@cisco.com)",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2390940"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2390940"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2390940"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2390940"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2390940"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2390940"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-07-26 14:13:42",
            "modifiedDate": "2023-11-03 07:21:08",
            "createdBy": "Deleted User",
            "modifiedBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3014564,
            "testName": "Email - Round Trip - Graph Using Certificate",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { driver, markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n\r\n// Change this to true should you wish to log more detail on the processing of this script. *** Unique Markers will Increase ***\r\nconst boolLogAsMarkers = false;\r\n\r\nconst clientId = 'aee91fd6-14b9-4f78-8c37-038f1b163366';        // Azure Application (client) ID\r\nconst tenantId = '66295b3b-c4fd-41af-a077-c0ec2a40e369';        // Azure Directory (tenant) ID\r\nconst thumbprint = '8a84c2fe64b89b91c52d8cfba1615ebf1d24f995'   // Certificate thumbprint\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey = `e8e50928063ce0252b910ff86090d33c:a25f1fcd6ee0c6c6747db63154bde1d47e483c54f5160df0a93240e6e6584701d6ca8444eb04852937ba4769fa08d1cdc813a386ff8ed503f5faee949dddc79cc55966fe007e397cf97ee08e4048711d57f7f1bfc68f2c286836fe4652fac834e1d9f346a2e6f6a551de78d2090f78389d312433f75913c3ddef346ef8c32b80fd5ddf1bd768314dc4ffdfc7002813659ae95e90269bd9bd001c000d4d5cd306240945fd4569f148d065e1086d57a237181cedab35e003ad352c4d7eb2268e5441269f8cdc540d4fe609d8f07526a468345ada66634a40162ebd537f0339d0bc134c118b50f222e0124c2114eaa8dc49a647bce8cd3e731300f3c6948ba31c6943375c04cb36071b7b9963b21c19693ee194a734d942cc05096bb93d3f9b3c8e6b57e663a90cafcbb116f63b3afd7f37ee1180f415a9c6d7b5a33a70ca6537de460abdb6cab38fde58d18e1d43906c93bbecf36ed6058ef39a05a1c4346fc09f6d01c6a737376d98bdaff0bbb488082adb4e2c051a307edfbdee2f8be1e13a133fc610aab3a0a1cccd7957270e7fd3541dc4d03f8b607503f0ab1b859a48060d1ae33773749e2c1290e02f8d16c5307169b018c3680810160fcaf76764b0e12774e032e74cda3aeec02bbba33703b176c38f440c5d73c95938161727856d459761c781df63aca5604389191dac8d8090dde34b07f20fccb0ec99db18fde7c5be131894e8966467ff5393c32f044d8428ecaff29f03dfef2a19d0ce18e54072a156d9de59785889d57720c9a83bbbef0d0fb2c27f7c3734552b37e0f3cae27c220d2a109aa456cb136b03a96781fde3931d18d21304071d31945252d799015a6f15aeac6efe9999b3833aa01194d59a2e8cfd5b3b2b6be1e3493df663edf2b6511eb647e04085f13505c1ea667af37a1ee013417b71aaae4b7273826bbd08e90210183117eadce05cd5a52a2c979ebecfa0f1ec156984d3073ab98632bae8d03c103b9d03e5a411dcf063041e2c8314fcd39e4471a5460417bf1eb922f0881b4cda575ab0eb28ba766615883b109c06a55d5e08dcdedaec15cb206873360e781095e5bfcc86aa1f93d66119a6a72fa92b98caf8d68fa78290bc2ca01f5f4c7baab59fdb1b1df825cf537dd59e3db0d4fd1cf3fb43e87faabc9ed4e6281cddbb6dad964e81085ba9dd3c38b79635afb515c48890a850f539c195b3a5931997f2993f547f5a653fe8ad1de971c534722c3953c29fcbd89e235751682e3267f37ba513d1cb0eafe02d977e4fffe9aad93ab8efe31dfd8c7f414eb5456bb681b82ee8039554a30375e6deb714572774148a46f31911f7b84a442699907b2c559d6cef3c37201e11ab9eab8eecf1a247155e0ca07f1402f22a84506bd39844f980e3c982ee88f12f7fa484830486e310325fe385ee76155394f422f6faf4f379776ea6aa49ef08c6f04b027dc0a1441013950c63fb9de86eb6d0228c3b0017c1ae5c585d069b54f4dad5f5f36338eb38d9000f5b187d0d56caa020d7f9dca9397448e2b8c79f498f4ecb1fcf64eba467eb54553f1d39d6c343c8695e5030c94e4891d2536eda266ef099d4ebad7bd838382f6a29da43b1b51413c07498a1ad8835d180b97aacd3ee43c9d7fc45285e65bbd3058519da4979731ef60f91b519139645f5ce7a7d9b516de2c8a8e935e631ba2a3f7ee3fb96a938ca66d13581ed5a8b80fe57a51f95940f99cbfdfa1d1a6911cab5150c8865199d1de2f61ef649ae4ea527b115440f0a5b460d24019d2efa26675be5c1c61c0d76cd37f92871743adeb812ae1cda1f12a3011404eda261b2c32ab3247b71074244465597dcb00b5dab53fc694b41b863fcd20aa4ec1cda55fcd01b4091a9ecbdf3fb6f715873703eaa39924b9356f13aedafd9db2d4665ba5f3c0e7895b58c0f0a96318b38a9f8830232e99584a5000a7eded5c70a9cd65a48cbd496ce931a9ccf5d8ed8007394f26d41d2c7e631461e308d5c3fde503afa655c743ae579d5ede16554fa668df9f625e8a5c9e795a890aba945b90363550931dc0add9a762a781b13cd7fd28a91f6448c216c83bd11918d243aa72ee96c5773a96eb54ff4cfe5cbd906b3690c225b51ca89bf7d31200cf37f7f54dc6a31d4186c016d220fa959972e4bf0b125d695019b35dadb6bd938072bcc5355cb02981f162fa75021a26e8df772b1ff8fa31e665510e18637eaa4a1d733d641b5da23eb4b43347bc0c4f1f9051b9d4dcb452588bbe17651735e6199c6fd6aa7ec8bc6f626beb1519870ac414a748e7c4439124fa809aa58ecc837289b8a20d26eb89a2e97c1ecc1dcfe2bdac5e5878cfd6629ce7d87ad94481415da111a2457ae54406bfbcd580b4f55671abf5c770b62a5d8e98e464b912d0a785841216eb4a4016751c3fe`;\r\nconst strUserPrincipal = `svc.thouseyeexo@aexp.com`;\r\nconst strCustomInboxFolder = 'GraphRoundTrip';\r\nconst intSecondsToWaittoFindMessage = 30;\r\nconst strToAddress365 = 'roundtrip@roundtrip.aexp.com';\r\nconst strGraphBaseURL = `https://graph.microsoft.com/v1.0`;\r\nconst dtDateSent = `GraphAPI-RoundTrip CreateDateTime:` + Date.now();\r\nvar strSendEmailURL = `${strGraphBaseURL}/users/${strUserPrincipal}/sendMail`;\r\nvar strFindEmailURL = `${strGraphBaseURL}/users/${strUserPrincipal}/mailFolders/{strFolderID}/messages?$format=json&$search=\"subject:${dtDateSent}\"&select=subject,toRecipients`;\r\nvar strFindEmailFolderID = `${strGraphBaseURL}/users/${strUserPrincipal}/mailFolders?filter=displayname eq '${strCustomInboxFolder}'`;\r\nvar strError = '';\r\nvar jsonEmailMessage = {\r\n  message: {\r\n    subject: dtDateSent,\r\n    body: {\r\n      contentType: 'Text',\r\n      content: dtDateSent\r\n    },\r\n    toRecipients: [\r\n      {\r\n        emailAddress: {\r\n          address: strToAddress365\r\n        }\r\n      }\r\n    ],\r\n    from: {\r\n      emailAddress: {\r\n        address: strUserPrincipal\r\n      }\r\n    }\r\n  },\r\n  saveToSentItems: 'true'\r\n};\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  const passphrase = credentials.get('key_EXOMSGBLUECERT23');\r\n  const privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\n  // Construct the signed JWT\r\n  let current_time = Math.floor(new Date().getTime() / 1000);\r\n  let nbf_time = current_time - 1;\r\n  let exp_time = current_time + (5 * 60);\r\n\r\n  let jwt_header = base64Url(JSON.stringify({\r\n    \"typ\": \"JWT\",\r\n    \"alg\": \"RS256\",\r\n    \"x5t\": hexStringTo64(thumbprint)\r\n  }));\r\n  let jwt_payload = base64Url(JSON.stringify({\r\n    \"iss\": clientId,\r\n    \"sub\": clientId,\r\n    \"aud\": oauthUrl,\r\n    \"exp\": exp_time,\r\n    \"nbf\": nbf_time\r\n  }));\r\n  let jwt_tosign = (jwt_header + \".\" + jwt_payload);\r\n  let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey });\r\n  let signed_jwt = (jwt_tosign + \".\" + base64Url(signature));\r\n\r\n  // Fetch the Access token from the OAuth service\r\n  markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n      \"redirect_uri\": \"http://localhost/\",\r\n      \"grant_type\": \"client_credentials\",\r\n      \"client_id\": clientId,\r\n      \"scope\": \"https://graph.microsoft.com/.default\",\r\n      \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n      \"client_assertion\": signed_jwt,\r\n      \"response_type\": \"code\"\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n        'Authorization': 'Bearer ' + signed_jwt\r\n      },\r\n      body: formBody\r\n    };\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n      const oauthErrorResponseText = await oauthResponse.text();\r\n      strError = (`RetrieveAccessToken:: ERROR: Subject:\"${dtDateSent}\" ${oauthResponse.status} ${oauthResponse.statusText} \\n ${oauthErrorResponseText} Test Un-Successful`).replace(/\\./g, ` `);\r\n      markers.set(strError);\r\n      throw new Error(strError);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    consoleLog(`OAuthResponse:: ${JSON.stringify(responseJson)}`);\r\n    const accessToken = responseJson.access_token;\r\n    consoleLog('AccessToken: ' + accessToken);\r\n  markers.stop('RetrieveAccessToken');\r\n\r\n  consoleLog(`runScript:: Enter()`);\r\n\r\n  consoleLog(`SendMessage:: Sending Message with subject \"${dtDateSent}\"`);\r\n  consoleLog(`SendMessage:: Sending JSON Message Payload \"${JSON.stringify(jsonEmailMessage)}\"`);\r\n  consoleLog(`SendMessage:: Posting Message with URL \"${strSendEmailURL}\"`);\r\n  markers.start(`SendMessage:: Sending Message`);\r\n  let objResult = await fetch(strSendEmailURL, {\r\n    method: 'POST',\r\n    body: JSON.stringify(jsonEmailMessage),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': accessToken\r\n    }\r\n  });\r\n\r\n  if (objResult.status == 202) {\r\n    markers.stop(`SendMessage:: Sending Message`);\r\n    consoleLog(`SendMessage:: Email Successfully Sent\"`);\r\n    markers.start(`FindMessage:: Finding Message`);\r\n    // Find the ID for the GraphRoundTrip folder\r\n    objResult = await fetch(strFindEmailFolderID, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'authorization': accessToken,\r\n        'Prefer': `IdType=\"ImmutableId\"`\r\n      }\r\n    });\r\n    let arrFolders = await JSON.parse(await objResult.text());\r\n    let strFolderID = arrFolders[\"value\"][0].id;\r\n    // Find Sent Email\r\n    consoleLog(`FindMessage:: Finding Message with Subject \"${dtDateSent}\"`);\r\n    strFindEmailURL = strFindEmailURL.replace(`{strFolderID}`, strFolderID);\r\n\r\n    let arrFindMessage = [];\r\n\r\n    for (let i = 0; i < intSecondsToWaittoFindMessage; i++) {\r\n      objResult = await fetch(strFindEmailURL, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': accessToken,\r\n          'Prefer': `IdType=\"ImmutableId\"`\r\n        }\r\n      });\r\n      arrFindMessage = await JSON.parse(await objResult.text());\r\n      if (objResult.status == 200) {\r\n        if ((arrFindMessage.value).length > 0) {\r\n          await consoleLog(`FindMessage:: ${dtDateSent} == ${arrFindMessage.value[0].subject}.  Test Successful`);\r\n          markers.stop(`FindMessage:: Finding Message`);\r\n          return true;\r\n        }\r\n      }\r\n      else {\r\n        strError = (`FindMessage:: Error: Subject:\"${dtDateSent}\" ${arrFindMessage.error.code}:${arrFindMessage.error.message}  Test Un-Successful`).replace(/\\./g, ` `);\r\n        await consoleLog(strError);\r\n        markers.set(strError);\r\n        throw new Error(strError);\r\n      }\r\n      await consoleLog(`FindMessage:: Sleeping for 1000ms.  Round ${i}/${intSecondsToWaittoFindMessage}`);\r\n      await sleep(1000);\r\n    }\r\n    //If we reach here we have not found the message, thus throw error\r\n    strError = (`FindMessage:: Error: Could not find Subject:\"${dtDateSent}\" after ${intSecondsToWaittoFindMessage} seconds Test Un-Successful`).replace(/\\./g, ` `);\r\n    await consoleLog(strError);\r\n    markers.set(strError);\r\n    throw new Error(strError);\r\n  }\r\n  else {\r\n    strError = (`SendMessage:: Error: Could not send Subject:\"${dtDateSent}\" ${objResult.status}:${objResult.statusText}  Test Un-Successful`).replace(/\\./g, ` `);\r\n    markers.set(strError);\r\n    await consoleLog(strError);\r\n    throw new Error(strError);\r\n  }\r\n};\r\n\r\nfunction base64Url(data) {\r\n  return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n}\r\n\r\nfunction hexStringTo64(data) {\r\n  return Buffer.from(data, \"hex\").toString('base64');\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n  var key = Buffer.from(pass, \"utf8\");\r\n  var components = encKey.split(':');\r\n  var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n  var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n  var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n  deciphered += decipher.final(\"utf8\");\r\n\r\n  return deciphered;\r\n}\r\n\r\n/**\r\n * @param {string} strLogString\r\n */\r\nasync function consoleLog(strLogString) {\r\n  var m = new Date();\r\n  var dateString =\r\n    m.getUTCFullYear() + \"/\" +\r\n    (\"0\" + (m.getUTCMonth() + 1)).slice(-2) + \"/\" +\r\n    (\"0\" + m.getUTCDate()).slice(-2) + \" \" +\r\n    (\"0\" + m.getUTCHours()).slice(-2) + \":\" +\r\n    (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" +\r\n    (\"0\" + m.getUTCSeconds()).slice(-2) + \":\" +\r\n    (\"0\" + m.getUTCMilliseconds());\r\n  console.log(`${dateString}: ${strLogString}`);\r\n  if (typeof boolLogAsMarkers !== 'undefined') {\r\n    if (boolLogAsMarkers) {\r\n      markers.set(strLogString.replace(/\\./g, ` `));\r\n    }\r\n  }\r\n}\r\n/**\r\n * @param {number} ms\r\n */\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "1/31/23 - Updated name from \"EXO RoundTrip Graph\" to \"Messaging RoundTrip Graph\" - RSB",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3014564"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3014564"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3014564"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3014564"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3014564"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-08 14:14:58",
            "modifiedDate": "2023-11-08 19:48:13",
            "createdBy": "Roy Seidler-Brennan (Roy.Seidler-Brennan@aexp.com)",
            "modifiedBy": "Roy Seidler-Brennan (William.R.SeidlerBrennan1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 2247844,
            "testName": "Email - Round Trip - Outlook Web Using OKTA",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 110,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\n// Variables\r\nvar strMyEmail = 'svc.thouseyeexo@aexp.com';\r\nvar strSubject = \"Hello \" + Date.now();\r\nvar strRecipientEmail = 'RoundTrip@Roundtrip.aexp.com'\r\n\r\n// Constants\r\nconst intImplicitTimeout = 30 // Number of seconds to wait for an action to take place before erorring out\r\n\r\nasync function runScript() {\r\n\r\n  // Configure\r\n  await configureDriver();\r\n\r\n  markers.start('Login');\r\n    // Goto outlook.office.com\r\n    await driver.get('https://mymail.aexp.com');\r\n    await authenticateToOKTA();\r\n  markers.stop('Login');\r\n\r\n  //BELOW CODE TO TEST CREATING AND SENDING EMAIL FROM OUTLOOK\r\n  markers.start('Compose Mail');\r\n    // Click on 'New message'\r\n    await click(By.xpath(`//span[text()=\"New message\" or text()='New mail']`));\r\n\r\n    await click(By.xpath(`//div[@aria-label=\"To\"]`));\r\n    await typeText(strRecipientEmail, By.xpath(`//div[@aria-label=\"To\"]`));\r\n\r\n    // Verify that the recipient address was typed correctly. If not, try again.\r\n    let objToBox = await driver.findElement(By.xpath(`//div[@aria-label=\"To\"]`));\r\n    let objToValue = await objToBox.getAttribute('value');\r\n    if (objToValue != strRecipientEmail){\r\n        await objToBox.clear()\r\n        await typeText(strRecipientEmail, By.xpath(`//div[@aria-label=\"To\"]`));\r\n    }    \r\n\r\n    // Type a subject\r\n    await typeText(strSubject, By.xpath(`//input[@placeholder=\"Add a subject\"]`));\r\n    await typeText(strSubject, By.xpath(`//div[contains(@aria-label,\"Message body\")]`));\r\n  markers.stop('Compose Mail');\r\n\r\n  // Click on 'Send', wait for compose window to disappear\r\n  markers.start('Send Mail');\r\n    try {\r\n      var objSendButton = await driver.findElement(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n      await click(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n      await driver.wait(until.stalenessOf(objSendButton));\r\n      //await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//span[contains(text(),'Select an item to read')]`))));\r\n    } \r\n    catch (e) {\r\n      let strSendError = `SendEmail:: Error: Couldn't Send \"${strSubject}\". Test Un-Successful`;\r\n      markers.set(strSendError.replace(/\\./g, ` `));\r\n      await driver.takeScreenshot();\r\n      throw new Error();\r\n    }\r\n  markers.stop('Send Mail');\r\n\r\n  //THIS CODE WILL SEARCH FOR EMAIL\r\n  markers.start('Verify Mail Sent');\r\n    // Open 'Sent Items'\r\n    await click(By.xpath(`//span[contains(text(),\"Navigation pane\")]/..//span[contains(text(),\"Sent Items\")]`));\r\n\r\n    // Find the email that was sent - by clicking on it (waits the implicit wait timeout)\r\n    try {\r\n      await click(By.xpath(`//*[contains(text(),\"${strSubject}\")]`));\r\n    }\r\n    catch (e) {\r\n      let strFindSentErorr = `FindSentEmail:: Error: Couldn't find \"${strSubject}\". Test Un-Successful`;\r\n      throw new Error(strFindSentErorr);\r\n    }\r\n    await driver.takeScreenshot();\r\n  markers.stop('Verify Mail Sent');\r\n\r\n  //Validate Inbox - take screenshot\r\n  markers.start('Verify Inbox Receipt');\r\n    //await click(By.xpath(`//div[@title=\"Inbox\"]`)); ----edit out due to code change 7_28_23\r\n    await click(By.xpath(`//*[contains(text(),\"Inbox\")]`));\r\n    try {\r\n      await click(By.xpath(`//*[contains(text(),\"${strSubject}\")]`));\r\n    }\r\n    catch (e) {\r\n      let strInboxError = `FindInboxEmail:: Error: Couldn't find \"${strSubject}\". Test Un-Successful`;\r\n      throw new Error(strInboxError);\r\n    }\r\n    await driver.takeScreenshot();\r\n  markers.stop('Verify Inbox Receipt');\r\n\r\n  // ALL OF THE BELOW IS NEEDED FOR LOGOUT\r\n  markers.start('Sign Out');\r\n    // Click on 'Thousand Eyes'\r\n    await click(By.xpath(`//*[@aria-label=\"Account manager for svc.ThousEyeEXO\"]`));\r\n\r\n    await driver.wait(until.elementLocated(By.xpath(`//a[contains(.,'Sign out')]`)));\r\n    await click(By.xpath(`//a[contains(.,'Sign out')]`));\r\n\r\n    await driver.takeScreenshot();\r\n  markers.stop('Sign Out');\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: intImplicitTimeout * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n/**\r\n* @param {{ (): Promise<void>; (): any; }} attemptActionFn\r\n* @param {number} attemptEndTime\r\n*/\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Enter 'svc.thouseyeexo@aexp.com' service account\r\n    await typeText(strMyEmail, By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    await typeText('svc.thouseyeexo', By.id(`okta-signin-username`));\r\n    // DEFINED O365 password and stored in MSGEXO-TE-PWD\r\n    await typeText(credentials.get('MSGEXO-TE-PWD'), By.id(`okta-signin-password`));\r\n\r\n    // Click on 'Sign In'\r\n    await click(By.id(`okta-signin-submit`));\r\n    await driver.takeScreenshot();\r\n\r\n    // Click on 'No'\r\n    await click(By.id('idBtn_Back'));\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "01.05.23",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2247844"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2247844"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2247844"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2247844"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2247844"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2247844"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-07-18 10:59:57",
            "modifiedDate": "2023-07-18 11:00:08",
            "createdBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "modifiedBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3871148,
            "testName": "Graph - HTTPTest",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://drive.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n\r\nconst clientId = credentials.get('SPOCertClientID');        // Azure Application (client) ID\r\nconst tenantId = credentials.get('SPOCertTenantID');        // Azure Directory (tenant) ID\r\nconst thumbprint = credentials.get('SPOCertThumbPrint')     // Certificate thumbprint\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey = `b33d5fa6460774896b191a09a3348bad:4294d24658941cd8da440e5acb8b47b9cf9762ee67d697337eeabc5a429454f268fa654c218d674140df3a506c9b232205710819414ac1753b8933e21cc17a2ad4a6d1ee52dd43c49325b4d26e4d91110655b18bb5ec170d6807badcb5b179a167ed0b35d94df7a8bcde36b70e859ceedb096190bbcb2608ccab149e94fd4843838680c06874706ab3945a83eaed5740134104c40179693e46a6287610b94a0b645dada98b95efa281f5a750224dbda470968c44ce2b9a986b71d1f8eb59b8353464224516234e724843b59a862d605bca042af0e7469578aa105da46b54bbbf8e3585daf694cd94e503a18b0913882179a43c047025b060628235f4b721c26dd5d1ee3725442c46c093448ce2d5173cde6f1ea3eaa4c6d7f65b59905282114cc1904c0b98d6b4dc7fd55219f920df6778d3e4f82ed04602e001501335743b15f9b2ed6ee46c1a9a12ee7f25c9b448bfaff3dc1f10e334360cb6acf5dd36f06863cdf8b99fa50c3132042f6d71336cdf39e3e57389bf22c89dc611fe10120073d35bf982d4ea2dc2bea4b9396678ac9df2a9a1fb560904f46e331005164087be6a8f84ae02461d739969980b73c3b8e1cc6e646455f441313386372e80ca5fbbf416ce16b49a00701191b7555f4c41422dff415572de7ae008f3e2e040ec7068fab5b12342433ed831603692adebeefe69fc42a366a775183c8e5e8e16928aac1427ece1f2103855fa8b625a66867c84a4a98e978b2ff4ce72eeda04868aff0b62ed07cb81f8b59a6745902d6f18722f771ecb1b8b64a6516c6408aae170192c8ebf89a9b055d4b2660550028f7286785a3bf74537c2747ec0d7d2264af7dfe8aa1b48591bcc42fac2e930b3e140396de9d082e99175577e73b2a7440d3c19a4ced9f6a3cf47493434fc1c6bdca538c0c828c918fbb9045eea55fe69c00baa635d5a978672c1bdc7c5381aad795d2a8c67dfcacd5c8b2e5d1045d55e2f54e9d4f57db93e47f4df38fcb76768291a0a73275cecc68c4aea010f49ff7a7cb3e3bf5916dcc2b4c266da50319865902720963867ebe2ec947df0c43c8e2db3e02cc6866f33829e6b4c72a72ff7f7a9041c7ff01221e3042eefb5a26fe98c3d989cdac430e0c65c4246053229e07978ab208d521358e244b72ddd9dac6516968f89563d1ff169bb44a92ad73465e6bbb3d2db8357f52c6283d7b40ede91ae9998d53e35dc1d10d99808776e1a829e841a7e1bb9fbce83626669434f61cb1362e0b5d00a7f47594ec52ee712c35acc5c5e1e6abd4312c444ff12e9ddc09707f168f474c83684f89de4ab41a53a18f2018179c28eddf965d63c896a2b498a84eb6fb70f662bc822c4ab52204a2e49609288858fb8055ef9f9f9f1d04d10bb231c2a541b0f8ec7a2c090e0193108126055a524e28ba872b5314e080ad2d83d5fa29ea1669ee610b86630681b995ae8e83a69c8bd2d6449782ddc38c6f73e6e4b1b7b5d2fe95c86b52bd5db5ddeccc2008e7609256b35f65ccc3857d1c8c17b0e9f51b67b03c981e7c8248a02d87504aceb9002f4e171ef9a81689b89192ec95bc11abc617836c7d5df5b817e80918ae857a0b2d24bf21e423eedb3d5297ce5f5141e27a8f75680a9bd1c5bfb88718443aefbac9e979f6557a31d2d62c08c60ada13583592f3d8f79edbb1e42d50725dfed1cbb213263df4042a2fda6972982dcf6afb5fadcccd7d160854a26a54bd586c219548b15eeff1a3fde28eca157d1e100397332a2046489457f24a293cb3b4568034c8df3c72a174b7c649acd8188c2337214b39295d3c7aa8fbc0481ef3f9d53791bdab9827838e3450e8dea222420179c08a39629f8889f0758279340a9555c566174a295c5f2a14b2f85deb9fc46bc86829b96984c9ed70a0a6d6578a938aa9adf41c5da2b97eaf0c1569d88c665345ecb8b2338314fb3e8062f769e7ecdb03fb5cd2c6f8da63663eeb8e34949247e2e08ab8e7757ee4a7f98fc5128c366d1b35c46d1e715be80a7d465fe6bd0567d0f392a5d77df0c9d390735bc56f5572a2a891d1d0cd054221c41da7bcc56a0c9415a9dcbe366a4a39ac23ac7298310e441a4d473eef448d2a5c090dcc35c1ba00c3085e0eb425a132a5ced8d7df4c796e4fe5b05cac3f2c9e1ae0a37048bcf40b4d8c5b4abefabb01bde380601e7733c9aa5cf9fae2c5a555e00d7a3df00529a29075e3c02468823591cd9dc12db43586d1c386a0d75b54c57f95486aad260245bf0b2ead02f8f67d8a2820c579a90dc6836d17b4e96ed4d73cf6a62cd732b89b5458103507d03b4257a71fe3dbf36d65a04f69dd2e96fe7d25a5787abe0ee63c1ffa1ae83670ce7cdb71421473f6a8b40b545`;\r\nconst strSiteURL = 'https://graph.microsoft.com/v1.0/users/ae1c0d3b-5b5a-46ce-b1d3-73f04f89a95c/drive/items/900d9974-5b1f-472c-b10a-4d2521617cc2/Content'; //ae1c0d3b-5b5a-46ce-b1d3-73f04f89a95c is userid of Sathiya\r\nconst passphrase = credentials.get('key-tEyes-SharePoint-OneDrive');\r\nconst privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    // Generate Signed JWT\r\n    let signed_jwt = await generateSignedJWT();\r\n    \r\n    //Fetch the Access token from the OAuth service\r\n    let accessToken = await getOAUTHToken(signed_jwt);\r\n\r\n\r\n    // Download Content\r\n    markers.start('DownloadOneDriveContent');\r\n        let resp = await fetch(strSiteURL, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': accessToken\r\n            }\r\n        });\r\n    if (resp.status != 200) { throw new Error(`Received:${resp.status}:${resp.statusText}`); }\r\n    if (resp.status == 200) { \r\n        markers.set(`SUCCESS:${resp.status}:${resp.statusText}`);\r\n        console.log(await resp.text()); }\r\n    markers.stop('DownloadOneDriveContent');\r\n\r\n};\r\n\r\nasync function getOAUTHToken(_strSignedJWT){\r\n    markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n        \"redirect_uri\": \"http://localhost/\",\r\n        \"grant_type\": \"client_credentials\",\r\n        \"client_id\": clientId,\r\n        \"scope\": \"https://graph.microsoft.com/.default\",\r\n        \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n        \"client_assertion\": _strSignedJWT\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n            'Authorization': 'Bearer ' + _strSignedJWT\r\n        },\r\n        body: formBody\r\n    }\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n        const oauthErrorResponseText = await oauthResponse.text();\r\n        throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    const strAccessToken = responseJson.access_token;\r\n    console.log(strAccessToken)\r\n    markers.stop('RetrieveAccessToken');\r\n    return strAccessToken;\r\n}\r\n\r\nfunction generateSignedJWT() {\r\n    // Construct the signed JWT\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey })\r\n    return (jwt_tosign + \".\" + base64Url(signature))\r\n\r\n    function base64Url(data) {\r\n        return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n    }\r\n\r\n    function hexStringTo64(data) {\r\n        return Buffer.from(data, \"hex\").toString('base64');\r\n    }\r\n\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':');\r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    \r\n    deciphered += decipher.final(\"utf8\");\r\n    \r\n    return deciphered;\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3871148"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3871148"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3871148"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3871148"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3871148"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3871148"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:22:03",
            "modifiedDate": "2021-05-13 15:47:43",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992910,
            "testName": "GSP_AccountLaunch_INTL",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 41,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n    \n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText('Svc.gsp.te', By.id(`textboxuid_AD`));\n\n    //Password\n    await typeText(credentials.get('GSPPassword'), By.id(`textboxpwd_AD`));\n    markers.start('Sign In')\n    await pressEnter(By.id(`textboxpwd_AD`));\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n    markers.stop('Sign In')\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n\n    markers.start(\"Home Page\");\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\");\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992910"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992910"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992910"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992910"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992910"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992910"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-22 19:28:34",
            "modifiedDate": "2021-05-13 15:47:44",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2021374,
            "testName": "GSP_AccountLaunch_Test",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 41,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n    \n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText('Svc.gsp.te', By.id(`textboxuid_AD`));\n\n    //Password\n    await typeText(credentials.get('GSPPassword'), By.id(`textboxpwd_AD`));\n    markers.start('Sign In')\n    await pressEnter(By.id(`textboxpwd_AD`));\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n    markers.stop('Sign In')\n    await generateError()\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n\n    markers.start(\"Home Page\");\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\");\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function generateError(){\n    markers.set(\"Account Launch Error\")\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2021374"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2021374"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2021374"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2021374"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2021374"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2021374"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:16:06",
            "modifiedDate": "2021-04-07 14:17:50",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992897,
            "testName": "GSP_AccountLaunch_US_HBS-Mexico",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-citrix-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n\n    markers.start(\"Home Page\");\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\");\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992897"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992897"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992897"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992897"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992897"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992897"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:07:09",
            "modifiedDate": "2021-05-13 15:47:43",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992872,
            "testName": "GSP_AccountLaunch_US_India",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1173.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n\n    markers.start(\"Home Page\");\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\");\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992872"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992872"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992872"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992872"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992872"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992872"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:08:22",
            "modifiedDate": "2021-05-13 15:30:08",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992994,
            "testName": "GSP_AccountLaunch_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n\n    markers.start(\"Home Page\");\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\");\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992994"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992994"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992994"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992994"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992994"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992994"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:13:44",
            "modifiedDate": "2021-05-13 15:31:04",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992890,
            "testName": "GSP_AccountLaunch_US_Phoenix",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n\n    markers.start(\"Home Page\");\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\");\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992890"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992890"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992890"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992890"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992890"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992890"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:11:55",
            "modifiedDate": "2021-04-07 14:17:50",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992886,
            "testName": "GSP_AccountLaunch_US_Sunrise",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n\n    markers.start(\"Home Page\");\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\");\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992886"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992886"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992886"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992886"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992886"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992886"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-01 18:23:47",
            "modifiedDate": "2021-10-01 18:23:50",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2287213,
            "testName": "GSP_AccountLinkage_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    await AccountLinkage();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function AccountLinkage(){\n\n // Click on 'Hub Menu'\n await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n // Search Box\n await click(By.id(`CPMTaskSearchInput`));\n //Enter Demand Name\n await typeText('Account Linkage', By.id(`CPMTaskSearchInput`));\n\n //Human Delay\n await driver.sleep(650);\n\n markers.start(\"Account Linkage\");\n await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n \n await driver.switchTo().defaultContent()\n await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n markers.stop(\"Account Linkage\");\n\n // Click on 'Basic'\n await click(By.css(`#\\\\$PpyWorkPage\\\\$pCurrentCard\\\\$pLinkedCards\\\\$l1 > [data-attribute-name=\"Relationship\"] [data-test-id=\"20150622224818014220135\"]`));\n\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2287213"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2287213"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2287213"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2287213"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2287213"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2287213"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-10 18:38:01",
            "modifiedDate": "2021-09-10 18:38:25",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2254748,
            "testName": "GSP_AccountNotes_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await AccountNotes();\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n    async function attemptToClick() {\n        await driver.findElement(selector)\n            .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n        .findElement(optionSelector)\n        .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n\n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods) {\n    try {\n        if (methods.pin) {\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function AccountNotes() {\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Account Notes', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start(\"Account Notes\");\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    markers.stop(\"Account Notes\");\n\n    //Click on notebox\n    await click(By.id(`FreeTextMemo`));\n\n    //enter example text\n    await typeText('test text', By.id(`FreeTextMemo`));\n\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-dblclick=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n    await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2254748"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2254748"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2254748"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2254748"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2254748"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2254748"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-01 18:11:39",
            "modifiedDate": "2021-10-01 18:11:47",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2287179,
            "testName": "GSP_AddressUpdate_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n  const settings = test.getSettings();\n  await driver.get(settings.url);\n\n  await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n  markers.start(\"Home Page\");\n  await AccountValidation({\n    pin: credentials.get('GSP_Platinum_CID') });\n\n  markers.stop(\"Home Page\");\n\n\n  await AddressUpdate();\n\n  await Exit();\n\n}\n\nasync function configureDriver() {\n  await driver.manage().setTimeouts({\n    implicit: 20 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  const element = await driver.findElement(selector);\n  await element.clear();\n  await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n  await simulateHumanDelay();\n  await driver.sleep(3000);\n  await driver.findElement(selectSelector).\n  findElement(optionSelector).\n  click();\n}\n\nasync function switchToTab(index) {\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const attemptEndTime = Date.now() + configuredTimeouts.implicit;\n  while (Date.now() < attemptEndTime) {\n    const tabs = await driver.getAllWindowHandles();\n    if (tabs.length > index) {\n      await driver.switchTo().window(tabs[index]);\n      return;\n    }\n    await driver.sleep(100);\n  }\n  throw new Error('Invalid Tab Index');\n}\n\nasync function AccountSearch(accountNumber) {\n  try {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)));\n\n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n\n    markers.start('Account Search');\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search');\n  } catch {\n    markers.set(\"Account Search Error\");\n  }\n}\n\nasync function AccountValidation(methods) {\n  try {\n    if (methods.pin) {\n      //Pin Validation\n      await typeText(methods.pin, By.id(`Answer`));\n      await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n      //Select No Caller\n      await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n  } catch {\n    markers.set(\"Account Validation Error\");\n  }\n}\n\nasync function AddressUpdate() {\n\n  // Click on 'Hub Menu'\n  await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n  await click(By.id(`CPMTaskSearchInput`));\n\n  await typeText('Address Update', By.id(`CPMTaskSearchInput`));\n\n  //Click on first dropdown selection\n  await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n  markers.start('Addressupdate');\n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    // Click on 'Addresses on File'\n\tawait click(By.css(`.item-3 > .content-inner > .layout-noheader > .layout-body`));\n\n  markers.stop('Addressupdate');\n\n}\n\nasync function Exit() {\n  // Click on 'Finished with Account'\n  await click(By.css(`[data-dblclick=\"....\"]`));\n\n  await driver.switchTo().defaultContent();\n\n  // Click on 'Username'\n  await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n  // Click on 'Logout'\n  await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2287179"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2287179"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2287179"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2287179"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2287179"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2287179"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-15 18:10:52",
            "modifiedDate": "2021-10-15 18:17:31",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2327795,
            "testName": "GSP_APR_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n\n    await APR();\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n    async function attemptToClick() {\n        await driver.findElement(selector)\n            .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n        .findElement(optionSelector)\n        .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n\n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods) {\n    try {\n        if (methods.pin) {\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function APR() {\n\n  // Click on 'Hub Menu'\n  await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n  await click(By.id(`CPMTaskSearchInput`));\n\n  await typeText('APR', By.id(`CPMTaskSearchInput`));\n\n  markers.start('apr');\n\n  // Click on 'APR'\n  await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n  await driver.switchTo().defaultContent();\n\n  await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)));\n\n  await driver.sleep(650);\n\n  // Click on 'Standard Rate'\n  await click(By.css(`[data-attribute-name=\"Name\"] > .oflowDivM`));\n\n  markers.stop('apr');\n  \n  }\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-dblclick=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n    await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2327795"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2327795"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2327795"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2327795"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2327795"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2327795"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-18 16:22:32",
            "modifiedDate": "2021-10-18 16:22:36",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2332949,
            "testName": "GSP_CashAtATMs_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await cashAtATM();\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n    async function attemptToClick() {\n        await driver.findElement(selector)\n            .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n        .findElement(optionSelector)\n        .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n\n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods) {\n    try {\n        if (methods.pin) {\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function cashAtATM() {\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Cash at ATMs', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start('Cash at ATMs');\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`.content-inner > .layout > .layout-body > .content > .content-item > .content-inner > #RULE_KEY > #EXPAND-OUTERFRAME > #EXPAND-PLUSMINUS > #RULE_KEY .icon`));\n\n    // Click on 'I want to'\n\tawait click(By.css(`[data-test-id=\"2018012620541105581920-Label\"]`));\n\n    markers.stop('Cash at ATMs');\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-dblclick=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n    await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2332949"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2332949"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2332949"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2332949"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2332949"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2332949"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:27:19",
            "modifiedDate": "2021-05-13 15:31:04",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992917,
            "testName": "GSP_CheckBalanceSummary_INTL",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 180,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n    \n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText('Svc.gsp.te', By.id(`textboxuid_AD`));\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(credentials.get('GSPPassword'), By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n\tmarkers.start(\"Sign In\")\n\tawait click(By.id(`Login`));\n\tmarkers.stop(\"Sign In\")\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n    \n    markers.start(\"Home Page\")\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\")\n\t\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Balance Summary'\n     await click(By.css(`[name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n    markers.start('Check Balance')\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    //Click on Close Task\n    await driver.switchTo().defaultContent()\n    markers.stop('Check Balance')\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992917"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992917"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992917"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992917"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992917"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992917"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:49:41",
            "modifiedDate": "2021-05-13 15:47:44",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992955,
            "testName": "GSP_CheckBalanceSummary_US_HBS-Mexico",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-citrix-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n    \n    markers.start(\"Home Page\")\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\")\n\t\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Balance Summary'\n     await click(By.css(`[name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n    markers.start('Check Balance')\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    //Click on Close Task\n    await driver.switchTo().defaultContent()\n    markers.stop('Check Balance')\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992955"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992955"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992955"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992955"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992955"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992955"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:31:45",
            "modifiedDate": "2021-05-13 15:47:42",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992931,
            "testName": "GSP_CheckBalanceSummary_US_India",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1173.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n    \n    markers.start(\"Home Page\")\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\")\n\t\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Balance Summary'\n     await click(By.css(`[name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n    markers.start('Check Balance')\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    //Click on Close Task\n    await driver.switchTo().defaultContent()\n    markers.stop('Check Balance')\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992931"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992931"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992931"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992931"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992931"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992931"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:09:16",
            "modifiedDate": "2021-05-13 15:30:08",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992996,
            "testName": "GSP_CheckBalanceSummary_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n    \n    markers.start(\"Home Page\")\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\")\n\t\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Balance Summary'\n     await click(By.css(`[name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n    markers.start('Check Balance')\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    //Click on Close Task\n    await driver.switchTo().defaultContent()\n    markers.stop('Check Balance')\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992996"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992996"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992996"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992996"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992996"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992996"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:34:41",
            "modifiedDate": "2021-05-13 15:47:43",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992933,
            "testName": "GSP_CheckBalanceSummary_US_Phoenix",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n    \n    markers.start(\"Home Page\")\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\")\n\t\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Balance Summary'\n     await click(By.css(`[name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n    markers.start('Check Balance')\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    //Click on Close Task\n    await driver.switchTo().defaultContent()\n    markers.stop('Check Balance')\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992933"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992933"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992933"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992933"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992933"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992933"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:50:51",
            "modifiedDate": "2021-05-13 15:47:44",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992957,
            "testName": "GSP_CheckBalanceSummary_US_Sunrise",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\nasync function runScript() {\n\n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n    await driver.sleep(5000)\n    \n    markers.start(\"Home Page\")\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\")\n\t\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Balance Summary'\n     await click(By.css(`[name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [name=\"BASE_REF\"]:nth-child(1) > .content-inner:nth-child(1) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n    markers.start('Check Balance')\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    //Click on Close Task\n    await driver.switchTo().defaultContent()\n    markers.stop('Check Balance')\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992957"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992957"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992957"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992957"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992957"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992957"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-24 18:32:39",
            "modifiedDate": "2021-09-24 18:32:44",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2274768,
            "testName": "GSP_CLICCaseHistory_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n  const settings = test.getSettings();\n  await driver.get(settings.url);\n\n  await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n  markers.start(\"Home Page\");\n  await AccountValidation({\n    pin: credentials.get('GSP_Platinum_CID') });\n\n  markers.stop(\"Home Page\");\n\n  await CLICCaseHist();\n\n  await Exit();\n\n}\n\nasync function configureDriver() {\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  const element = await driver.findElement(selector);\n  await element.clear();\n  await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n  await simulateHumanDelay();\n  await driver.sleep(3000);\n  await driver.findElement(selectSelector).\n  findElement(optionSelector).\n  click();\n}\n\nasync function AccountSearch(accountNumber) {\n  try {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)));\n\n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n\n    markers.start('Account Search');\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search');\n  } catch {\n    markers.set(\"Account Search Error\");\n  }\n}\n\nasync function AccountValidation(methods) {\n  try {\n    if (methods.pin) {\n      //Pin Validation\n      await typeText(methods.pin, By.id(`Answer`));\n      await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n      //Select No Caller\n      await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n  } catch {\n    markers.set(\"Account Validation Error\");\n  }\n}\n\nasync function CLICCaseHist() {\n\n  // Click on 'Hub Menu'\n  await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n  await typeText('CLIC Case History', By.id(`CPMTaskSearchInput`));\n\n  await driver.sleep(750);\n  //Click on first dropdown selection \n  await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n  await driver.switchTo().defaultContent();\n\n  await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)));\n\n  // Click on 'CLIC Case History'\n  await click(By.css(`#EXPAND-OUTERFRAME > #RULE_KEY > .header-content`));\n\n\n\n}\n\nasync function Exit() {\n  // Click on 'Finished with Account'\n  await click(By.css(`[data-dblclick=\"....\"]`));\n\n  await driver.switchTo().defaultContent();\n\n  // Click on 'Username'\n  await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n  // Click on 'Logout'\n  await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2274768"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2274768"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2274768"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2274768"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2274768"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2274768"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-22 18:21:53",
            "modifiedDate": "2021-10-22 18:21:58",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2344763,
            "testName": "GSP_CoBrandRewards_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Hilton'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        noCaller: true\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await Co_BrandRewards();\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n    async function attemptToClick() {\n        await driver.findElement(selector)\n            .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n        .findElement(optionSelector)\n        .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n\n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods) {\n    try {\n        if (methods.pin) {\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function Co_BrandRewards() {\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Co-Brand Rewards', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start(\"Co-Brand Rewards\");\n    // Click on 'Co-Brand Rewards'\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n\n    // Click on 'Balance Inquiry'\n\tawait click(By.css(`[data-test-id=\"201801250047530497331\"]`));\n    \n    // Click on 'Qualified Spend'\n\tawait click(By.css(`#Tab2 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n    \n    // Click on 'Qualified Spend Descriptions'\n\tawait click(By.css(`.layout-content-mimic_a_sentence > .item-1 .dataLabelRead`));\n    \n    // Click on 'Adjustment'\n\tawait click(By.css(`#Tab4 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n    \n    // Click on 'Points Adjustment'\n\tawait click(By.css(`[data-test-id=\"2018012621390406679700\"]`));\n    \n    // Click on 'Transfer'\n\tawait click(By.css(`#Tab5 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n    \n    // Click on 'Transfer'\n\tawait click(By.css(`#INNERDIV-SubSectionCobrandMainBBBBB #RULE_KEY > .layout:nth-child(1) > .layout-body:nth-child(1) > .content:nth-child(1) > .content-item:nth-child(1) > .content-inner:nth-child(1) > .layout:nth-child(1) > .layout-body:nth-child(1) > .content:nth-child(1) > .content-item:nth-child(1) > .content-inner:nth-child(1) > .field-item:nth-child(1)`));\n\n    // Click on 'Partner No. Update'\n\tawait click(By.css(`#Tab7 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n    \n    markers.stop(\"Co-Brand Rewards\");\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-dblclick=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n    await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2344763"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2344763"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2344763"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2344763"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2344763"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2344763"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:36:37",
            "modifiedDate": "2021-05-13 15:47:42",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992935,
            "testName": "GSP_CommonURLS_INTL",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 180,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText('Svc.gsp.te', By.id(`textboxuid_AD`));\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(credentials.get('GSPPassword'), By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n\tmarkers.start(\"Sign In\")\n\tawait click(By.id(`Login`));\n\tmarkers.stop(\"Sign In\")\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Common URLs'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n    \n    // Click on 'Add task(s)'\n\tmarkers.start(\"Common URLS\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"Common URLS\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992935"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992935"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992935"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992935"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992935"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992935"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:52:45",
            "modifiedDate": "2021-04-07 14:17:50",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992962,
            "testName": "GSP_CommonURLS_US_HBS-Mexico",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-citrix-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Common URLs'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n    \n    // Click on 'Add task(s)'\n\tmarkers.start(\"Common URLS\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"Common URLS\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992962"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992962"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992962"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992962"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992962"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992962"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:39:47",
            "modifiedDate": "2021-05-13 15:47:42",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992940,
            "testName": "GSP_CommonURLS_US_India",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1173.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Common URLs'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n    \n    // Click on 'Add task(s)'\n\tmarkers.start(\"Common URLS\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"Common URLS\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992940"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992940"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992940"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992940"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992940"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992940"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:09:53",
            "modifiedDate": "2021-05-13 15:30:09",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992998,
            "testName": "GSP_CommonURLS_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Common URLs'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n    \n    // Click on 'Add task(s)'\n\tmarkers.start(\"Common URLS\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"Common URLS\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992998"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992998"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992998"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992998"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992998"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992998"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:44:20",
            "modifiedDate": "2021-05-13 15:31:07",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992946,
            "testName": "GSP_CommonURLS_US_Phoenix",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Common URLs'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n    \n    // Click on 'Add task(s)'\n\tmarkers.start(\"Common URLS\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"Common URLS\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992946"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992946"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992946"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992946"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992946"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992946"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:53:46",
            "modifiedDate": "2021-04-07 14:17:50",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992964,
            "testName": "GSP_CommonURLS_US_Sunrise",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const testSettings = test.getSettings();\n    await driver.get(testSettings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Common URLs'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n    \n    // Click on 'Add task(s)'\n\tmarkers.start(\"Common URLS\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"Common URLS\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992964"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992964"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992964"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992964"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992964"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992964"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:46:51",
            "modifiedDate": "2021-05-13 15:47:43",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992948,
            "testName": "GSP_CommunicationHistory_INTL",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 180,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript()\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText('Svc.gsp.te', By.id(`textboxuid_AD`));\n    \n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(credentials.get('GSPPassword'), By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`))\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n    //Select No Caller\n\tmarkers.start(\"Home Page\")\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\t\n\t//Click on Hub Menu\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Communication History'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n\tmarkers.start('Communication History')\n    // Click on 'Add task(s)'\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n    markers.stop('Communication History')\n   \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"] > [data-click=\".\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 932\n    });\n    await driver.manage().setTimeouts({\n        implicit:15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992948"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992948"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992948"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992948"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992948"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992948"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:54:29",
            "modifiedDate": "2021-04-07 14:17:49",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992965,
            "testName": "GSP_CommunicationHistory_US_HBS-Mexico",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-citrix-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript()\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`))\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n    //Select No Caller\n\tmarkers.start(\"Home Page\")\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\t\n\t//Click on Hub Menu\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Communication History'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n\tmarkers.start('Communication History')\n    // Click on 'Add task(s)'\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n    markers.stop('Communication History')\n   \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"] > [data-click=\".\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 932\n    });\n    await driver.manage().setTimeouts({\n        implicit:15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992965"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992965"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992965"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992965"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992965"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992965"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:49:16",
            "modifiedDate": "2021-05-13 15:47:42",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992954,
            "testName": "GSP_CommunicationHistory_US_India",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1173.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript()\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`))\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n    //Select No Caller\n\tmarkers.start(\"Home Page\")\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\t\n\t//Click on Hub Menu\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Communication History'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n\tmarkers.start('Communication History')\n    // Click on 'Add task(s)'\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n    markers.stop('Communication History')\n   \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"] > [data-click=\".\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 932\n    });\n    await driver.manage().setTimeouts({\n        implicit:15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992954"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992954"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992954"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992954"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992954"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992954"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:10:54",
            "modifiedDate": "2021-05-13 15:30:08",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1993000,
            "testName": "GSP_CommunicationHistory_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript()\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`))\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n    //Select No Caller\n\tmarkers.start(\"Home Page\")\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\t\n\t//Click on Hub Menu\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Communication History'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n\tmarkers.start('Communication History')\n    // Click on 'Add task(s)'\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n    markers.stop('Communication History')\n   \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"] > [data-click=\".\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 932\n    });\n    await driver.manage().setTimeouts({\n        implicit:15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1993000"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1993000"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1993000"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1993000"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1993000"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1993000"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:48:23",
            "modifiedDate": "2021-05-13 15:31:04",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992951,
            "testName": "GSP_CommunicationHistory_US_Phoenix",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript()\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`))\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n    //Select No Caller\n\tmarkers.start(\"Home Page\")\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\t\n\t//Click on Hub Menu\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Communication History'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n\tmarkers.start('Communication History')\n    // Click on 'Add task(s)'\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n    markers.stop('Communication History')\n   \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"] > [data-click=\".\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 932\n    });\n    await driver.manage().setTimeouts({\n        implicit:15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992951"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992951"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992951"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992951"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992951"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992951"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:55:46",
            "modifiedDate": "2021-04-07 14:17:50",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992968,
            "testName": "GSP_CommunicationHistory_US_Sunrise",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript()\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`))\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n    //Select No Caller\n\tmarkers.start(\"Home Page\")\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\t\n\t//Click on Hub Menu\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Communication History'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n\tmarkers.start('Communication History')\n    // Click on 'Add task(s)'\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n    markers.stop('Communication History')\n   \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"] > [data-click=\".\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 932\n    });\n    await driver.manage().setTimeouts({\n        implicit:15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992968"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992968"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992968"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992968"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992968"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992968"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:18:11",
            "modifiedDate": "2021-05-13 15:29:44",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1993007,
            "testName": "GSP_ContactInformation_INTL",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n    \n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText('Svc.gsp.te', By.id(`textboxuid_AD`));\n    \n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(credentials.get('GSPPassword'), By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n\n    await driver.sleep(5000)\n    markers.start(\"Home Page\")\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\")\n    \n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Contact Numbers'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n    markers.start(\"Contact Number\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n    markers.stop(\"Contact Number\")\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 932\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1993007"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1993007"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1993007"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1993007"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1993007"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1993007"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:21:01",
            "modifiedDate": "2021-05-13 15:30:08",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1993010,
            "testName": "GSP_ContactInformation_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n\n    await driver.sleep(5000)\n    markers.start(\"Home Page\")\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\")\n    \n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Contact Numbers'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n    markers.start(\"Contact Number\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n    markers.stop(\"Contact Number\")\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 932\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1993010"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1993010"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1993010"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1993010"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1993010"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1993010"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-24 18:39:37",
            "modifiedDate": "2021-09-24 18:39:40",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2274778,
            "testName": "GSP_CreateCLICCase_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n\n    await AccountValidation(\n        {\n            pin: credentials.get('GSP_Platinum_CID')\n        }\n    )\n\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await CreateCase();\n\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n    async function attemptToClick() {\n        await driver.findElement(selector)\n            .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n        .findElement(optionSelector)\n        .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n\n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods) {\n    try {\n        if (methods.pin) {\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function CreateCase() {\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    await click(By.id(`CPMTaskSearchInput`));\n\n    await typeText('CREATE CLIC CASE', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    // Click on 'CFR HUB'\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    // Click on 'true'\n    await click(By.css(`#\\\\$PAvailableCaseTypes\\\\$ppxResults\\\\$l1 #\\\\$PAvailableCaseTypes\\\\$ppxResults\\\\$l\\\\$ppySelected`));\n\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-dblclick=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n    await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2274778"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2274778"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2274778"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2274778"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2274778"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2274778"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-10 18:27:48",
            "modifiedDate": "2021-09-10 18:38:28",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2254722,
            "testName": "GSP_CreditFraudNotes_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n\n    await AccountValidation(\n        {\n        pin: credentials.get('GSP_Platinum_CID')\n        }\n    )\n\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await CreditFraudNotes();\n\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function CreditFraudNotes (){\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Credit/Fraud Notes', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start(\"Credit Fraud Notes\");\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\t\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    markers.stop(\"Credit Fraud Notes\");\n\n    // Click on 'Customer History Notes'\n\tawait click(By.css(`.header-title`));\n\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\n\n\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2254722"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2254722"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2254722"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2254722"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2254722"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2254722"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-03 18:24:56",
            "modifiedDate": "2021-09-07 13:31:45",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2242786,
            "testName": "GSP_CreditFraudNotes_US_Sunrise",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n\n    await AccountValidation(\n        {\n        pin: credentials.get('GSP_Platinum_CID')\n        }\n    )\n\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await CreditFraudNotes();\n\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function CreditFraudNotes (){\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n    \n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Credit/Fraud Notes', By.id(`CPMTaskSearchInput`));\n    \n    markers.start(\"Credit Fraud Notes\");\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\t\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    markers.stop(\"Credit Fraud Notes\");\n\n    // Click on 'Customer History Notes'\n\tawait click(By.css(`.header-title`));\n\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\n\n\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2242786"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2242786"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2242786"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2242786"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2242786"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2242786"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-30 17:42:43",
            "modifiedDate": "2022-04-19 18:33:37",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2033469,
            "testName": "GSP_CustomerDetails_INTL",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await LogIn({\n        username:'Svc.gsp.te',\n        password: credentials.get('GSPPassword')\n    });    \n \n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    await ContactInformation();\n    await CustomerInformation();\n    await PrivacyInformation();\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1920, \n        height: 1080\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function ContactInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n        // Click on 'Contact Numbers'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(3) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Contact Number\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n        markers.stop(\"Contact Number\")\n\n         // Click on 'Use the fields below to add/edit a ...'\n\t    await click(By.css(`.content-paragraph:nth-child(1) > .content-inner`));\n\n    } catch(error){\n        markers.set(\"Contact Information Error\")\n    }\n}\n\nasync function CustomerInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n        // Click on 'Customer Information'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Customer Information\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n        markers.stop(\"Customer Information\")\n\n        // Click on 'Legal Name LAURA TEST SZERER'\n        await click(By.css(`.layout-content-inline`)); \n    } catch(error){\n        markers.set(\"Customer Information Error\")\n    }\n}\n\nasync function PrivacyInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n            \n        // Click on 'Privacy'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n        \n        // Click on 'Add task(s)'\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n        \n        await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n        \n        // Click on 'Submit'\n\t    await click(By.id(`submitTD`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n    } catch (error){\n        markers.set(\"Privacy Information Error\")\n    }\n}\n\nasync function LogIn({username, password}) {\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText(username, By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(password, By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Contact Information\n- Customer Information\n- Privacy Information",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2033469"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2033469"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2033469"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2033469"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2033469"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2033469"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-14 15:56:40",
            "modifiedDate": "2021-07-19 17:09:31",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2053908,
            "testName": "GSP_CustomerDetails_US_HBS_Mexico",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ipc-ssp-citrix-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    await ContactInformation();\n    await CustomerInformation();\n    await PrivacyInformation();\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1920, \n        height: 1080\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function ContactInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n        // Click on 'Contact Numbers'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(3) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Contact Number\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n        markers.stop(\"Contact Number\")\n\n         // Click on 'Use the fields below to add/edit a ...'\n\t    await click(By.css(`.content-paragraph:nth-child(1) > .content-inner`));\n\n    } catch(error){\n        markers.set(\"Contact Information Error\")\n    }\n}\n\nasync function CustomerInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n        // Click on 'Customer Information'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Customer Information\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n        markers.stop(\"Customer Information\")\n\n        // Click on 'Legal Name LAURA TEST SZERER'\n        await click(By.css(`.layout-content-inline`)); \n    } catch(error){\n        markers.set(\"Customer Information Error\")\n    }\n}\n\nasync function PrivacyInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n            \n        // Click on 'Privacy'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n        \n        // Click on 'Add task(s)'\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n        \n        await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n        \n        // Click on 'Submit'\n\t    await click(By.id(`submitTD`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n    } catch (error){\n        markers.set(\"Privacy Information Error\")\n    }\n}\n\nasync function LogIn({username, password}) {\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText(username, By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(password, By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Contact Information\n- Customer Information\n- Privacy Information",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2053908"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2053908"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2053908"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2053908"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2053908"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2053908"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-14 15:59:14",
            "modifiedDate": "2021-07-19 17:09:33",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2053913,
            "testName": "GSP_CustomerDetails_US_India",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1173.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    const settings = test.getSettings()\r\n    await driver.get(settings.url);\r\n\r\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\r\n\r\n    markers.start(\"Home Page\")\r\n    await AccountValidation({\r\n        pin: credentials.get('GSP_Platinum_CID')\r\n    })\r\n    markers.stop(\"Home Page\")\r\n\r\n    await ContactInformation();\r\n    await CustomerInformation();\r\n    await PrivacyInformation();\r\n    await Exit();\r\n    \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().window().setRect({ \r\n        width: 1920, \r\n        height: 1080\r\n    });\r\n    await driver.manage().setTimeouts({\r\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n    await simulateHumanDelay();\r\n    await driver.findElement(selectSelector)\r\n                .findElement(optionSelector)\r\n                .click();\r\n}\r\n\r\nasync function ContactInformation() {\r\n    try {\r\n        // Click on 'Hub Menu'\r\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\r\n\r\n        // Click on 'Contact Numbers'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(3) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Contact Number\")\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n        await driver.switchTo().defaultContent()\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\r\n        markers.stop(\"Contact Number\")\r\n\r\n         // Click on 'Use the fields below to add/edit a ...'\r\n\t    await click(By.css(`.content-paragraph:nth-child(1) > .content-inner`));\r\n\r\n    } catch(error){\r\n        markers.set(\"Contact Information Error\")\r\n    }\r\n}\r\n\r\nasync function CustomerInformation() {\r\n    try {\r\n        // Click on 'Hub Menu'\r\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\r\n\r\n        // Click on 'Customer Information'\r\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Customer Information\")\r\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n        \r\n        await driver.switchTo().defaultContent()\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\r\n        markers.stop(\"Customer Information\")\r\n\r\n        // Click on 'Legal Name LAURA TEST SZERER'\r\n        await click(By.css(`.layout-content-inline`)); \r\n    } catch(error){\r\n        markers.set(\"Customer Information Error\")\r\n    }\r\n}\r\n\r\nasync function PrivacyInformation() {\r\n    try {\r\n        // Click on 'Hub Menu'\r\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\r\n            \r\n        // Click on 'Privacy'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n        \r\n        // Click on 'Add task(s)'\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n        \r\n        await driver.switchTo().defaultContent()\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\r\n        \r\n        await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\r\n        \r\n        // Click on 'Submit'\r\n\t    await click(By.id(`submitTD`));\r\n        \r\n        await driver.switchTo().defaultContent()\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\r\n    } catch (error){\r\n        markers.set(\"Privacy Information Error\")\r\n    }\r\n}\r\n\r\nasync function LogIn({username, password}) {\r\n    //Username\r\n    await click(By.id(`textboxuid_AD`));\r\n    await typeText(username, By.id(`textboxuid_AD`));\r\n\r\n    //Password\r\n    await click(By.id(`textboxpwd_AD`));\r\n    await typeText(password, By.id(`textboxpwd_AD`));\r\n\r\n    // Click on 'LOG IN'\r\n    markers.start(\"Sign In\")\r\n    await click(By.id(`Login`));\r\n    markers.stop(\"Sign In\")\r\n}\r\n\r\nasync function AccountSearch(accountNumber) {\r\n    // Click on 'New +'\r\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\r\n\r\n    // Click on 'Account Search'\r\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\r\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\r\n    \r\n    await click(By.id(`AccountNumber`));\r\n    await typeText(accountNumber, By.id(`AccountNumber`));\r\n    \r\n    markers.start('Account Search')\r\n    await click(By.css(`.field-item > img`));\r\n    markers.stop('Account Search')\r\n}\r\n\r\nasync function AccountValidation(methods){\r\n    if (methods.pin){\r\n        //Pin Validation\r\n        await typeText(methods.pin, By.id(`Answer`));\r\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\r\n\r\n    } else if (methods.noCaller) {\r\n        //Select No Caller\r\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\r\n    }\r\n\r\n}\r\n\r\nasync function Exit() {\r\n    // Click on 'Finished with Account'\r\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\r\n    \r\n    await driver.switchTo().defaultContent()\r\n\r\n    // Click on 'svc.gsp.te'\r\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\r\n\r\n    // Click on 'Logout'\r\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Contact Information\n- Customer Information\n- Privacy Information",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2053913"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2053913"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2053913"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2053913"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2053913"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2053913"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-14 15:58:39",
            "modifiedDate": "2021-07-19 17:09:33",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2053912,
            "testName": "GSP_CustomerDetails_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    await ContactInformation();\n    await CustomerInformation();\n    await PrivacyInformation();\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1920, \n        height: 1080\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function ContactInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n        // Click on 'Contact Numbers'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(3) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Contact Number\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n        markers.stop(\"Contact Number\")\n\n         // Click on 'Use the fields below to add/edit a ...'\n\t    await click(By.css(`.content-paragraph:nth-child(1) > .content-inner`));\n\n    } catch(error){\n        markers.set(\"Contact Information Error\")\n    }\n}\n\nasync function CustomerInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n        // Click on 'Customer Information'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Customer Information\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n        markers.stop(\"Customer Information\")\n\n        // Click on 'Legal Name LAURA TEST SZERER'\n        await click(By.css(`.layout-content-inline`)); \n    } catch(error){\n        markers.set(\"Customer Information Error\")\n    }\n}\n\nasync function PrivacyInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n            \n        // Click on 'Privacy'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n        \n        // Click on 'Add task(s)'\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n        \n        await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n        \n        // Click on 'Submit'\n\t    await click(By.id(`submitTD`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n    } catch (error){\n        markers.set(\"Privacy Information Error\")\n    }\n}\n\nasync function LogIn({username, password}) {\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText(username, By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(password, By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Contact Information\n- Customer Information\n- Privacy Information",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2053912"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2053912"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2053912"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2053912"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2053912"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2053912"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-14 15:55:37",
            "modifiedDate": "2021-07-19 17:09:35",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2053906,
            "testName": "GSP_CustomerDetails_US_Phoenix",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ipc-ssp-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    await ContactInformation();\n    await CustomerInformation();\n    await PrivacyInformation();\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1920, \n        height: 1080\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function ContactInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n        // Click on 'Contact Numbers'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(3) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Contact Number\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n        markers.stop(\"Contact Number\")\n\n         // Click on 'Use the fields below to add/edit a ...'\n\t    await click(By.css(`.content-paragraph:nth-child(1) > .content-inner`));\n\n    } catch(error){\n        markers.set(\"Contact Information Error\")\n    }\n}\n\nasync function CustomerInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n        // Click on 'Customer Information'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Customer Information\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n        markers.stop(\"Customer Information\")\n\n        // Click on 'Legal Name LAURA TEST SZERER'\n        await click(By.css(`.layout-content-inline`)); \n    } catch(error){\n        markers.set(\"Customer Information Error\")\n    }\n}\n\nasync function PrivacyInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n            \n        // Click on 'Privacy'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n        \n        // Click on 'Add task(s)'\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n        \n        await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n        \n        // Click on 'Submit'\n\t    await click(By.id(`submitTD`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n    } catch (error){\n        markers.set(\"Privacy Information Error\")\n    }\n}\n\nasync function LogIn({username, password}) {\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText(username, By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(password, By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Contact Information\n- Customer Information\n- Privacy Information",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2053906"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2053906"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2053906"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2053906"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2053906"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2053906"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-14 15:54:13",
            "modifiedDate": "2021-07-19 17:09:47",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2053903,
            "testName": "GSP_CustomerDetails_US_Sunrise",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    await ContactInformation();\n    await CustomerInformation();\n    await PrivacyInformation();\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1920, \n        height: 1080\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function ContactInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n        // Click on 'Contact Numbers'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(3) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Contact Number\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n        markers.stop(\"Contact Number\")\n\n         // Click on 'Use the fields below to add/edit a ...'\n\t    await click(By.css(`.content-paragraph:nth-child(1) > .content-inner`));\n\n    } catch(error){\n        markers.set(\"Contact Information Error\")\n    }\n}\n\nasync function CustomerInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n        // Click on 'Customer Information'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Customer Information\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n        markers.stop(\"Customer Information\")\n\n        // Click on 'Legal Name LAURA TEST SZERER'\n        await click(By.css(`.layout-content-inline`)); \n    } catch(error){\n        markers.set(\"Customer Information Error\")\n    }\n}\n\nasync function PrivacyInformation() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n            \n        // Click on 'Privacy'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n        \n        // Click on 'Add task(s)'\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n        \n        await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n        \n        // Click on 'Submit'\n\t    await click(By.id(`submitTD`));\n        \n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n    } catch (error){\n        markers.set(\"Privacy Information Error\")\n    }\n}\n\nasync function LogIn({username, password}) {\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText(username, By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(password, By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Contact Information\n- Customer Information\n- Privacy Information",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2053903"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2053903"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2053903"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2053903"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2053903"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2053903"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:25:36",
            "modifiedDate": "2021-05-13 15:29:45",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1993021,
            "testName": "GSP_CustomerInformation_INTL",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n    \n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText('Svc.gsp.te', By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(credentials.get('GSPPassword'), By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n\n    await driver.sleep(5000)\n    markers.start(\"Home Page\")\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Customer Information'\n    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n    markers.start(\"Customer Information\")\n    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n    markers.stop(\"Customer Information\")\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 932\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1993021"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1993021"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1993021"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1993021"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1993021"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1993021"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:24:12",
            "modifiedDate": "2021-05-13 15:30:08",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1993015,
            "testName": "GSP_CustomerInformation_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n\n    await driver.sleep(5000)\n    markers.start(\"Home Page\")\n    //Select No Calller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    markers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));;\n\n    // Click on 'Customer Information'\n    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n    markers.start(\"Customer Information\")\n    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n    markers.stop(\"Customer Information\")\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 932\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1993015"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1993015"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1993015"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1993015"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1993015"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1993015"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-15 18:17:17",
            "modifiedDate": "2021-10-15 18:17:22",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2327815,
            "testName": "GSP_CycleChange_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await CycleChange();\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n    async function attemptToClick() {\n        await driver.findElement(selector)\n            .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n        .findElement(optionSelector)\n        .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n\n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods) {\n    try {\n        if (methods.pin) {\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function CycleChange() {\n\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n  \n    await click(By.id(`CPMTaskSearchInput`));\n  \n    await typeText('Cycle Change', By.id(`CPMTaskSearchInput`));\n  \n  \n    markers.start('Cyclechange');\n  \n    // Click on 'Cycle Change'\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n  \n    await driver.switchTo().defaultContent();\n  \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)));\n  \n    await driver.sleep(650);\n  \n    // Click on 'Statement Closing'\n    await click(By.css(`.col-2:nth-child(1) > [data-hover=\"...\"]`));\n  \n    markers.stop('Cyclechange');\n  \n  \n  \n  }\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-dblclick=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n    await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2327815"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2327815"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2327815"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2327815"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2327815"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2327815"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-10 18:24:24",
            "modifiedDate": "2021-09-10 18:38:37",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2254712,
            "testName": "GSP_DigitalWallets_US ",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n\n    await AccountValidation(\n        {\n            pin: credentials.get('GSP_Platinum_CID')\n        }\n    )\n\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await DigitalWallet();\n\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n    async function attemptToClick() {\n        await driver.findElement(selector)\n            .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n        .findElement(optionSelector)\n        .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n\n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods) {\n    try {\n        if (methods.pin) {\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function DigitalWallet() {\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    await click(By.id(`CPMTaskSearchInput`));\n\n    await typeText('Digital Wallets', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n    \n    // Click on 'Digital Wallets'\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    // Click on 'Token History'\n    await click(By.css(`[name=\"DisplayWalletQuickNavButtons_D_DigitalWallets.CardList(1)_1\"] [data-click=\"....\"]`));\n\n    // Click on 'Close'\n    await click(By.css(`.dataValueWrite [data-click=\"....\"]`));\n\n    // Click on 'Express Checkout'\n    await click(By.css(`[data-test-id=\"201604142211090345217483\"]`));\n\n    // Click on 'Back'\n    await click(By.css(`[data-test-id=\"2016041422173308804403\"] [data-click=\"....\"]`));\n\n    // Click on 'Wallet Servicing'\n    await click(By.css(`[data-test-id=\"2016041422110509312665\"] [data-click=\"....\"]`));\n\n    // Click on 'Back'\n    await click(By.css(`[data-test-id=\"2016041422173308804403\"] [data-click=\"....\"]`));\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-dblclick=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n    await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2254712"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2254712"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2254712"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2254712"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2254712"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2254712"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-12 18:41:39",
            "modifiedDate": "2021-10-15 18:17:32",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2317708,
            "testName": "GSP_EmailUpdate_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await EmailUpdate();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function EmailUpdate() {\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n    \n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    \n    //Enter Demand Name\n    await typeText('Email Update', By.id(`CPMTaskSearchInput`));\n    \n    //Click on first dropdown selection\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n    \n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start('Email Update');\n\n    await driver.switchTo().defaultContent();\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)));\n\n    // Click on 'By providing your e-mail address, A...'\n\tawait click(By.css(`.custom_generaltext > .content-inner`));\n\n    markers.stop('Email Update');\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2317708"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2317708"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2317708"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2317708"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2317708"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2317708"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-10 18:12:07",
            "modifiedDate": "2021-09-10 18:12:14",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2254684,
            "testName": "GSP_EnrollmentServices_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n  const settings = test.getSettings();\n  await driver.get(settings.url);\n\n  await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n  markers.start(\"Home Page\");\n  await AccountValidation({\n    pin: credentials.get('GSP_Platinum_CID') });\n\n  markers.stop(\"Home Page\");\n\n  await EnrollmentServices();\n\n  await Exit();\n\n}\n\nasync function configureDriver() {\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  const element = await driver.findElement(selector);\n  await element.clear();\n  await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n  await simulateHumanDelay();\n  await driver.sleep(3000);\n  await driver.findElement(selectSelector).\n  findElement(optionSelector).\n  click();\n}\n\nasync function AccountSearch(accountNumber) {\n  try {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)));\n\n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n\n    markers.start('Account Search');\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search');\n  } catch {\n    markers.set(\"Account Search Error\");\n  }\n}\n\nasync function AccountValidation(methods) {\n  try {\n    if (methods.pin) {\n      //Pin Validation\n      await typeText(methods.pin, By.id(`Answer`));\n      await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n      //Select No Caller\n      await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n  } catch {\n    markers.set(\"Account Validation Error\");\n  }\n}\n\nasync function EnrollmentServices() {\n\n  // Click on 'Hub Menu'\n  await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n  // Search Box\n  await click(By.id(`CPMTaskSearchInput`));\n  //Enter Demand Name\n  await typeText('Enrollment Services', By.id(`CPMTaskSearchInput`));\n  //Click on first dropdown selection\n  await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n  \n  //Human Delay\n  await driver.sleep(650);\n\n  markers.start('Enroll');\n\n  await driver.switchTo().defaultContent();\n\n  await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)));\n\n  // Click on 'Enroll New Services'\n  await click(By.css(`.col-2:nth-child(1)`));\n\n  markers.stop('Enroll');\n\n}\n\nasync function Exit() {\n  // Click on 'Finished with Account'\n  await click(By.css(`[data-dblclick=\"....\"]`));\n\n  await driver.switchTo().defaultContent();\n\n  // Click on 'Username'\n  await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n  // Click on 'Logout'\n  await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2254684"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2254684"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2254684"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2254684"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2254684"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2254684"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-10 18:30:30",
            "modifiedDate": "2021-09-10 18:38:35",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2254727,
            "testName": "GSP_FinancialAdjustment_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await FinancialAdjustment();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function FinancialAdjustment(){\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Financial Adjustment', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start(\"Financial Adjustment\");\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\t\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    markers.stop(\"Financial Adjustment\");\n\n    // Click on 'Debit'\n\tawait click(By.id(`D_FinancialAdjustmentFinancialsCreditDebitDebit`));\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2254727"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2254727"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2254727"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2254727"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2254727"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2254727"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-28 15:53:19",
            "modifiedDate": "2021-09-28 16:05:29",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2278656,
            "testName": "GSP_FraudInquiryStatus_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n\n    await FraudInquiryStatus();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 20 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function switchToTab(index) {\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const attemptEndTime = Date.now() + configuredTimeouts.implicit;\n    while (Date.now() < attemptEndTime) {\n        const tabs = await driver.getAllWindowHandles()\n        if (tabs.length > index) {\n            await driver.switchTo().window(tabs[index])\n            return;\n        }\n        await driver.sleep(100);\n    }\n    throw new Error('Invalid Tab Index');\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function FraudInquiryStatus() {\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    \n    //Enter Demand Name\n    await typeText('Fraud Inquiry Status', By.id(`CPMTaskSearchInput`));\n    \n    markers.start('Fraud Inquiry Status');\n    //Click on first dropdown selection\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n    //Human Delay\n    await driver.sleep(650);\n    markers.stop('Fraud Inquiry Status');\n\n    // Switch to the pop up tab\n    await switchToTab(1);\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.css(`[name=\"FCIAGadgetIfr\"]`)))\n\n    //Click on 'Cancel'\n    await click(By.css(`[data-test-id=\"202001310925550870316570\"]`))\n\n    //Switch back to the portal tab\n    await switchToTab(0);\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2278656"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2278656"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2278656"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2278656"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2278656"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2278656"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-12 20:03:15",
            "modifiedDate": "2021-10-15 18:17:30",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2317934,
            "testName": "GSP_FutureUsage_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await FutureUsage();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function FutureUsage() {\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Future Usage', By.id(`CPMTaskSearchInput`));\n    //Click on first dropdown selection\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n    \n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start('Future Usage');\n\n    await driver.switchTo().defaultContent();\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)));\n\n    // Click on 'There is no recent declined attempt...'\n    await click(By.css(`.layout-content-mimic_a_sentence > .content-paragraph > .content-inner`));\n\n    markers.stop('Future Usage');\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2317934"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2317934"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2317934"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2317934"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2317934"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2317934"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-30 17:52:19",
            "modifiedDate": "2022-04-19 18:33:37",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2033487,
            "testName": "GSP_General_INTL",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 57,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await LogIn({\n        username:'Svc.gsp.te',\n        password: credentials.get('GSPPassword')\n    });\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await CommonUrls();\n    await CommuncationHistory();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function LogIn({username, password}) {\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText(username, By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(password, By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function CommonUrls() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Common URLs'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Common URLS\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n        markers.stop(\"Common URLS\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_CommURLS\\\\$pDeliveryMethod\\\\$gEmail\\\\$pDisplayURLList\\\\$l1 [data-test-id=\"20170511193249097351291\"]`));\n    \n    } catch(error){\n        markers.set(\"Common URLS Error\")\n    }\n}\n\nasync function CommuncationHistory() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Communication History'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Communication History\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n        markers.stop(\"Communication History\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_CommunicationHistory\\\\$pComHistoryDetailsList\\\\$l1 > [data-attribute-name=\"Date Processed\"] > .oflowDivM`));\n    \n    } catch(error){\n        markers.set(\"Communication History Error\")\n    }\n}\n\nasync function ContactHistory() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Contact History'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(7) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Contact History\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n        markers.stop(\"Contact History\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_ContactHistory_ViewHistory\\\\$pAccountGroup\\\\$l1 > [data-attribute-name=\"Activity\"] > .oflowDivM`));\n    } catch(error){\n        markers.set(\"Contact History Error\")\n    }\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Common URLS\n- Communication History",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2033487"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2033487"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2033487"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2033487"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2033487"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2033487"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-14 15:52:54",
            "modifiedDate": "2021-07-19 17:09:04",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2053899,
            "testName": "GSP_General_US_HBS_Mexico",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ipc-ssp-citrix-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 57,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await CommonUrls();\n    await CommuncationHistory();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function LogIn({username, password}) {\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText(username, By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(password, By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function CommonUrls() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Common URLs'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Common URLS\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n        markers.stop(\"Common URLS\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_CommURLS\\\\$pDeliveryMethod\\\\$gEmail\\\\$pDisplayURLList\\\\$l1 [data-test-id=\"20170511193249097351291\"]`));\n    \n    } catch(error){\n        markers.set(\"Common URLS Error\")\n    }\n}\n\nasync function CommuncationHistory() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Communication History'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Communication History\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n        markers.stop(\"Communication History\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_CommunicationHistory\\\\$pComHistoryDetailsList\\\\$l1 > [data-attribute-name=\"Date Processed\"] > .oflowDivM`));\n    \n    } catch(error){\n        markers.set(\"Communication History Error\")\n    }\n}\n\nasync function ContactHistory() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Contact History'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(7) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Contact History\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n        markers.stop(\"Contact History\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_ContactHistory_ViewHistory\\\\$pAccountGroup\\\\$l1 > [data-attribute-name=\"Activity\"] > .oflowDivM`));\n    } catch(error){\n        markers.set(\"Contact History Error\")\n    }\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Common URLS\n- Communication History",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2053899"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2053899"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2053899"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2053899"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2053899"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2053899"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-14 15:52:14",
            "modifiedDate": "2021-07-19 17:09:06",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2053895,
            "testName": "GSP_General_US_India",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1173.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 65,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    const settings = test.getSettings()\r\n    await driver.get(settings.url);\r\n\r\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\r\n\r\n    markers.start(\"Home Page\")\r\n    await AccountValidation({\r\n        pin: credentials.get('GSP_Platinum_CID')\r\n    })\r\n    markers.stop(\"Home Page\")\r\n\r\n    /**\r\n     * Insert your custom demands functions here\r\n     */\r\n    await CommonUrls();\r\n    await CommuncationHistory();\r\n\r\n    await Exit();\r\n    \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n    await simulateHumanDelay();\r\n    await driver.sleep(3000);\r\n    await driver.findElement(selectSelector)\r\n                .findElement(optionSelector)\r\n                .click();\r\n}\r\n\r\nasync function LogIn({username, password}) {\r\n    //Username\r\n    await click(By.id(`textboxuid_AD`));\r\n    await typeText(username, By.id(`textboxuid_AD`));\r\n\r\n    //Password\r\n    await click(By.id(`textboxpwd_AD`));\r\n    await typeText(password, By.id(`textboxpwd_AD`));\r\n\r\n    // Click on 'LOG IN'\r\n    markers.start(\"Sign In\")\r\n    await click(By.id(`Login`));\r\n    markers.stop(\"Sign In\")\r\n}\r\n\r\nasync function AccountSearch(accountNumber) {\r\n    // Click on 'New +'\r\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\r\n\r\n    // Click on 'Account Search'\r\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\r\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\r\n    \r\n    await click(By.id(`AccountNumber`));\r\n    await typeText(accountNumber, By.id(`AccountNumber`));\r\n    \r\n    markers.start('Account Search')\r\n    await click(By.css(`.field-item > img`));\r\n    markers.stop('Account Search')\r\n}\r\n\r\nasync function AccountValidation(methods){\r\n    if (methods.pin){\r\n        //Pin Validation\r\n        await typeText(methods.pin, By.id(`Answer`));\r\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\r\n\r\n    } else if (methods.noCaller) {\r\n        //Select No Caller\r\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\r\n    }\r\n\r\n}\r\n\r\nasync function Exit() {\r\n    // Click on 'Finished with Account'\r\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\r\n    \r\n    await driver.switchTo().defaultContent()\r\n\r\n    // Click on 'svc.gsp.te'\r\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\r\n\r\n    // Click on 'Logout'\r\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\r\n}\r\n\r\nasync function CommonUrls() {\r\n    try {\r\n        // Click on 'Hub Menu'\r\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Common URLs'\r\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Common URLS\")\r\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n\r\n        await driver.switchTo().defaultContent()\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\r\n        markers.stop(\"Common URLS\")\r\n\r\n        // Click on first row\r\n        await click(By.css(`#\\\\$PD_CommURLS\\\\$pDeliveryMethod\\\\$gEmail\\\\$pDisplayURLList\\\\$l1 [data-test-id=\"20170511193249097351291\"]`));\r\n    \r\n    } catch(error){\r\n        markers.set(\"Common URLS Error\")\r\n    }\r\n}\r\n\r\nasync function CommuncationHistory() {\r\n    try {\r\n        // Click on 'Hub Menu'\r\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Communication History'\r\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Communication History\")\r\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n\r\n        await driver.switchTo().defaultContent()\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\r\n        markers.stop(\"Communication History\")\r\n\r\n        // Click on first row\r\n        await click(By.css(`#\\\\$PD_CommunicationHistory\\\\$pComHistoryDetailsList\\\\$l1 > [data-attribute-name=\"Date Processed\"] > .oflowDivM`));\r\n    \r\n    } catch(error){\r\n        markers.set(\"Communication History Error\")\r\n    }\r\n}\r\n\r\nasync function ContactHistory() {\r\n    try {\r\n        // Click on 'Hub Menu'\r\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Contact History'\r\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(7) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Contact History\")\r\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n\r\n        await driver.switchTo().defaultContent()\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\r\n        markers.stop(\"Contact History\")\r\n\r\n        // Click on first row\r\n        await click(By.css(`#\\\\$PD_ContactHistory_ViewHistory\\\\$pAccountGroup\\\\$l1 > [data-attribute-name=\"Activity\"] > .oflowDivM`));\r\n    } catch(error){\r\n        markers.set(\"Contact History Error\")\r\n    }\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Common URLS\n- Communication History",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2053895"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2053895"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2053895"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2053895"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2053895"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2053895"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-14 15:51:33",
            "modifiedDate": "2021-07-19 17:09:27",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2053893,
            "testName": "GSP_General_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    const settings = test.getSettings()\r\n    await driver.get(settings.url);\r\n\r\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\r\n\r\n    markers.start(\"Home Page\")\r\n    await AccountValidation({\r\n        pin: credentials.get('GSP_Platinum_CID')\r\n    })\r\n    markers.stop(\"Home Page\")\r\n\r\n    /**\r\n     * Insert your custom demands functions here\r\n     */\r\n    await CommonUrls();\r\n    await CommuncationHistory();\r\n\r\n    await Exit();\r\n    \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n    await simulateHumanDelay();\r\n    await driver.sleep(3000);\r\n    await driver.findElement(selectSelector)\r\n                .findElement(optionSelector)\r\n                .click();\r\n}\r\n\r\nasync function LogIn({username, password}) {\r\n    //Username\r\n    await click(By.id(`textboxuid_AD`));\r\n    await typeText(username, By.id(`textboxuid_AD`));\r\n\r\n    //Password\r\n    await click(By.id(`textboxpwd_AD`));\r\n    await typeText(password, By.id(`textboxpwd_AD`));\r\n\r\n    // Click on 'LOG IN'\r\n    markers.start(\"Sign In\")\r\n    await click(By.id(`Login`));\r\n    markers.stop(\"Sign In\")\r\n}\r\n\r\nasync function AccountSearch(accountNumber) {\r\n    // Click on 'New +'\r\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\r\n\r\n    // Click on 'Account Search'\r\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\r\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\r\n    \r\n    await click(By.id(`AccountNumber`));\r\n    await typeText(accountNumber, By.id(`AccountNumber`));\r\n    \r\n    markers.start('Account Search')\r\n    await click(By.css(`.field-item > img`));\r\n    markers.stop('Account Search')\r\n}\r\n\r\nasync function AccountValidation(methods){\r\n    if (methods.pin){\r\n        //Pin Validation\r\n        await typeText(methods.pin, By.id(`Answer`));\r\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\r\n\r\n    } else if (methods.noCaller) {\r\n        //Select No Caller\r\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\r\n    }\r\n\r\n}\r\n\r\nasync function Exit() {\r\n    // Click on 'Finished with Account'\r\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\r\n    \r\n    await driver.switchTo().defaultContent()\r\n\r\n    // Click on 'svc.gsp.te'\r\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\r\n\r\n    // Click on 'Logout'\r\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\r\n}\r\n\r\nasync function CommonUrls() {\r\n    try {\r\n        // Click on 'Hub Menu'\r\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Common URLs'\r\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Common URLS\")\r\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n\r\n        await driver.switchTo().defaultContent()\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\r\n        markers.stop(\"Common URLS\")\r\n\r\n        // Click on first row\r\n        await click(By.css(`#\\\\$PD_CommURLS\\\\$pDeliveryMethod\\\\$gEmail\\\\$pDisplayURLList\\\\$l1 [data-test-id=\"20170511193249097351291\"]`));\r\n    \r\n    } catch(error){\r\n        markers.set(\"Common URLS Error\")\r\n    }\r\n}\r\n\r\nasync function CommuncationHistory() {\r\n    try {\r\n        // Click on 'Hub Menu'\r\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Communication History'\r\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Communication History\")\r\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n\r\n        await driver.switchTo().defaultContent()\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\r\n        markers.stop(\"Communication History\")\r\n\r\n        // Click on first row\r\n        await click(By.css(`#\\\\$PD_CommunicationHistory\\\\$pComHistoryDetailsList\\\\$l1 > [data-attribute-name=\"Date Processed\"] > .oflowDivM`));\r\n    \r\n    } catch(error){\r\n        markers.set(\"Communication History Error\")\r\n    }\r\n}\r\n\r\nasync function ContactHistory() {\r\n    try {\r\n        // Click on 'Hub Menu'\r\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Contact History'\r\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(7) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Contact History\")\r\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n\r\n        await driver.switchTo().defaultContent()\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\r\n        markers.stop(\"Contact History\")\r\n\r\n        // Click on first row\r\n        await click(By.css(`#\\\\$PD_ContactHistory_ViewHistory\\\\$pAccountGroup\\\\$l1 > [data-attribute-name=\"Activity\"] > .oflowDivM`));\r\n    } catch(error){\r\n        markers.set(\"Contact History Error\")\r\n    }\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Common URLS\n- Communication History",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2053893"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2053893"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2053893"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2053893"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2053893"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2053893"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-14 15:45:32",
            "modifiedDate": "2021-07-19 17:09:25",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2053879,
            "testName": "GSP_General_US_Phoenix",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ipc-ssp-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 57,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await CommonUrls();\n    await CommuncationHistory();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function LogIn({username, password}) {\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText(username, By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(password, By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function CommonUrls() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Common URLs'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Common URLS\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n        markers.stop(\"Common URLS\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_CommURLS\\\\$pDeliveryMethod\\\\$gEmail\\\\$pDisplayURLList\\\\$l1 [data-test-id=\"20170511193249097351291\"]`));\n    \n    } catch(error){\n        markers.set(\"Common URLS Error\")\n    }\n}\n\nasync function CommuncationHistory() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Communication History'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Communication History\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n        markers.stop(\"Communication History\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_CommunicationHistory\\\\$pComHistoryDetailsList\\\\$l1 > [data-attribute-name=\"Date Processed\"] > .oflowDivM`));\n    \n    } catch(error){\n        markers.set(\"Communication History Error\")\n    }\n}\n\nasync function ContactHistory() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Contact History'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(7) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Contact History\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n        markers.stop(\"Contact History\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_ContactHistory_ViewHistory\\\\$pAccountGroup\\\\$l1 > [data-attribute-name=\"Activity\"] > .oflowDivM`));\n    } catch(error){\n        markers.set(\"Contact History Error\")\n    }\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Common URLS\n- Communication History",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2053879"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2053879"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2053879"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2053879"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2053879"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2053879"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-14 15:48:57",
            "modifiedDate": "2021-07-19 17:09:13",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2053884,
            "testName": "GSP_General_US_Sunrise",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 57,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await CommonUrls();\n    await CommuncationHistory();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function LogIn({username, password}) {\n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText(username, By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(password, By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function CommonUrls() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Common URLs'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Common URLS\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n        markers.stop(\"Common URLS\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_CommURLS\\\\$pDeliveryMethod\\\\$gEmail\\\\$pDisplayURLList\\\\$l1 [data-test-id=\"20170511193249097351291\"]`));\n    \n    } catch(error){\n        markers.set(\"Common URLS Error\")\n    }\n}\n\nasync function CommuncationHistory() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Communication History'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Communication History\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n        markers.stop(\"Communication History\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_CommunicationHistory\\\\$pComHistoryDetailsList\\\\$l1 > [data-attribute-name=\"Date Processed\"] > .oflowDivM`));\n    \n    } catch(error){\n        markers.set(\"Communication History Error\")\n    }\n}\n\nasync function ContactHistory() {\n    try {\n        // Click on 'Hub Menu'\n        await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Contact History'\n        await click(By.css(`[name=\"BASE_REF\"]:nth-child(2) [name=\"BASE_REF\"]:nth-child(7) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Contact History\")\n        await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n        markers.stop(\"Contact History\")\n\n        // Click on first row\n        await click(By.css(`#\\\\$PD_ContactHistory_ViewHistory\\\\$pAccountGroup\\\\$l1 > [data-attribute-name=\"Activity\"] > .oflowDivM`));\n    } catch(error){\n        markers.set(\"Contact History Error\")\n    }\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Common URLS\n- Communication History",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2053884"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2053884"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2053884"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2053884"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2053884"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2053884"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-01 18:34:25",
            "modifiedDate": "2021-10-01 18:34:28",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2287241,
            "testName": "GSP_IncomeAsset_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await IncomeAssetCapture();\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n    async function attemptToClick() {\n        await driver.findElement(selector)\n            .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n        .findElement(optionSelector)\n        .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n\n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods) {\n    try {\n        if (methods.pin) {\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function IncomeAssetCapture() {\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('income / asset capture', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start(\"Income / Asset Capture\");\n    // Click on 'Income / Asset Capture'\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    markers.stop(\"Income / Asset Capture\");\n\n    // Click on 'Update with changes'\n    await click(By.css(`.col-3:nth-child(1) > [data-hover=\"...\"]`));\n\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-dblclick=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n    await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2287241"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2287241"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2287241"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2287241"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2287241"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2287241"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-18 16:09:58",
            "modifiedDate": "2021-10-18 16:10:02",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2332902,
            "testName": "GSP_LimitOnAdditional_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await LimitOnAdditionals();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function LimitOnAdditionals() {\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Limits On Additionals', By.id(`CPMTaskSearchInput`));\n    //Click on first dropdown selection\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n    \n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start('Limits On Additionals');\n\n    await driver.switchTo().defaultContent();\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)));\n\n    // Click on 'true'\n\tawait click(By.id(`pySelected1`));\n\n    markers.stop('Limits On Additionals');\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2332902"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2332902"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2332902"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2332902"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2332902"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2332902"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-27 15:23:47",
            "modifiedDate": "2021-09-30 16:35:10",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2276788,
            "testName": "GSP_MembershipFees_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await MembershipFees();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function MembershipFees() {\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Membership Fees', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start(\"Membership Fees\");\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    markers.stop(\"Membership Fees\");\n\n    // Click on 'LAURA T SZERER - Basic'\n\tawait click(By.css(`[data-attribute-name=\"Card Member Name - Type\"] > .oflowDivM`));\n\n    // Click on 'Bundled Additionals'\n\tawait click(By.css(`#Tab2 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n\n    // Click on 'Account is eligible. No active Bund...'\n\tawait click(By.css(`.content-paragraph:nth-child(2) > .content-inner`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2276788"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2276788"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2276788"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2276788"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2276788"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2276788"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-24 18:07:01",
            "modifiedDate": "2021-09-24 18:07:04",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2274687,
            "testName": "GSP_MerchantBlock_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    await MerchantBlock();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function MerchantBlock(){\n\n // Click on 'Hub Menu'\n await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n // Search Box\n await click(By.id(`CPMTaskSearchInput`));\n //Enter Demand Name\n await typeText('View/Rmv Merchant Block', By.id(`CPMTaskSearchInput`));\n\n //Human Delay\n await driver.sleep(650);\n\n markers.start(\"View/Rmv Merchant Block\");\n await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n \n await driver.switchTo().defaultContent()\n await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n markers.stop(\"View/Rmv Merchant Block\");\n\n // Click on 'The merchant block(s) displayed in ...'\n await click(By.css(`.layout-content-mimic_a_sentence > .content-paragraph:nth-child(2) > .content-inner`));\n\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2274687"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2274687"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2274687"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2274687"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2274687"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2274687"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-15 18:28:31",
            "modifiedDate": "2021-10-15 18:29:50",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2327852,
            "testName": "GSP_OrderStatement_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await OrderStatements();\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n    async function attemptToClick() {\n        await driver.findElement(selector)\n            .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n        .findElement(optionSelector)\n        .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n\n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods) {\n    try {\n        if (methods.pin) {\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function OrderStatements() {\n\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Order Statement', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start(\"Order Statements\");\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    // Click on 'Month'\n    await click(By.css(`tr:nth-child(1) > .strong_dataLabelRead`));\n\n    markers.stop(\"Order Statements\");\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n    await click(By.css(`[data-dblclick=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n    await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n    await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2327852"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2327852"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2327852"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2327852"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2327852"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2327852"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-15 18:33:08",
            "modifiedDate": "2022-02-09 15:33:38",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2327864,
            "testName": "GSP_PaperlessBilling_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    await PaperlessBilling();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function PaperlessBilling(){\n\n // Click on 'Hub Menu'\n await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n // Search Box\n await click(By.id(`CPMTaskSearchInput`));\n //Enter Demand Name\n await typeText('Paperless Billing', By.id(`CPMTaskSearchInput`));\n\n //Human Delay\n await driver.sleep(650);\n\n markers.start(\"Paperless Billing\");\n await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n \n await driver.switchTo().defaultContent()\n await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n markers.stop(\"Paperless Billing\");\n\n  // Click on 'Enroll For MYCA'\n  await click(By.css(`[data-test-id=\"201604142212370207109547\"]`));\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2327864"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2327864"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2327864"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2327864"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2327864"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2327864"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-16 18:10:03",
            "modifiedDate": "2022-04-19 18:33:22",
            "createdBy": "Deleted User",
            "modifiedBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2011832,
            "testName": "GSP_Payments_INTL",
            "type": "web-transactions",
            "interval": 1800,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers, test, credentials } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    const settings = test.getSettings()\r\n    await driver.get(settings.url);\r\n\r\n    await LogIn({\r\n        username:'Svc.gsp.te',\r\n        password: credentials.get('GSPPassword')\r\n    });\r\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\r\n\r\n    markers.start(\"Home Page\")\r\n    await AccountValidation({\r\n        pin: credentials.get('GSP_Platinum_CID')\r\n    })\r\n    markers.stop(\"Home Page\")\r\n\r\n    /**\r\n     * Insert your custom demands functions here\r\n     */\r\n    await PaymentMethods();\r\n    await PaymentHistory();\r\n    await LaunchMakePayment();\r\n\r\n    await Exit();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n    await simulateHumanDelay();\r\n    await driver.findElement(selectSelector)\r\n                .findElement(optionSelector)\r\n                .click();\r\n}\r\n\r\nasync function isErrorMessage(message) {\r\n    const errorMessageRegex = new RegExp('(help) | (desk) | (administrator)', 'gim')\r\n\r\n    if (errorMessageRegex.test(message)) {\r\n        throw new Error(\"Error message found. Test Failed\")\r\n    }\r\n}\r\n\r\nasync function LogIn({username, password}) {\r\n    //Username\r\n    await click(By.id(`textboxuid_AD`));\r\n    await typeText(username, By.id(`textboxuid_AD`));\r\n\r\n    //Password\r\n    await click(By.id(`textboxpwd_AD`));\r\n    await typeText(password, By.id(`textboxpwd_AD`));\r\n\r\n    // Click on 'LOG IN'\r\n    markers.start(\"Sign In\")\r\n    await click(By.id(`Login`));\r\n    markers.stop(\"Sign In\")\r\n}\r\n\r\nasync function AccountSearch(accountNumber) {\r\n    // Click on 'New +'\r\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\r\n\r\n    // Click on 'Account Search'\r\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\r\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\r\n    \r\n    await click(By.id(`AccountNumber`));\r\n    await typeText(accountNumber, By.id(`AccountNumber`));\r\n    \r\n    markers.start('Account Search')\r\n    await click(By.css(`.field-item > img`));\r\n    markers.stop('Account Search')\r\n}\r\n\r\nasync function AccountValidation(methods){\r\n    if (methods.pin){\r\n        //Pin Validation\r\n        await typeText(methods.pin, By.id(`Answer`));\r\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\r\n\r\n    } else if (methods.noCaller) {\r\n        //Select No Caller\r\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\r\n    }\r\n\r\n}\r\n\r\n\r\nasync function PaymentMethods() {\r\n    try {    \r\n        // -- Payment Methods --\r\n        // Click on 'Hub Menu'\r\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Payment Methods'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Payment Methods\")\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n\r\n        await driver.switchTo().defaultContent()\r\n        markers.stop(\"Payment Methods\")\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\r\n\r\n        // Click on 'Advise the Card Member that changes...'\r\n\t    const cardMemeberMessage = await driver.findElement(By.css(`.layout-content-wide_portal_icon_message > .content-paragraph > .content-inner`)).getText();\r\n        await isErrorMessage(cardMemeberMessage);\r\n    } catch (error){\r\n        markers.set(\"Payment Methods Error\")\r\n    }\r\n}\r\n\r\nasync function PaymentHistory() {\r\n    try {\r\n        //  -- Payment History --\r\n        // Click on 'Hub Menu'\r\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Payment History'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(3) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Payment History\")\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n        \r\n        await driver.switchTo().defaultContent()\r\n        markers.stop(\"Payment History\")\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\r\n\r\n        // Click on 'Reset Selection'\r\n\t    await click(By.name(`DisplayPaymentHistory_pyWorkPage_24`));\r\n\r\n\r\n    } catch(error){\r\n        markers.set(\"Payment History Error\")\r\n    }\r\n}\r\n\r\nasync function LaunchMakePayment() {\r\n    try {\r\n        // -- Make Payment --\r\n        // Click on 'Hub Menu'\r\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Make Payment'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(2) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Make Payment\")\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n        await driver.switchTo().defaultContent()\r\n        markers.stop(\"Make Payment\")\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\r\n\r\n        // Click on 'true'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(4) #\\\\$PpyWorkPage\\\\$pPaymentList\\\\$l1\\\\$pPaymentAmtOptionList\\\\$l\\\\$pSelectCard`));\r\n\r\n        // Enter Money Ammount\r\n        await click(By.id(`Amount`));\r\n        await typeText('0.01', By.id(`Amount`));\r\n\r\n        // Click on 'Do you wish to pay from your JPMORG...'\r\n\t    await click(By.css(`.layout-content-inline_grid_double`));\r\n\r\n        // Click on 'Proceed'\r\n\t    await click(By.css(`[data-test-id=\"20150812154308088545164\"] [data-click=\"....\"]`));\r\n    } catch(error){\r\n        markers.set(\"Launch Make Payment Error\")\r\n    }\r\n}\r\n\r\n\r\nasync function Exit() {\r\n    // Click on 'Finished with Account'\r\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\r\n    await driver.switchTo().defaultContent()\r\n\r\n    // Click on 'svc.gsp.te'\r\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\r\n\r\n    // Click on 'Logout'\r\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Payment Methods\n- Payment History\n- Launch Make a Payment",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2011832"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2011832"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2011832"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2011832"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2011832"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2011832"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-05 20:58:22",
            "modifiedDate": "2021-09-30 16:45:56",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2039539,
            "testName": "GSP_Payments_US_HBS_Mexico",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ipc-ssp-citrix-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, markers, test, credentials } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await PaymentMethods();\n    await PaymentHistory();\n    await LaunchMakePayment();\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function isErrorMessage(message) {\n    const errorMessageRegex = new RegExp('(help) | (desk) | (administrator)', 'gim')\n\n    if (errorMessageRegex.test(message)) {\n        throw new Error(\"Error message found. Test Failed\")\n    }\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\n\nasync function PaymentMethods() {\n    try {    \n        // -- Payment Methods --\n        // Click on 'Hub Menu'\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Payment Methods'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(5) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Payment Methods\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        markers.stop(\"Payment Methods\")\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n        // Click on 'Advise the Card Member that changes...'\n\t    const cardMemeberMessage = await driver.findElement(By.css(`.layout-content-wide_portal_icon_message > .content-paragraph > .content-inner`)).getText();\n        await isErrorMessage(cardMemeberMessage);\n    } catch (error){\n        markers.set(\"Payment Methods Error\")\n    }\n}\n\nasync function PaymentHistory() {\n    try {\n        //  -- Payment History --\n        // Click on 'Hub Menu'\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Payment History'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(3) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Payment History\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        markers.stop(\"Payment History\")\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n\n        // Click on 'Reset Selection'\n\t    await click(By.name(`DisplayPaymentHistory_pyWorkPage_24`));\n\n\n    } catch(error){\n        markers.set(\"Payment History Error\")\n    }\n}\n\nasync function LaunchMakePayment() {\n    try {\n        // -- Make Payment --\n        // Click on 'Hub Menu'\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Make Payment'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(2) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Make Payment\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        await driver.switchTo().defaultContent()\n        markers.stop(\"Make Payment\")\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n\n        // Click on 'true'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(4) #\\\\$PpyWorkPage\\\\$pPaymentList\\\\$l1\\\\$pPaymentAmtOptionList\\\\$l\\\\$pSelectCard`));\n\n        // Enter Money Ammount\n        await click(By.id(`Amount`));\n        await typeText('0.01', By.id(`Amount`));\n\n        // Click on 'Do you wish to pay from your JPMORG...'\n\t    await click(By.css(`.layout-content-inline_grid_double`));\n\n        // Click on 'Proceed'\n\t    await click(By.css(`[data-test-id=\"20150812154308088545164\"] [data-click=\"....\"]`));\n    } catch(error){\n        markers.set(\"Launch Make Payment Error\")\n    }\n}\n\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Payment Methods\n- Payment History\n- Launch Make a Payment",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2039539"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2039539"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2039539"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2039539"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2039539"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2039539"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-05 21:03:25",
            "modifiedDate": "2021-10-05 20:06:14",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2039545,
            "testName": "GSP_Payments_US_India",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1173.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 80,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, markers, test, credentials } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await PaymentMethods();\n    await PaymentHistory();\n    await LaunchMakePayment();\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function isErrorMessage(message) {\n    const errorMessageRegex = new RegExp('(help) | (desk) | (administrator)', 'gim')\n\n    if (errorMessageRegex.test(message)) {\n        throw new Error(\"Error message found. Test Failed\")\n    }\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\n\nasync function PaymentMethods() {\n    try {    \n        // -- Payment Methods --\n        // Click on 'Hub Menu'\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Payment Methods'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Payment Methods\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        markers.stop(\"Payment Methods\")\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n        // Click on 'Advise the Card Member that changes...'\n\t    const cardMemeberMessage = await driver.findElement(By.css(`.layout-content-wide_portal_icon_message > .content-paragraph > .content-inner`)).getText();\n        await isErrorMessage(cardMemeberMessage);\n    } catch (error){\n        markers.set(\"Payment Methods Error\")\n    }\n}\n\nasync function PaymentHistory() {\n    try {\n        //  -- Payment History --\n        // Click on 'Hub Menu'\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Payment History'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Payment History\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        markers.stop(\"Payment History\")\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n\n        // Click on 'Reset Selection'\n\t    await click(By.name(`DisplayPaymentHistory_pyWorkPage_24`));\n\n\n    } catch(error){\n        markers.set(\"Payment History Error\")\n    }\n}\n\nasync function LaunchMakePayment() {\n    try {\n        // -- Make Payment --\n        // Click on 'Hub Menu'\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Make Payment'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(2) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Make Payment\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        await driver.switchTo().defaultContent()\n        markers.stop(\"Make Payment\")\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n\n        // Click on 'true'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(4) #\\\\$PpyWorkPage\\\\$pPaymentList\\\\$l1\\\\$pPaymentAmtOptionList\\\\$l\\\\$pSelectCard`));\n\n        // Enter Money Ammount\n        await click(By.id(`Amount`));\n        await typeText('0.01', By.id(`Amount`));\n\n        // Click on 'Do you wish to pay from your JPMORG...'\n\t    await click(By.css(`.layout-content-inline_grid_double`));\n\n        // Click on 'Proceed'\n\t    await click(By.css(`[data-test-id=\"20150812154308088545164\"] [data-click=\"....\"]`));\n    } catch(error){\n        markers.set(\"Launch Make Payment Error\")\n    }\n}\n\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Payment Methods\n- Payment History\n- Launch Make a Payment",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2039545"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2039545"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2039545"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2039545"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2039545"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2039545"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-05 20:59:59",
            "modifiedDate": "2021-10-14 14:21:06",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2039542,
            "testName": "GSP_Payments_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 80,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, markers, test, credentials } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await PaymentMethods();\n    await PaymentHistory();\n    await LaunchMakePayment();\n\n    await Exit();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function isErrorMessage(message) {\n    const errorMessageRegex = new RegExp('(help) | (desk) | (administrator)', 'gim')\n\n    if (errorMessageRegex.test(message)) {\n        throw new Error(\"Error message found. Test Failed\")\n    }\n}\n\nasync function AccountSearch(accountNumber) {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    \n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n    \n    markers.start('Account Search')\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search')\n}\n\nasync function AccountValidation(methods){\n    if (methods.pin){\n        //Pin Validation\n        await typeText(methods.pin, By.id(`Answer`));\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n        //Select No Caller\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n\n}\n\n\nasync function PaymentMethods() {\n    try {    \n        // -- Payment Methods --\n        // Click on 'Hub Menu'\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Payment Methods'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Payment Methods\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\n        await driver.switchTo().defaultContent()\n        markers.stop(\"Payment Methods\")\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n        // Click on 'Advise the Card Member that changes...'\n\t    const cardMemeberMessage = await driver.findElement(By.css(`.layout-content-wide_portal_icon_message > .content-paragraph > .content-inner`)).getText();\n        await isErrorMessage(cardMemeberMessage);\n    } catch (error){\n        markers.set(\"Payment Methods Error\")\n    }\n}\n\nasync function PaymentHistory() {\n    try {\n        //  -- Payment History --\n        // Click on 'Hub Menu'\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Payment History'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Payment History\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        \n        await driver.switchTo().defaultContent()\n        markers.stop(\"Payment History\")\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\n\n        // Click on 'Reset Selection'\n\t    await click(By.name(`DisplayPaymentHistory_pyWorkPage_24`));\n\n\n    } catch(error){\n        markers.set(\"Payment History Error\")\n    }\n}\n\nasync function LaunchMakePayment() {\n    // try {\n        // -- Make Payment --\n        // Click on 'Hub Menu'\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n        // Click on 'Make Payment'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(2) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n        // Click on 'Add task(s)'\n        markers.start(\"Make Payment\")\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n        await driver.switchTo().defaultContent()\n        markers.stop(\"Make Payment\")\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\n\n        // Click on 'true'\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(4) #\\\\$PpyWorkPage\\\\$pPaymentList\\\\$l1\\\\$pPaymentAmtOptionList\\\\$l\\\\$pSelectCard`));\n\n        // Enter Money Ammount\n        await click(By.id(`Amount`));\n        await typeText('0.01', By.id(`Amount`));\n\n        // Click on 'Do you wish to pay from your JPMORG...'\n\t    await click(By.css(`.layout-content-inline_grid_double`));\n\n        // Click on 'Proceed'\n\t    await click(By.css(`[data-test-id=\"20150812154308088545164\"] [data-click=\"....\"]`));\n    // } catch(error){\n    //     markers.set(\"Launch Make Payment Error\")\n    // }\n}\n\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Payment Methods\n- Payment History\n- Launch Make a Payment",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2039542"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2039542"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2039542"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2039542"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2039542"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2039542"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-05 20:56:30",
            "modifiedDate": "2022-02-09 15:33:39",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2039534,
            "testName": "GSP_Payments_US_Phoenix",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ipc-ssp-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers, test, credentials } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    const settings = test.getSettings()\r\n    await driver.get(settings.url);\r\n\r\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\r\n\r\n    markers.start(\"Home Page\")\r\n    await AccountValidation({\r\n        pin: credentials.get('GSP_Platinum_CID')\r\n    })\r\n    markers.stop(\"Home Page\")\r\n\r\n    /**\r\n     * Insert your custom demands functions here\r\n     */\r\n    await PaymentMethods();\r\n    await PaymentHistory();\r\n    await LaunchMakePayment();\r\n\r\n    await Exit();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n    await simulateHumanDelay();\r\n    await driver.findElement(selectSelector)\r\n                .findElement(optionSelector)\r\n                .click();\r\n}\r\n\r\nasync function isErrorMessage(message) {\r\n    const errorMessageRegex = new RegExp('(help) | (desk) | (administrator)', 'gim')\r\n\r\n    if (errorMessageRegex.test(message)) {\r\n        throw new Error(\"Error message found. Test Failed\")\r\n    }\r\n}\r\n\r\nasync function AccountSearch(accountNumber) {\r\n    // Click on 'New +'\r\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\r\n\r\n    // Click on 'Account Search'\r\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\r\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\r\n    \r\n    await click(By.id(`AccountNumber`));\r\n    await typeText(accountNumber, By.id(`AccountNumber`));\r\n    \r\n    markers.start('Account Search')\r\n    await click(By.css(`.field-item > img`));\r\n    markers.stop('Account Search')\r\n}\r\n\r\nasync function AccountValidation(methods){\r\n    if (methods.pin){\r\n        //Pin Validation\r\n        await typeText(methods.pin, By.id(`Answer`));\r\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\r\n\r\n    } else if (methods.noCaller) {\r\n        //Select No Caller\r\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\r\n    }\r\n\r\n}\r\n\r\n\r\nasync function PaymentMethods() {\r\n    try {    \r\n        // -- Payment Methods --\r\n        // Click on 'Hub Menu'\r\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Payment Methods'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Payment Methods\")\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n\r\n        await driver.switchTo().defaultContent()\r\n        markers.stop(\"Payment Methods\")\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\r\n\r\n        // Click on 'Advise the Card Member that changes...'\r\n\t    const cardMemeberMessage = await driver.findElement(By.css(`.layout-content-wide_portal_icon_message > .content-paragraph > .content-inner`)).getText();\r\n        await isErrorMessage(cardMemeberMessage);\r\n    } catch (error){\r\n        markers.set(\"Payment Methods Error\")\r\n    }\r\n}\r\n\r\nasync function PaymentHistory() {\r\n    try {\r\n        //  -- Payment History --\r\n        // Click on 'Hub Menu'\r\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Payment History'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Payment History\")\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n        \r\n        await driver.switchTo().defaultContent()\r\n        markers.stop(\"Payment History\")\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\r\n\r\n        // Click on 'Reset Selection'\r\n\t    await click(By.name(`DisplayPaymentHistory_pyWorkPage_24`));\r\n\r\n\r\n    } catch(error){\r\n        markers.set(\"Payment History Error\")\r\n    }\r\n}\r\n\r\nasync function LaunchMakePayment() {\r\n    try {\r\n        // -- Make Payment --\r\n        // Click on 'Hub Menu'\r\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Make Payment'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(2) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Make Payment\")\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n        await driver.switchTo().defaultContent()\r\n        markers.stop(\"Make Payment\")\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\r\n\r\n        // Click on 'true'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(4) #\\\\$PpyWorkPage\\\\$pPaymentList\\\\$l1\\\\$pPaymentAmtOptionList\\\\$l\\\\$pSelectCard`));\r\n\r\n        // Enter Money Ammount\r\n        await click(By.id(`Amount`));\r\n        await typeText('0.01', By.id(`Amount`));\r\n\r\n        // Click on 'Do you wish to pay from your JPMORG...'\r\n\t    await click(By.css(`.layout-content-inline_grid_double`));\r\n\r\n        // Click on 'Proceed'\r\n\t    await click(By.css(`[data-test-id=\"20150812154308088545164\"] [data-click=\"....\"]`));\r\n    } catch(error){\r\n        markers.set(\"Launch Make Payment Error\")\r\n    }\r\n}\r\n\r\n\r\nasync function Exit() {\r\n    // Click on 'Finished with Account'\r\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\r\n    await driver.switchTo().defaultContent()\r\n\r\n    // Click on 'svc.gsp.te'\r\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\r\n\r\n    // Click on 'Logout'\r\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Payment Methods\n- Payment History\n- Launch Make a Payment",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2039534"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2039534"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2039534"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2039534"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2039534"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2039534"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-05-05 20:52:49",
            "modifiedDate": "2022-02-09 15:33:40",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2039528,
            "testName": "GSP_Payments_US_Sunrise",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers, test, credentials } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    const settings = test.getSettings()\r\n    await driver.get(settings.url);\r\n\r\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\r\n\r\n    markers.start(\"Home Page\")\r\n    await AccountValidation({\r\n        pin: credentials.get('GSP_Platinum_CID')\r\n    })\r\n    markers.stop(\"Home Page\")\r\n\r\n    /**\r\n     * Insert your custom demands functions here\r\n     */\r\n    await PaymentMethods();\r\n    await PaymentHistory();\r\n    await LaunchMakePayment();\r\n\r\n    await Exit();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n    await simulateHumanDelay();\r\n    await driver.findElement(selectSelector)\r\n                .findElement(optionSelector)\r\n                .click();\r\n}\r\n\r\nasync function isErrorMessage(message) {\r\n    const errorMessageRegex = new RegExp('(help) | (desk) | (administrator)', 'gim')\r\n\r\n    if (errorMessageRegex.test(message)) {\r\n        throw new Error(\"Error message found. Test Failed\")\r\n    }\r\n}\r\n\r\nasync function AccountSearch(accountNumber) {\r\n    // Click on 'New +'\r\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\r\n\r\n    // Click on 'Account Search'\r\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\r\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\r\n    \r\n    await click(By.id(`AccountNumber`));\r\n    await typeText(accountNumber, By.id(`AccountNumber`));\r\n    \r\n    markers.start('Account Search')\r\n    await click(By.css(`.field-item > img`));\r\n    markers.stop('Account Search')\r\n}\r\n\r\nasync function AccountValidation(methods){\r\n    if (methods.pin){\r\n        //Pin Validation\r\n        await typeText(methods.pin, By.id(`Answer`));\r\n\t    await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\r\n\r\n    } else if (methods.noCaller) {\r\n        //Select No Caller\r\n        await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\r\n    }\r\n\r\n}\r\n\r\n\r\nasync function PaymentMethods() {\r\n    try {    \r\n        // -- Payment Methods --\r\n        // Click on 'Hub Menu'\r\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Payment Methods'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(6) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Payment Methods\")\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n\r\n        await driver.switchTo().defaultContent()\r\n        markers.stop(\"Payment Methods\")\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\r\n\r\n        // Click on 'Advise the Card Member that changes...'\r\n\t    const cardMemeberMessage = await driver.findElement(By.css(`.layout-content-wide_portal_icon_message > .content-paragraph > .content-inner`)).getText();\r\n        await isErrorMessage(cardMemeberMessage);\r\n    } catch (error){\r\n        markers.set(\"Payment Methods Error\")\r\n    }\r\n}\r\n\r\nasync function PaymentHistory() {\r\n    try {\r\n        //  -- Payment History --\r\n        // Click on 'Hub Menu'\r\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Payment History'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Payment History\")\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n        \r\n        await driver.switchTo().defaultContent()\r\n        markers.stop(\"Payment History\")\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget2Ifr`)))\r\n\r\n        // Click on 'Reset Selection'\r\n\t    await click(By.name(`DisplayPaymentHistory_pyWorkPage_24`));\r\n\r\n\r\n    } catch(error){\r\n        markers.set(\"Payment History Error\")\r\n    }\r\n}\r\n\r\nasync function LaunchMakePayment() {\r\n    try {\r\n        // -- Make Payment --\r\n        // Click on 'Hub Menu'\r\n\t    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\r\n\r\n        // Click on 'Make Payment'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(9) [name=\"BASE_REF\"]:nth-child(2) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\r\n\r\n        // Click on 'Add task(s)'\r\n        markers.start(\"Make Payment\")\r\n\t    await click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\r\n        await driver.switchTo().defaultContent()\r\n        markers.stop(\"Make Payment\")\r\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget3Ifr`)))\r\n\r\n        // Click on 'true'\r\n\t    await click(By.css(`[name=\"BASE_REF\"]:nth-child(4) #\\\\$PpyWorkPage\\\\$pPaymentList\\\\$l1\\\\$pPaymentAmtOptionList\\\\$l\\\\$pSelectCard`));\r\n\r\n        // Enter Money Ammount\r\n        await click(By.id(`Amount`));\r\n        await typeText('0.01', By.id(`Amount`));\r\n\r\n        // Click on 'Do you wish to pay from your JPMORG...'\r\n\t    await click(By.css(`.layout-content-inline_grid_double`));\r\n\r\n        // Click on 'Proceed'\r\n\t    await click(By.css(`[data-test-id=\"20150812154308088545164\"] [data-click=\"....\"]`));\r\n    } catch(error){\r\n        markers.set(\"Launch Make Payment Error\")\r\n    }\r\n}\r\n\r\n\r\nasync function Exit() {\r\n    // Click on 'Finished with Account'\r\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\r\n    await driver.switchTo().defaultContent()\r\n\r\n    // Click on 'svc.gsp.te'\r\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\r\n\r\n    // Click on 'Logout'\r\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Demands:\n- Payment Methods\n- Payment History\n- Launch Make a Payment",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2039528"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2039528"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2039528"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2039528"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2039528"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2039528"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-27 14:37:47",
            "modifiedDate": "2021-09-30 16:35:28",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2276713,
            "testName": "GSP_PayOverTime_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await PayOverTime();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function PayOverTime() {\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Pay Over Time', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start(\"Pay Over Time\");\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    markers.stop(\"Pay Over Time\");\n\n    //Click on Table Item\n    await click(By.css(`[data-ctl=\"expCollIcon\"]`));\n\n    // Click on code \n\tawait click(By.css(`.item-2 > .content-inner > .field-item > [data-test-id=\"20180125005139051016111\"]`));\n\n    // Click on 'Settings'\n\tawait click(By.css(`#Tab2 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n\n    // Click on 'Update the Pay Over Time Setting be...'\n\tawait click(By.css(`[data-test-id=\"2018012621154508922251781\"]`));\n\n    // Click on 'History'\n\tawait click(By.css(`#Tab3 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2276713"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2276713"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2276713"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2276713"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2276713"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2276713"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-11 17:10:39",
            "modifiedDate": "2021-10-11 17:10:44",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2314567,
            "testName": "GSP_Privacy_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    await Privacy();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function Privacy(){\n\n // Click on 'Hub Menu'\n await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n // Search Box\n await click(By.id(`CPMTaskSearchInput`));\n //Enter Demand Name\n await typeText('Privacy', By.id(`CPMTaskSearchInput`));\n\n //Human Delay\n await driver.sleep(850);\n\n markers.start(\"Privacy\");\n await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n \n await driver.switchTo().defaultContent()\n await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n markers.stop(\"Privacy\");\n\n  // Click on 'Privacy'\nawait click(By.css(`#Tab1 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n\n // Click on 'Arbitration'\n await click(By.css(`#Tab2 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2314567"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2314567"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2314567"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2314567"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2314567"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2314567"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:03:51",
            "modifiedDate": "2021-05-13 15:31:05",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992987,
            "testName": "GSP_PrivacyInformation_INTL",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 180,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n    \n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText('Svc.gsp.te', By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(credentials.get('GSPPassword'), By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Privacy'\n    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));    \n    \n    // Click on 'Add task(s)'\n    markers.start(\"Privacy Information\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n    markers.stop(\"Privacy Information\")\n\n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n\n    // Click on 'Submit'\n\tawait click(By.id(`submitTD`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function switchToTab(index) {\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const attemptEndTime = Date.now() + configuredTimeouts.implicit;\n    while (Date.now() < attemptEndTime) {\n        const tabs = await driver.getAllWindowHandles()\n        if (tabs.length > index) {\n            await driver.switchTo().window(tabs[index])\n            return;\n        }\n        await driver.sleep(100);\n    }\n    throw new Error('Invalid Tab Index');\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992987"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992987"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992987"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992987"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992987"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992987"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:07:13",
            "modifiedDate": "2021-04-07 14:17:49",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992991,
            "testName": "GSP_PrivacyInformation_US_HBS-Mexico",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-citrix-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Privacy'\n    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));    \n    \n    // Click on 'Add task(s)'\n    markers.start(\"Privacy Information\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n    markers.stop(\"Privacy Information\")\n\n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n\n    // Click on 'Submit'\n\tawait click(By.id(`submitTD`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function switchToTab(index) {\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const attemptEndTime = Date.now() + configuredTimeouts.implicit;\n    while (Date.now() < attemptEndTime) {\n        const tabs = await driver.getAllWindowHandles()\n        if (tabs.length > index) {\n            await driver.switchTo().window(tabs[index])\n            return;\n        }\n        await driver.sleep(100);\n    }\n    throw new Error('Invalid Tab Index');\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992991"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992991"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992991"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992991"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992991"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992991"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:08:41",
            "modifiedDate": "2021-05-13 15:47:44",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992995,
            "testName": "GSP_PrivacyInformation_US_India",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1173.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Privacy'\n    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));    \n    \n    // Click on 'Add task(s)'\n    markers.start(\"Privacy Information\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n    markers.stop(\"Privacy Information\")\n\n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n\n    // Click on 'Submit'\n\tawait click(By.id(`submitTD`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function switchToTab(index) {\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const attemptEndTime = Date.now() + configuredTimeouts.implicit;\n    while (Date.now() < attemptEndTime) {\n        const tabs = await driver.getAllWindowHandles()\n        if (tabs.length > index) {\n            await driver.switchTo().window(tabs[index])\n            return;\n        }\n        await driver.sleep(100);\n    }\n    throw new Error('Invalid Tab Index');\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992995"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992995"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992995"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992995"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992995"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992995"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:09:39",
            "modifiedDate": "2021-05-13 15:30:07",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992997,
            "testName": "GSP_PrivacyInformation_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Privacy'\n    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));    \n    \n    // Click on 'Add task(s)'\n    markers.start(\"Privacy Information\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n    markers.stop(\"Privacy Information\")\n\n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n\n    // Click on 'Submit'\n\tawait click(By.id(`submitTD`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function switchToTab(index) {\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const attemptEndTime = Date.now() + configuredTimeouts.implicit;\n    while (Date.now() < attemptEndTime) {\n        const tabs = await driver.getAllWindowHandles()\n        if (tabs.length > index) {\n            await driver.switchTo().window(tabs[index])\n            return;\n        }\n        await driver.sleep(100);\n    }\n    throw new Error('Invalid Tab Index');\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992997"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992997"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992997"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992997"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992997"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992997"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:16:04",
            "modifiedDate": "2021-05-13 15:30:08",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1993005,
            "testName": "GSP_PrivacyInformation_US_Phoenix",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 180,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Privacy'\n    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));    \n    \n    // Click on 'Add task(s)'\n    markers.start(\"Privacy Information\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n    markers.stop(\"Privacy Information\")\n\n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n\n    // Click on 'Submit'\n\tawait click(By.id(`submitTD`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function switchToTab(index) {\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const attemptEndTime = Date.now() + configuredTimeouts.implicit;\n    while (Date.now() < attemptEndTime) {\n        const tabs = await driver.getAllWindowHandles()\n        if (tabs.length > index) {\n            await driver.switchTo().window(tabs[index])\n            return;\n        }\n        await driver.sleep(100);\n    }\n    throw new Error('Invalid Tab Index');\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1993005"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1993005"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1993005"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1993005"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1993005"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1993005"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-26 18:06:49",
            "modifiedDate": "2021-04-07 14:17:49",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1981198,
            "testName": "GSP_PrivacyInformation_US_Sunrise",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 180,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n    \n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\t\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'Privacy'\n    await click(By.css(`[name=\"BASE_REF\"]:nth-child(7) [name=\"BASE_REF\"]:nth-child(9) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));    \n    \n    // Click on 'Add task(s)'\n    markers.start(\"Privacy Information\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n    markers.stop(\"Privacy Information\")\n\n    await driver.switchTo().defaultContent()\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    await driver.switchTo().frame(driver.findElement(By.id(`targetFrame`)))\n\n    // Click on 'Submit'\n\tawait click(By.id(`submitTD`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n    \n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}\n\nasync function switchToTab(index) {\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const attemptEndTime = Date.now() + configuredTimeouts.implicit;\n    while (Date.now() < attemptEndTime) {\n        const tabs = await driver.getAllWindowHandles()\n        if (tabs.length > index) {\n            await driver.switchTo().window(tabs[index])\n            return;\n        }\n        await driver.sleep(100);\n    }\n    throw new Error('Invalid Tab Index');\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1981198"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1981198"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1981198"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1981198"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1981198"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1981198"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-17 19:35:44",
            "modifiedDate": "2021-09-17 19:36:16",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2265297,
            "testName": "GSP_PromotionSummary_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await PromotionSummary();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function PromotionSummary() {\n\n     // Click on 'Hub Menu'\n     await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n     // Search Box\n     await click(By.id(`CPMTaskSearchInput`));\n     //Enter Demand Name\n     await typeText('Promotion Summary', By.id(`CPMTaskSearchInput`));\n \n     //Human Delay\n     await driver.sleep(800);\n \n     markers.start(\"Promotion Summary\");\n     await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n     \n     await driver.switchTo().defaultContent()\n     await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n     markers.stop(\"Promotion Summary\");\n\n    \n    // Click on 'Promotion Type'\n\tawait click(By.css(`[data-test-id=\"20180126215631065718292-Label\"]`));\n    \n\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2265297"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2265297"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2265297"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2265297"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2265297"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2265297"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-24 18:21:45",
            "modifiedDate": "2021-09-24 18:21:59",
            "createdBy": "Deleted User",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2274708,
            "testName": "GSP_TermsChangeNotice_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n  const settings = test.getSettings();\n  await driver.get(settings.url);\n\n  await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n  markers.start(\"Home Page\");\n  await AccountValidation({\n    pin: credentials.get('GSP_Platinum_CID') });\n\n  markers.stop(\"Home Page\");\n\n  await TermsChangeNotice();\n\n  await Exit();\n\n}\n\nasync function configureDriver() {\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  const element = await driver.findElement(selector);\n  await element.clear();\n  await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n  await simulateHumanDelay();\n  await driver.sleep(3000);\n  await driver.findElement(selectSelector).\n  findElement(optionSelector).\n  click();\n}\n\nasync function AccountSearch(accountNumber) {\n  try {\n    // Click on 'New +'\n    await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n    await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)));\n\n    await click(By.id(`AccountNumber`));\n    await typeText(accountNumber, By.id(`AccountNumber`));\n\n    markers.start('Account Search');\n    await click(By.css(`.field-item > img`));\n    markers.stop('Account Search');\n  } catch {\n    markers.set(\"Account Search Error\");\n  }\n}\n\nasync function AccountValidation(methods) {\n  try {\n    if (methods.pin) {\n      //Pin Validation\n      await typeText(methods.pin, By.id(`Answer`));\n      await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n    } else if (methods.noCaller) {\n      //Select No Caller\n      await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n    }\n  } catch {\n    markers.set(\"Account Validation Error\");\n  }\n}\n\nasync function TermsChangeNotice() {\n\n  // Click on 'Hub Menu'\n  await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n  // Search Box\n  await click(By.id(`CPMTaskSearchInput`));\n\n  await typeText('Terms Change Notice', By.id(`CPMTaskSearchInput`));\n\n  //Human Delay\n  await driver.sleep(750);\n\n  //Click on first dropdown selection\n  await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\n  await driver.switchTo().defaultContent();\n\n  await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)));\n\n  // Click on 'Terms Change History'\n  await click(By.css(`#Tab2 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n\n  // Click on 'Pending Terms Changes'\n  await click(By.css(`#Tab1 > #TABANCHOR > #TABSPAN [data-stl=\"1\"]`));\n\n  await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n}\n\nasync function Exit() {\n  // Click on 'Finished with Account'\n  await click(By.css(`[data-dblclick=\"....\"]`));\n\n  await driver.switchTo().defaultContent();\n\n  // Click on 'Username'\n  await click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n  // Click on 'Logout'\n  await click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2274708"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2274708"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2274708"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2274708"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2274708"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2274708"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-10 18:33:06",
            "modifiedDate": "2021-09-10 18:38:34",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2254734,
            "testName": "GSP_Transactions_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await Transactions();\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\nasync function Transactions() {\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Transactions', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start(\"Transactions\");\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\t\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    markers.stop(\"Transactions\");\n\n    // Click on Billing Cycle\n    await selectOption(By.id(`BillingCycle`), By.css(`[value=\"1\"]`));\n\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2254734"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2254734"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2254734"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2254734"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2254734"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2254734"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-10 18:35:15",
            "modifiedDate": "2021-09-10 18:38:33",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2254742,
            "testName": "GSP_TravelNotification_US",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    /**\n     * Insert your custom demands functions here\n     */\n    await TravelNotification();\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function TravelNotification() {\n    // Click on 'Hub Menu'\n    await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Search Box\n    await click(By.id(`CPMTaskSearchInput`));\n    //Enter Demand Name\n    await typeText('Travel Notification', By.id(`CPMTaskSearchInput`));\n\n    //Human Delay\n    await driver.sleep(650);\n\n    markers.start(\"Travel Notification\");\n    await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n\t\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    markers.stop(\"Travel Notification\");\n\n    // Click on 'ATR'\n\tawait click(By.id(`AuthNotesTravelStatusAddorRemoveATR`));\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}\n\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2254742"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2254742"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2254742"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2254742"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2254742"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2254742"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:55:02",
            "modifiedDate": "2021-05-13 15:31:04",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992966,
            "testName": "GSP_ViewStatement_INTL",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://serviceportal.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 180,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver,test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n    \n    //Username\n    await click(By.id(`textboxuid_AD`));\n    await typeText('Svc.gsp.te', By.id(`textboxuid_AD`));\n\n    //Password\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(credentials.get('GSPPassword'), By.id(`textboxpwd_AD`));\n\n    // Click on 'LOG IN'\n    markers.start(\"Sign In\")\n    await click(By.id(`Login`));\n    markers.stop(\"Sign In\")\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'View Statement'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(11) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n\tmarkers.start(\"View Statement\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\t\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"View Statement\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992966"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992966"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992966"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992966"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992966"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992966"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:00:26",
            "modifiedDate": "2021-04-07 14:17:49",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Deleted User",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992981,
            "testName": "GSP_ViewStatement_US_HBS-Mexico",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-citrix-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver,test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'View Statement'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(11) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n\tmarkers.start(\"View Statement\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\t\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"View Statement\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992981"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992981"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992981"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992981"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992981"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992981"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:59:20",
            "modifiedDate": "2021-05-13 15:47:43",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992978,
            "testName": "GSP_ViewStatement_US_India",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1173.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver,test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'View Statement'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(11) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n\tmarkers.start(\"View Statement\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\t\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"View Statement\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992978"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992978"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992978"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992978"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992978"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992978"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:11:46",
            "modifiedDate": "2021-05-13 15:30:10",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1993001,
            "testName": "GSP_ViewStatement_US_Manila",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mrportal-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver,test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'View Statement'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(11) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n\tmarkers.start(\"View Statement\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\t\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"View Statement\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1993001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1993001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1993001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1993001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1993001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1993001"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 18:56:28",
            "modifiedDate": "2021-05-13 15:31:04",
            "createdBy": "Alejandro Alonso Garcia (Alejandro.AlonsoGarcia@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992973,
            "testName": "GSP_ViewStatement_US_Phoenix",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://ipc-ssp-ssl.ipc.us.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver,test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'View Statement'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(11) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n\tmarkers.start(\"View Statement\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\t\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"View Statement\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992973"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992973"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992973"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992973"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992973"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992973"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-04-02 19:01:20",
            "modifiedDate": "2021-04-08 15:18:02",
            "createdBy": "Anshu A Jain (Anshu.A.Jain@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1992982,
            "testName": "GSP_ViewStatement_US_Sunrise",
            "type": "web-transactions",
            "interval": 600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver,test, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    // Click on 'New +'\n\tawait click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n    // Click on 'Account Search'\n\tawait click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    await click(By.id(`AccountNumber`));\n    await typeText(credentials.get('GSP_AccountNo_US_BusinessGold'), By.id(`AccountNumber`));\n\tmarkers.start(\"Account Search\")\n    await click(By.css(`.field-item > img`));\n\tmarkers.stop(\"Account Search\")\n\n    await driver.sleep(5000)\n\t\n\tmarkers.start(\"Home Page\")\n    //Click No Caller\n    await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n\tmarkers.stop(\"Home Page\")\n\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n    // Click on 'View Statement'\n\tawait click(By.css(`[name=\"BASE_REF\"]:nth-child(11) [name=\"BASE_REF\"]:nth-child(4) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n\n    // Click on 'Add task(s)'\n\tmarkers.start(\"View Statement\")\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n\t\n    await driver.switchTo().defaultContent()\n\tmarkers.stop(\"View Statement\")\n\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n\n    //Close Task\n    await click(By.css(`[data-test-id=\"201604142221090985671\"]`));\n\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-test-id=\"FinishedWithAccount1\"] [data-click=\"....\"]`));\n\n    await driver.switchTo().defaultContent()\n\n    // Click on 'svc.gsp.te'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 1053\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1992982"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1992982"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1992982"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1992982"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1992982"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1992982"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-11-16 06:12:05",
            "modifiedDate": "2023-12-05 22:20:45",
            "createdBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4399402,
            "testName": "HITESH Cisco Syslogs sin-mbc-uc1-cucm-pub.sg.aexp.com Copy",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/CISCO%20CUCM/CISCO%20CUCM%20SysLogs",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 90,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n\r\n  await driver.takeScreenshot();\r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl44`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'sin-mbc-uc1-cucm-pub.sg.aexp.com')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Chrome/80.0.3987.163 Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4399402"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4399402"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4399402"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4399402"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4399402"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4399402"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-10-17 15:12:18",
            "modifiedDate": "2023-11-03 18:51:31",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Joyeeta Basak (joyeeta.basak@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4251105,
            "testName": "Hydra JA OneDrive_FileDownload_Browser",
            "type": "web-transactions",
            "interval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/ThousandEyes",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 51,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, transaction } from 'thousandeyes';\r\nrunScript();\r\nasync function runScript() {\r\n \r\n  await configureDriver();\r\n\r\n  // Page Load\r\n  markers.start('Page Load');\r\n\t\r\n  // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n   await driver.get('https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/ThousandEyes/Download');\r\n  var actualTitle = await driver.getTitle();\r\n  markers.stop('Page Load');\r\n  markers.start('Username');\r\n  await click(By.id(`i0116`));\r\n  // TODO: Replace your-email with your sharepoint login email\r\n  await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\t\t\t\t\t \r\n   await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n\r\n\tmarkers.start('OKTA Login');\r\n  await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n   await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id(`okta-signin-submit`));\r\n  markers.stop('OKTA Login');\r\n   markers.start('Documents');\r\n   await click(By.id('idBtn_Back'));\r\n   \r\n  await click(By.css(`[aria-label=\"IoyzPbORK1.txt\"] [data-icon-name=\"StatusCircleCheckmark\"]`));\r\n    markers.stop('Documents');\r\n    markers.start('Download');\r\n\r\n  await click(By.css(`[data-icon-name=\"download\"]`));\r\n  //await downloads.waitForDownload('IoyzPbORK1.pptx',1500000);\r\n  await downloads.waitForDownload('IoyzPbORK1.txt',500000);\r\n  markers.stop('Download');\r\n\tawait driver.takeScreenshot();\t\t  \r\n  // Logout\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fdrive.aexp.com%2Fpersonal%2Fvamsi_k_gadde_aexp_com%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n}; \r\n\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1572,\r\n    height: 1133\r\n  });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n} \r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector)\r\n              .sendKeys(value);\r\n} \r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n} \r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n      await driver.findElement(selector)\r\n                  .click().then(null, async function (err) {\r\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\r\n          await driver.findElement(selector)\r\n                      .click();\r\n      });\r\n  }\r\n} \r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n      return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n      return false; // Will throw an error if element is not connected to the document\r\n\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t \r\n  }\r\n} \r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n      try {\r\n          numberOfAttempts += 1;\r\n          await attemptActionFn();\r\n      }\r\n      catch (error) {\r\n          attemptError = error;\r\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n          continue; // Attempt failed, reattempt\r\n      }\r\n      attemptError = null;\r\n      break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n      throw attemptError;\r\n  }\r\n} \r\n\r\nasync function rightClick(selector) {\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n} \r\n \r\n\r\n\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\r\n \r\n\r\n\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   \r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t  \r\n \r\n",
            "desiredStatusCode": "403",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4251105"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4251105"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4251105"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4251105"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4251105"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4251105"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-09-28 18:08:48",
            "modifiedDate": "2023-11-08 04:09:09",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Joyeeta Basak (joyeeta.basak@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4183001,
            "testName": "Hydra JA Webex amex.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n    await driver.get(settings.url);\r\n    await authenticateToOKTA();\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n    await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n    //Locate iframe\r\n    let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n    if (intThinIFrames == 0) {\r\n      markers.stop('1- Clicking \"Start a Meeting\"');\r\n      markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n      markers.set('Taking thiniframes=0 ScreenShot');\r\n      await driver.takeScreenshot();\r\n      //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n      let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start\")]');\r\n      markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n      if (intStartMeetingPage > 0) {\r\n        markers.start('2: Clicking \"Start a Meeting\"');\r\n        await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n        await driver.takeScreenshot();\r\n        await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n        markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n      }\r\n    }\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try { markers.stop('1- Clicking \"Start\"'); } catch { };\r\n  try { markers.stop('2- Clicking \"Start\"'); } catch { };\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n    sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n      click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4183001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4183001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4183001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4183001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4183001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4183001"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-09-26 15:45:05",
            "modifiedDate": "2023-09-27 16:51:09",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4173753,
            "testName": "JA Hydra Avaya Syslogs BTN-RDCVCCMAETH0",
            "type": "web-transactions",
            "interval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/Avaya/Avaya%20SysLogs%20V3",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl04`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'BTN-RDCVCCMAETH0')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4173753"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4173753"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4173753"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4173753"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4173753"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4173753"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-09-27 16:53:24",
            "modifiedDate": "2023-10-10 16:24:43",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Joyeeta Basak (joyeeta.basak@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4178533,
            "testName": "JA Hydra Slack Login + Post Msg US/BTN",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 40,
            "targetTime": 25,
            "httpTimeLimit": 6,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "//modified on 10-8-21 removing http authentication settings and \r\n//uncommented the okta login lines.\r\nimport { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.sleep(5000);\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1920,\r\n    height: 1080 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login + Post Msg",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4178533"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4178533"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4178533"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4178533"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4178533"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4178533"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-11-22 20:50:18",
            "modifiedDate": "2023-11-30 16:30:47",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4423746,
            "testName": "JA testing 2 Webex amex.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n     // Load page\r\n\r\n  markers.start('SignOn');\r\n  await driver.get(settings.url);\r\n\r\n  // Click on 'Join a meeting Webex app  Whether y...'\r\n  await click(By.css(`.grid_g`));\r\n\r\n  // Click on 'Sign in'\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  await typeText(credentials.get('WebExSvcAcctUser2'), By.id(`IDToken1`));\r\n\r\n  // Click on 'Sign In'\r\n  await click(By.id(`IDButton2`));\r\n\r\n  await click(By.id(`okta-signin-username`));\r\n\r\n  await typeText(credentials.get('WebExSvcAcctUser2'), By.id(`okta-signin-username`));\r\n\r\n  await click(By.id(`okta-signin-password`));\r\n\r\n  await typeText(credentials.get('WebExSvcAcctPassword2'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'Sign In'\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n\r\n  await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n\r\n  await driver.takeScreenshot();\r\n\r\n  markers.stop('Connect to Personal Room');\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n    await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n    //Locate iframe\r\n    let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n    if (intThinIFrames == 0) {\r\n      markers.stop('1- Clicking \"Start a Meeting\"');\r\n      markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n      markers.set('Taking thiniframes=0 ScreenShot');\r\n      await driver.takeScreenshot();\r\n      //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n      let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start\")]');\r\n      markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n      if (intStartMeetingPage > 0) {\r\n        markers.start('2: Clicking \"Start a Meeting\"');\r\n        await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n        await driver.takeScreenshot();\r\n        await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n        markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n      }\r\n    }\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try { markers.stop('1- Clicking \"Start\"'); } catch { };\r\n  try { markers.stop('2- Clicking \"Start\"'); } catch { };\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n    sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n      click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4423746"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4423746"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4423746"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4423746"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4423746"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4423746"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-11-30 16:41:24",
            "modifiedDate": "2024-01-09 17:11:31",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 4452495,
            "testName": "JA testing 3  Webex amex.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n\r\n  markers.start('SignOn');\r\n  await driver.get(settings.url);\r\n\r\n  // Click on 'Join a meeting Webex app  Whether y...'\r\n  await click(By.css(`.grid_g`));\r\n\r\n  // Click on 'Sign in'\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  await typeText(credentials.get('WebExSvcAcctUser2'), By.id(`IDToken1`));\r\n\r\n  // Click on 'Sign In'\r\n  await click(By.id(`IDButton2`));\r\n\r\n  await click(By.id(`IDToken2`));\r\n\r\n  await typeText(credentials.get('WebExAvcAcctPassword2'), By.id(`IDToken2`));\r\n\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'Sign In'\r\n\r\n  markers.start('Click SignIn');\r\n  await click(By.id(`Button1`));\r\n  markers.stop('Click SignIn');\r\n\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n\r\n  await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n\r\n  await driver.takeScreenshot();\r\n\r\n  markers.stop('Connect to Personal Room');\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n  await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n  //Locate iframe\r\n  let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n  if (intThinIFrames == 0) {\r\n    markers.stop('1- Clicking \"Start a Meeting\"');\r\n    markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n    markers.set('Taking thiniframes=0 ScreenShot');\r\n    await driver.takeScreenshot();\r\n    //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n    let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start\")]');\r\n    markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n    if (intStartMeetingPage > 0) {\r\n      markers.start('2: Clicking \"Start a Meeting\"');\r\n      await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n      await driver.takeScreenshot();\r\n      await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n      markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n    }\r\n  }\r\n  // Load/join meeting\r\n  await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n  await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try {markers.stop('1- Clicking \"Start\"');} catch {};\r\n  try {markers.stop('2- Clicking \"Start\"');} catch {};\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA() {\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4452495"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4452495"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4452495"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4452495"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4452495"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4452495"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-11-21 15:07:50",
            "modifiedDate": "2023-11-22 22:27:06",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4418372,
            "testName": "JA testing Webex amex.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n\r\n  markers.start('SignOn');\r\n  await driver.get(settings.url);\r\n\r\n  // Click on 'Join a meeting Webex app  Whether y...'\r\n  await click(By.css(`.grid_g`));\r\n\r\n  // Click on 'Sign in'\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`IDToken1`));\r\n\r\n  // Click on 'Sign In'\r\n  await click(By.id(`IDButton2`));\r\n\r\n  await click(By.id(`okta-signin-username`));\r\n\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n\r\n  await click(By.id(`okta-signin-password`));\r\n\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'Sign In'\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n\r\n  await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n\r\n  await driver.takeScreenshot();\r\n\r\n  markers.stop('Connect to Personal Room');\r\n\r\n  markers.start('Start_a_Meeting');\r\n  // Click on 'Start'\r\n  await click(By.css(`#smartJoinButton > span`));\r\n\r\n  // Make driver sleep for 5 seconds\r\n  await driver.sleep(5000);\r\n\r\n  await driver.takeScreenshot();\r\n\r\n  markers.stop('Start_a_Meeting');\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4418372"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4418372"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4418372"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4418372"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4418372"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4418372"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-11-17 14:31:31",
            "modifiedDate": "2023-12-21 14:38:48",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 2405283,
            "testName": "MyInfo - Test GUR/SIN/SYD",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://egug.login.us2.oraclecloud.com/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 55,
            "targetTime": 20,
            "httpTimeLimit": 20,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  await driver.get(settings.url);\r\n\r\n  //Start Login\r\n  markers.start('MyInfo Login');\r\n\r\n  await typeText(credentials.get('MyInfo_ServiceAcccount'), By.id(`okta-signin-username`));\r\n\r\n  await typeText(credentials.get('MyInfo_svc_Password'), By.id(`okta-signin-password`));\r\n\r\n  await pressEnter(By.id(`okta-signin-password`));\r\n\r\n  //Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  //Stop Login\r\n  markers.stop('MyInfo Login');\r\n\r\n  //Start HomePage\r\n  markers.start('MyInfo HomePage');\r\n  // Click on 'You have a new home page!'\r\n  await click(By.css(`#pt1\\\\3A commandLink1`));\r\n\r\n  await click(By.css(`#pt1\\\\3A_UIScmil2u`));\r\n\r\n  //Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  //Stop HomePage\r\n  markers.stop('MyInfo HomePage');\r\n\r\n  markers.start('MyInfo Sign Out');\r\n  // Click on 'Sign Out'\r\n  await click(By.css(`#pt1\\\\3A_UISlg1`));\r\n  await driver.takeScreenshot();\r\n  // Click on 'Confirm'\r\n  //markers.stop('MyInfo Sign Out');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2405283"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2405283"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2405283"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2405283"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2405283"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2405283"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-07 20:29:47",
            "modifiedDate": "2023-02-14 18:35:41",
            "createdBy": "Shabeer Ummer (SHABEER.UMMER1@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 2305309,
            "testName": "MyInfo - Test PHX/GSO/BTN",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://egug.login.us2.oraclecloud.com/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 45,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n\r\n    const settings = test.getSettings();\r\n\r\n    // Load page\r\n    await driver.get(settings.url); \r\n    \r\n    //Start Login\r\n    markers.start('MyInfo Login');\r\n\r\n    await typeText(credentials.get('MyInfo_ServiceAcccount'), By.id(`okta-signin-username`));\r\n\r\n    await typeText(credentials.get('MyInfo_svc_Password'), By.id(`okta-signin-password`));\r\n\r\n    await pressEnter(By.id(`okta-signin-password`));\r\n    \r\n    //Take Snapshot\r\n    await driver.takeScreenshot();\r\n    \r\n    //Stop Login\r\n    markers.stop('MyInfo Login');\r\n\r\n     //Start HomePage\r\n    markers.start('MyInfo HomePage');\r\n    // Click on 'You have a new home page!'\r\n\tawait click(By.css(`#pt1\\\\3A commandLink1`));\r\n\r\n    await click(By.css(`#pt1\\\\3A_UIScmil2u`));\r\n\r\n    //Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n     //Stop HomePage\r\n    markers.stop('MyInfo HomePage');\r\n\r\n    markers.start('MyInfo Sign Out');\r\n    // Click on 'Sign Out'\r\n    await click(By.css(`#pt1\\\\3A_UISlg1`));\r\n    await driver.takeScreenshot();\r\n    // Click on 'Confirm'\r\n    //await click(By.id(`Confirm`));\r\n   // markers.stop('MyInfo Sign Out');\r\n    \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n    await driver.findElement(selector)\r\n                .sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2305309"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2305309"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2305309"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2305309"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2305309"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2305309"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-04-19 18:57:22",
            "modifiedDate": "2023-12-21 14:38:46",
            "createdBy": "Shabeer Ummer (SHABEER.UMMER1@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 2812459,
            "testName": "MyInfo Onboarding",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://onboard.americanexpress.com/ic/builder/rt/AmexOnboarding2/live/webApps/onbapp/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 75,
            "targetTime": 60,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "/*\r\nOnboarding test verifing Onbording site \r\nCreated by Shabeer Ummer & Jared Adams\r\nLast revised 8-22-22\r\n*/\r\nimport { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\n// variables\r\nconst strLoginInputID = 'idcs-signin-basic-signin-form-username';\r\nconst strPasswordLoginID = 'idcs-signin-basic-signin-form-password|input';\r\nconst strSignInButtonId = 'ui-id-4';\r\n\r\nconst strContinueButtonText = 'Continue';\r\nconst strRequisitionIdText = 'Requisition Number';\r\nconst strCancelButtonXPath = '//*[text()=\"Cancel\"]';\r\nconst strUsername = '000222222';\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    const settings = test.getSettings();\r\n\r\n    // Load page\r\n    await driver.get(settings.url); \r\n\r\n    //Start Login\r\n    markers.start('OIC_Onboarding Login');\r\n\r\n        //Click and Enter username\r\n        await click(By.id(strLoginInputID));\r\n        await typeText(strUsername, By.id(strLoginInputID));\r\n\r\n        // Click and Enter Password\r\n        await click(By.id(strPasswordLoginID));\r\n        await typeText(credentials.get('OIC_Onboarding'), By.id(strPasswordLoginID));\r\n\r\n        // Click on 'Sign In'\r\n        await click(By.id(strSignInButtonId));   \r\n\r\n        //Take Snapshot\r\n        await driver.takeScreenshot(); \r\n\r\n    markers.stop('OIC_Onboarding Login');  \r\n\r\n    markers.start('OIC_Onboarding Validation');\r\n\r\n        //Finding Continue\r\n        //await findExactTextOnPage(strContinueButtonText,true);\r\n\r\n        // Finding Requisition ID\r\n        await findExactTextOnPage(strRequisitionIdText,true);\r\n\r\n        // Take Screenshot\r\n        await driver.takeScreenshot();\r\n\r\n        // Click Cancel\r\n        //await click(By.xpath(strCancelButtonXPath));\r\n        //await driver.sleep(5000);\r\n        //await driver.takeScreenshot();\r\n\r\n    markers.stop('OIC_Onboarding Validation');  \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 60 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\n/**\r\n * @param {string} strTextToFind\r\n * @param {boolean} [boolLogResultAsMarker]\r\n */\r\nasync function findExactTextOnPage(strTextToFind, boolLogResultAsMarker) {\r\n    const strTextToFindXPath = `//*[text()=\"${strTextToFind}\"]`;\r\n    await driver.findElements(By.xpath(strTextToFindXPath)).then(found => assert(!!found.length,`findTextOnPage:: Cannot Find \"${strTextToFind}\"`));\r\n    if (typeof boolLogResultAsMarker != 'undefined'){\r\n            if (boolLogResultAsMarker){markers.set(`findExactTextOnPage:: Found: ${strTextToFind}`.replace(/\\./g, ` `))};\r\n    }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2812459"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2812459"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2812459"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2812459"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2812459"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2812459"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-30 06:58:55",
            "modifiedDate": "2023-10-11 06:10:28",
            "createdBy": "Vamsi Krishna Gadde (Vamsi.K.Gadde@aexp.com)",
            "modifiedBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1986201,
            "testName": "OneDrive_FileDownload_Browser",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/ThousandEyes",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 51,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, transaction } from 'thousandeyes';\r\nrunScript();\r\nasync function runScript() {\r\n \r\n  await configureDriver();\r\n\r\n  // Page Load\r\n  markers.start('Page Load');\r\n\t\r\n  // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n   await driver.get('https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/ThousandEyes/Download');\r\n  var actualTitle = await driver.getTitle();\r\n  markers.stop('Page Load');\r\n  markers.start('Username');\r\n  await click(By.id(`i0116`));\r\n  // TODO: Replace your-email with your sharepoint login email\r\n  await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\t\t\t\t\t \r\n   await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n\r\n\tmarkers.start('OKTA Login');\r\n  await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n   await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id(`okta-signin-submit`));\r\n  markers.stop('OKTA Login');\r\n   markers.start('Documents');\r\n   await click(By.id('idBtn_Back'));\r\n   \r\n  await click(By.css(`[aria-label=\"IoyzPbORK1.txt\"] [data-icon-name=\"StatusCircleCheckmark\"]`));\r\n    markers.stop('Documents');\r\n    markers.start('Download');\r\n\r\n  await click(By.css(`[data-icon-name=\"download\"]`));\r\n  //await downloads.waitForDownload('IoyzPbORK1.pptx',1500000);\r\n  await downloads.waitForDownload('IoyzPbORK1.txt',500000);\r\n  markers.stop('Download');\r\n\tawait driver.takeScreenshot();\t\t  \r\n  // Logout\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fdrive.aexp.com%2Fpersonal%2Fvamsi_k_gadde_aexp_com%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n}; \r\n\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1572,\r\n    height: 1133\r\n  });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n} \r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector)\r\n              .sendKeys(value);\r\n} \r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n} \r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n      await driver.findElement(selector)\r\n                  .click().then(null, async function (err) {\r\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\r\n          await driver.findElement(selector)\r\n                      .click();\r\n      });\r\n  }\r\n} \r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n      return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n      return false; // Will throw an error if element is not connected to the document\r\n\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t \r\n  }\r\n} \r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n      try {\r\n          numberOfAttempts += 1;\r\n          await attemptActionFn();\r\n      }\r\n      catch (error) {\r\n          attemptError = error;\r\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n          continue; // Attempt failed, reattempt\r\n      }\r\n      attemptError = null;\r\n      break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n      throw attemptError;\r\n  }\r\n} \r\n\r\nasync function rightClick(selector) {\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n} \r\n \r\n\r\n\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\r\n \r\n\r\n\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   \r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t  \r\n \r\n",
            "desiredStatusCode": "403",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1986201"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1986201"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1986201"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1986201"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1986201"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1986201"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-02-13 01:31:37",
            "modifiedDate": "2023-11-03 07:20:46",
            "createdBy": "Deleted User",
            "modifiedBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3485850,
            "testName": "OneDrive_FileDownload_Graph_Cert",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://drive.aexp.com/personal/sathiya_kamalanathan1_aexp_com/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n\r\nconst clientId = credentials.get('SPOCertClientID');        // Azure Application (client) ID\r\nconst tenantId = credentials.get('SPOCertTenantID');        // Azure Directory (tenant) ID\r\nconst thumbprint = credentials.get('SPOCertThumbPrint')     // Certificate thumbprint\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey = `b33d5fa6460774896b191a09a3348bad:4294d24658941cd8da440e5acb8b47b9cf9762ee67d697337eeabc5a429454f268fa654c218d674140df3a506c9b232205710819414ac1753b8933e21cc17a2ad4a6d1ee52dd43c49325b4d26e4d91110655b18bb5ec170d6807badcb5b179a167ed0b35d94df7a8bcde36b70e859ceedb096190bbcb2608ccab149e94fd4843838680c06874706ab3945a83eaed5740134104c40179693e46a6287610b94a0b645dada98b95efa281f5a750224dbda470968c44ce2b9a986b71d1f8eb59b8353464224516234e724843b59a862d605bca042af0e7469578aa105da46b54bbbf8e3585daf694cd94e503a18b0913882179a43c047025b060628235f4b721c26dd5d1ee3725442c46c093448ce2d5173cde6f1ea3eaa4c6d7f65b59905282114cc1904c0b98d6b4dc7fd55219f920df6778d3e4f82ed04602e001501335743b15f9b2ed6ee46c1a9a12ee7f25c9b448bfaff3dc1f10e334360cb6acf5dd36f06863cdf8b99fa50c3132042f6d71336cdf39e3e57389bf22c89dc611fe10120073d35bf982d4ea2dc2bea4b9396678ac9df2a9a1fb560904f46e331005164087be6a8f84ae02461d739969980b73c3b8e1cc6e646455f441313386372e80ca5fbbf416ce16b49a00701191b7555f4c41422dff415572de7ae008f3e2e040ec7068fab5b12342433ed831603692adebeefe69fc42a366a775183c8e5e8e16928aac1427ece1f2103855fa8b625a66867c84a4a98e978b2ff4ce72eeda04868aff0b62ed07cb81f8b59a6745902d6f18722f771ecb1b8b64a6516c6408aae170192c8ebf89a9b055d4b2660550028f7286785a3bf74537c2747ec0d7d2264af7dfe8aa1b48591bcc42fac2e930b3e140396de9d082e99175577e73b2a7440d3c19a4ced9f6a3cf47493434fc1c6bdca538c0c828c918fbb9045eea55fe69c00baa635d5a978672c1bdc7c5381aad795d2a8c67dfcacd5c8b2e5d1045d55e2f54e9d4f57db93e47f4df38fcb76768291a0a73275cecc68c4aea010f49ff7a7cb3e3bf5916dcc2b4c266da50319865902720963867ebe2ec947df0c43c8e2db3e02cc6866f33829e6b4c72a72ff7f7a9041c7ff01221e3042eefb5a26fe98c3d989cdac430e0c65c4246053229e07978ab208d521358e244b72ddd9dac6516968f89563d1ff169bb44a92ad73465e6bbb3d2db8357f52c6283d7b40ede91ae9998d53e35dc1d10d99808776e1a829e841a7e1bb9fbce83626669434f61cb1362e0b5d00a7f47594ec52ee712c35acc5c5e1e6abd4312c444ff12e9ddc09707f168f474c83684f89de4ab41a53a18f2018179c28eddf965d63c896a2b498a84eb6fb70f662bc822c4ab52204a2e49609288858fb8055ef9f9f9f1d04d10bb231c2a541b0f8ec7a2c090e0193108126055a524e28ba872b5314e080ad2d83d5fa29ea1669ee610b86630681b995ae8e83a69c8bd2d6449782ddc38c6f73e6e4b1b7b5d2fe95c86b52bd5db5ddeccc2008e7609256b35f65ccc3857d1c8c17b0e9f51b67b03c981e7c8248a02d87504aceb9002f4e171ef9a81689b89192ec95bc11abc617836c7d5df5b817e80918ae857a0b2d24bf21e423eedb3d5297ce5f5141e27a8f75680a9bd1c5bfb88718443aefbac9e979f6557a31d2d62c08c60ada13583592f3d8f79edbb1e42d50725dfed1cbb213263df4042a2fda6972982dcf6afb5fadcccd7d160854a26a54bd586c219548b15eeff1a3fde28eca157d1e100397332a2046489457f24a293cb3b4568034c8df3c72a174b7c649acd8188c2337214b39295d3c7aa8fbc0481ef3f9d53791bdab9827838e3450e8dea222420179c08a39629f8889f0758279340a9555c566174a295c5f2a14b2f85deb9fc46bc86829b96984c9ed70a0a6d6578a938aa9adf41c5da2b97eaf0c1569d88c665345ecb8b2338314fb3e8062f769e7ecdb03fb5cd2c6f8da63663eeb8e34949247e2e08ab8e7757ee4a7f98fc5128c366d1b35c46d1e715be80a7d465fe6bd0567d0f392a5d77df0c9d390735bc56f5572a2a891d1d0cd054221c41da7bcc56a0c9415a9dcbe366a4a39ac23ac7298310e441a4d473eef448d2a5c090dcc35c1ba00c3085e0eb425a132a5ced8d7df4c796e4fe5b05cac3f2c9e1ae0a37048bcf40b4d8c5b4abefabb01bde380601e7733c9aa5cf9fae2c5a555e00d7a3df00529a29075e3c02468823591cd9dc12db43586d1c386a0d75b54c57f95486aad260245bf0b2ead02f8f67d8a2820c579a90dc6836d17b4e96ed4d73cf6a62cd732b89b5458103507d03b4257a71fe3dbf36d65a04f69dd2e96fe7d25a5787abe0ee63c1ffa1ae83670ce7cdb71421473f6a8b40b545`;\r\nconst strSiteURL = 'https://graph.microsoft.com/v1.0/users/ae1c0d3b-5b5a-46ce-b1d3-73f04f89a95c/drive/items/900d9974-5b1f-472c-b10a-4d2521617cc2/Content'; //ae1c0d3b-5b5a-46ce-b1d3-73f04f89a95c is userid of Sathiya\r\nconst passphrase = credentials.get('key-tEyes-SharePoint-OneDrive');\r\nconst privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    // Generate Signed JWT\r\n    let signed_jwt = await generateSignedJWT();\r\n    \r\n    //Fetch the Access token from the OAuth service\r\n    let accessToken = await getOAUTHToken(signed_jwt);\r\n\r\n\r\n    // Download Content\r\n    markers.start('DownloadOneDriveContent');\r\n        let resp = await fetch(strSiteURL, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': accessToken\r\n            }\r\n        });\r\n    if (resp.status != 200) { throw new Error(`Received:${resp.status}:${resp.statusText}`); }\r\n    if (resp.status == 200) { \r\n        markers.set(`SUCCESS:${resp.status}:${resp.statusText}`);\r\n        console.log(await resp.text()); }\r\n    markers.stop('DownloadOneDriveContent');\r\n\r\n};\r\n\r\nasync function getOAUTHToken(_strSignedJWT){\r\n    markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n        \"redirect_uri\": \"http://localhost/\",\r\n        \"grant_type\": \"client_credentials\",\r\n        \"client_id\": clientId,\r\n        \"scope\": \"https://graph.microsoft.com/.default\",\r\n        \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n        \"client_assertion\": _strSignedJWT\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n            'Authorization': 'Bearer ' + _strSignedJWT\r\n        },\r\n        body: formBody\r\n    }\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n        const oauthErrorResponseText = await oauthResponse.text();\r\n        throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    const strAccessToken = responseJson.access_token;\r\n    console.log(strAccessToken)\r\n    markers.stop('RetrieveAccessToken');\r\n    return strAccessToken;\r\n}\r\n\r\nfunction generateSignedJWT() {\r\n    // Construct the signed JWT\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey })\r\n    return (jwt_tosign + \".\" + base64Url(signature))\r\n\r\n    function base64Url(data) {\r\n        return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n    }\r\n\r\n    function hexStringTo64(data) {\r\n        return Buffer.from(data, \"hex\").toString('base64');\r\n    }\r\n\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':');\r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    \r\n    deciphered += decipher.final(\"utf8\");\r\n    \r\n    return deciphered;\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "OneDriveFileDownload via Graph API",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3485850"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3485850"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3485850"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3485850"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3485850"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3485850"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-02 00:27:22",
            "modifiedDate": "2023-10-11 06:09:08",
            "createdBy": "Vamsi Krishna Gadde (Vamsi.K.Gadde@aexp.com)",
            "modifiedBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1930062,
            "testName": "OneDrive_FileUpload_Browser",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 61,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nlet fileFolder = 'UC8-Upload';\r\n\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    var myFilePath = await uploads.generateRandomTextFile(1024);\r\n    var fileName = await myFilePath.slice(-14);\r\n\r\n    await configureDriver();\r\n\r\n     // Page Load\r\n    markers.start('Page Load');\r\n    \r\n    // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n    await driver.get('https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/ThousandEyes/Forms/AllItems.aspx');\r\n    var actualTitle = await driver.getTitle();\r\n    markers.stop('Page Load');\r\n    \r\n    markers.start('Username');\r\n\tawait click(By.id(`i0116`));\r\n    await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\t\t\t\t\t \t\t\t\t  \r\n   await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n  markers.start('OKTA Login');\r\n await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id(`okta-signin-submit`));\r\n  markers.stop('OKTA Login');\r\n  markers.start('Shared Documents');\r\n  await click(By.id('idBtn_Back'));\r\n  await driver.takeScreenshot();\r\n  await driver.sleep(1000);\r\n  markers.stop('Shared Documents');\r\n  markers.start('Upload File');\r\n  await click(By.name(`Upload`));\r\n  await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n\r\n    // Locate the file input element\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(myFilePath);\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"`+fileName+`\")]`)));\r\n    markers.stop('Upload File');\r\n    // Logout\r\n    markers.start('Logout');\r\n    await driver.takeScreenshot();\r\n    await driver.get(\"https://drive.aexp.com/personal/vamsi_k_gadde_aexp_com/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fdrive.aexp.com%2Fpersonal%2Fvamsi_k_gadde_aexp_com%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    markers.stop('Logout'); \r\n    \r\n\r\n    \r\n}\r\nasync function findElementWithText(text) {\r\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n",
            "desiredStatusCode": "403",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1930062"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1930062"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1930062"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1930062"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1930062"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1930062"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-02-13 02:16:19",
            "modifiedDate": "2023-07-21 07:25:36",
            "createdBy": "Deleted User",
            "modifiedBy": "Amey Anil Desai (Amey.A.Desai1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3485890,
            "testName": "OneDrive_FileUpload_Graph_Cert",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://drive.aexp.com/personal/sathiya_kamalanathan1_aexp_com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n \r\nconst clientId = credentials.get('SPOCertClientID');        // Azure Application (client) ID\r\nconst tenantId = credentials.get('SPOCertTenantID');        // Azure Directory (tenant) ID\r\nconst thumbprint = credentials.get('SPOCertThumbPrint')     // Certificate thumbprint\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey = `b33d5fa6460774896b191a09a3348bad:4294d24658941cd8da440e5acb8b47b9cf9762ee67d697337eeabc5a429454f268fa654c218d674140df3a506c9b232205710819414ac1753b8933e21cc17a2ad4a6d1ee52dd43c49325b4d26e4d91110655b18bb5ec170d6807badcb5b179a167ed0b35d94df7a8bcde36b70e859ceedb096190bbcb2608ccab149e94fd4843838680c06874706ab3945a83eaed5740134104c40179693e46a6287610b94a0b645dada98b95efa281f5a750224dbda470968c44ce2b9a986b71d1f8eb59b8353464224516234e724843b59a862d605bca042af0e7469578aa105da46b54bbbf8e3585daf694cd94e503a18b0913882179a43c047025b060628235f4b721c26dd5d1ee3725442c46c093448ce2d5173cde6f1ea3eaa4c6d7f65b59905282114cc1904c0b98d6b4dc7fd55219f920df6778d3e4f82ed04602e001501335743b15f9b2ed6ee46c1a9a12ee7f25c9b448bfaff3dc1f10e334360cb6acf5dd36f06863cdf8b99fa50c3132042f6d71336cdf39e3e57389bf22c89dc611fe10120073d35bf982d4ea2dc2bea4b9396678ac9df2a9a1fb560904f46e331005164087be6a8f84ae02461d739969980b73c3b8e1cc6e646455f441313386372e80ca5fbbf416ce16b49a00701191b7555f4c41422dff415572de7ae008f3e2e040ec7068fab5b12342433ed831603692adebeefe69fc42a366a775183c8e5e8e16928aac1427ece1f2103855fa8b625a66867c84a4a98e978b2ff4ce72eeda04868aff0b62ed07cb81f8b59a6745902d6f18722f771ecb1b8b64a6516c6408aae170192c8ebf89a9b055d4b2660550028f7286785a3bf74537c2747ec0d7d2264af7dfe8aa1b48591bcc42fac2e930b3e140396de9d082e99175577e73b2a7440d3c19a4ced9f6a3cf47493434fc1c6bdca538c0c828c918fbb9045eea55fe69c00baa635d5a978672c1bdc7c5381aad795d2a8c67dfcacd5c8b2e5d1045d55e2f54e9d4f57db93e47f4df38fcb76768291a0a73275cecc68c4aea010f49ff7a7cb3e3bf5916dcc2b4c266da50319865902720963867ebe2ec947df0c43c8e2db3e02cc6866f33829e6b4c72a72ff7f7a9041c7ff01221e3042eefb5a26fe98c3d989cdac430e0c65c4246053229e07978ab208d521358e244b72ddd9dac6516968f89563d1ff169bb44a92ad73465e6bbb3d2db8357f52c6283d7b40ede91ae9998d53e35dc1d10d99808776e1a829e841a7e1bb9fbce83626669434f61cb1362e0b5d00a7f47594ec52ee712c35acc5c5e1e6abd4312c444ff12e9ddc09707f168f474c83684f89de4ab41a53a18f2018179c28eddf965d63c896a2b498a84eb6fb70f662bc822c4ab52204a2e49609288858fb8055ef9f9f9f1d04d10bb231c2a541b0f8ec7a2c090e0193108126055a524e28ba872b5314e080ad2d83d5fa29ea1669ee610b86630681b995ae8e83a69c8bd2d6449782ddc38c6f73e6e4b1b7b5d2fe95c86b52bd5db5ddeccc2008e7609256b35f65ccc3857d1c8c17b0e9f51b67b03c981e7c8248a02d87504aceb9002f4e171ef9a81689b89192ec95bc11abc617836c7d5df5b817e80918ae857a0b2d24bf21e423eedb3d5297ce5f5141e27a8f75680a9bd1c5bfb88718443aefbac9e979f6557a31d2d62c08c60ada13583592f3d8f79edbb1e42d50725dfed1cbb213263df4042a2fda6972982dcf6afb5fadcccd7d160854a26a54bd586c219548b15eeff1a3fde28eca157d1e100397332a2046489457f24a293cb3b4568034c8df3c72a174b7c649acd8188c2337214b39295d3c7aa8fbc0481ef3f9d53791bdab9827838e3450e8dea222420179c08a39629f8889f0758279340a9555c566174a295c5f2a14b2f85deb9fc46bc86829b96984c9ed70a0a6d6578a938aa9adf41c5da2b97eaf0c1569d88c665345ecb8b2338314fb3e8062f769e7ecdb03fb5cd2c6f8da63663eeb8e34949247e2e08ab8e7757ee4a7f98fc5128c366d1b35c46d1e715be80a7d465fe6bd0567d0f392a5d77df0c9d390735bc56f5572a2a891d1d0cd054221c41da7bcc56a0c9415a9dcbe366a4a39ac23ac7298310e441a4d473eef448d2a5c090dcc35c1ba00c3085e0eb425a132a5ced8d7df4c796e4fe5b05cac3f2c9e1ae0a37048bcf40b4d8c5b4abefabb01bde380601e7733c9aa5cf9fae2c5a555e00d7a3df00529a29075e3c02468823591cd9dc12db43586d1c386a0d75b54c57f95486aad260245bf0b2ead02f8f67d8a2820c579a90dc6836d17b4e96ed4d73cf6a62cd732b89b5458103507d03b4257a71fe3dbf36d65a04f69dd2e96fe7d25a5787abe0ee63c1ffa1ae83670ce7cdb71421473f6a8b40b545`;\r\nconst filename=`${Math.random().toString(16).slice(2)}.txt`;\r\nconst strSiteURL=`https://graph.microsoft.com/v1.0/users/ae1c0d3b-5b5a-46ce-b1d3-73f04f89a95c/drive/root:/Thousand%20Eyes/${filename}:/Content`; //ae1c0d3b-5b5a-46ce-b1d3-73f04f89a95c is the user id of Sathiya\r\nconst passphrase = credentials.get('key-tEyes-SharePoint-OneDrive');\r\nconst privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\n// Base 64 encoded version of 'AmericanExpress' repeated 60 times, once per new line.\r\nconst strTextToUpload = 'QW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5\\\r\nFeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWV\\\r\nyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXN\\\r\nzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV\\\r\n4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJ\\\r\npY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3M\\\r\nKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXh\\\r\nwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcml\\\r\njYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwp\\\r\nBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHB\\\r\nyZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWN\\\r\nhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkF\\\r\ntZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJ\\\r\nlc3M=';\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    // Generate Signed JWT\r\n    let signed_jwt = await generateSignedJWT();\r\n    \r\n    //Fetch the Access token from the OAuth service\r\n    let accessToken = await getOAUTHToken(signed_jwt);\r\n\r\n    // Load page\r\n    markers.start('OnedriveFileUpload');\r\n    let resp=await fetch(strSiteURL,{\r\n        method:'PUT',\r\n        headers: {\r\n            'Content-Type': 'text/plain',\r\n            'Content-Encoding': 'base64',\r\n            'authorization':accessToken,\r\n        },\r\n        body: strTextToUpload}); //file content\r\n    if (resp.status != 201) { throw new Error(`Received:${resp.status}:${resp.statusText}`); }\r\n    if (resp.status == 201) { \r\n        markers.set(`SUCCESS:${resp.status}:${resp.statusText}`);\r\n        console.log(await resp.text()); }\r\n    markers.stop('OnedriveFileUpload');\r\n\r\n};\r\n\r\nasync function getOAUTHToken(_strSignedJWT){\r\n    markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n        \"redirect_uri\": \"http://localhost/\",\r\n        \"grant_type\": \"client_credentials\",\r\n        \"client_id\": clientId,\r\n        \"scope\": \"https://graph.microsoft.com/.default\",\r\n        \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n        \"client_assertion\": _strSignedJWT\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n            'Authorization': 'Bearer ' + _strSignedJWT\r\n        },\r\n        body: formBody\r\n    }\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n        const oauthErrorResponseText = await oauthResponse.text();\r\n        throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    const strAccessToken = responseJson.access_token;\r\n    console.log(strAccessToken)\r\n    markers.stop('RetrieveAccessToken');\r\n    return strAccessToken;\r\n}\r\n\r\nfunction generateSignedJWT() {\r\n    // Construct the signed JWT\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey })\r\n    return (jwt_tosign + \".\" + base64Url(signature))\r\n\r\n    function base64Url(data) {\r\n        return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n    }\r\n\r\n    function hexStringTo64(data) {\r\n        return Buffer.from(data, \"hex\").toString('base64');\r\n    }\r\n\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':');\r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    \r\n    deciphered += decipher.final(\"utf8\");\r\n    \r\n    return deciphered;\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "OneDrive File Upload via Graph Api",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3485890"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3485890"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3485890"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3485890"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3485890"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3485890"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-10-02 21:26:59",
            "modifiedDate": "2023-11-14 22:28:13",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4195321,
            "testName": "PowerApps V1 ",
            "type": "web-transactions",
            "interval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://make.powerapps.com/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 120,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n\r\n    const settings = test.getSettings();\r\n\r\n    // Load page\r\n    await driver.get(settings.url); \r\n    \r\n    // Click on 'Enter your email, phone, or Skype.'\r\n\tawait click(By.id(`i0116`));\r\n\r\n    await typeText(credentials.get('PowerApps_SVC'), By.id(`i0116`));\r\n\r\n    // Click on 'Next'\r\n\tawait click(By.id(`idSIButton9`));\r\n\r\n    await click(By.id(`okta-signin-username`));\r\n\r\n    await typeText(credentials.get('PowerApps_SVC_Okta'), By.id(`okta-signin-username`));\r\n\r\n    await typeText(credentials.get('PowerApps_PW'), By.id(`okta-signin-password`));\r\n\r\n    await pressEnter(By.id(`okta-signin-password`));\r\n\r\n    // Click on 'No'\r\n\tawait click(By.id(`idBtn_Back`));\r\n\r\n    await click(By.css(`.\\\\_8ZYZKvxC8bvw1xgQGSkvvA\\\\=\\\\=`));\r\n\r\n    // Click on 'Sign out'\r\n\tawait click(By.id(`mectrl_body_signOut`));\r\n    \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 30 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n    await driver.findElement(selector)\r\n                .sendKeys(Key.RETURN);\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4195321"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4195321"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4195321"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4195321"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4195321"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4195321"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-11-14 22:46:08",
            "modifiedDate": "2023-11-14 22:46:13",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4394230,
            "testName": "PowerAutomate V1",
            "type": "web-transactions",
            "interval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://make.powerautomate.com/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 120,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n\r\n    const settings = test.getSettings();\r\n\r\n    // Load page\r\n    await driver.get(settings.url); \r\n    \r\n    // Click on 'Enter your email, phone, or Skype.'\r\n\tawait click(By.id(`i0116`));\r\n\r\n    await typeText(credentials.get('PowerApps_SVC'), By.id(`i0116`));\r\n\r\n    // Click on 'Next'\r\n\tawait click(By.id(`idSIButton9`));\r\n\r\n    await click(By.id(`okta-signin-username`));\r\n\r\n    await typeText(credentials.get('PowerApps_SVC_Okta'), By.id(`okta-signin-username`));\r\n\r\n    await typeText(credentials.get('PowerApps_PW'), By.id(`okta-signin-password`));\r\n\r\n    await pressEnter(By.id(`okta-signin-password`));\r\n\r\n    // Click on 'No'\r\n\tawait click(By.id(`idBtn_Back`));\r\n\r\n    await click(By.css(`.\\\\_8ZYZKvxC8bvw1xgQGSkvvA\\\\=\\\\=`));\r\n\r\n    // Click on 'Sign out'\r\n\tawait click(By.id(`mectrl_body_signOut`));\r\n    \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 30 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n    await driver.findElement(selector)\r\n                .sendKeys(Key.RETURN);\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4394230"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4394230"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4394230"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4394230"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4394230"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4394230"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-07-13 15:48:48",
            "modifiedDate": "2023-12-21 14:38:45",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3856891,
            "testName": "Process Unity - EO",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.processunity.net/axp-eo/Default.aspx",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 45,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n\r\n  await click(By.id(`okta-signin-username`));\r\n\r\n  await typeText(credentials.get('Process_Unity_EO_SVC'), By.id(`okta-signin-username`));\r\n\r\n  await click(By.id(`okta-signin-password`));\r\n\r\n  await typeText(credentials.get('Process_Unity_EO_PW'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Login');\r\n\r\n  // Click on 'Sign In'\r\n\r\n  markers.start('Home Page');\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Make driver sleep for 20 seconds | Rather than this sleep we may want to inspect for one of the last objects to load on the page to verify the page loaded successfully before logout\r\n  //await driver.sleep(20000);\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'WORKSPACE')]]\"));\r\n  \r\n  await driver.takeScreenshot();\r\n  markers.stop('Home Page');\r\n\r\n  // Click on 'DS'\r\n  markers.start('Logout');\r\n  await click(By.css(`[data-ui-test-id=\"profileInitials\"]`));\r\n\r\n  // Click on 'Logout'\r\n  await click(By.id(`LogoutMenuItem`));\r\n\r\n  // Click on 'OK'\r\n  await click(By.css(`.tiny .primary`));\r\n  await driver.takeScreenshot();\r\n  markers.stop('Logout');\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 45 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3856891"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3856891"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3856891"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3856891"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3856891"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3856891"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-19 17:25:38",
            "modifiedDate": "2023-12-21 14:38:47",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3802420,
            "testName": "Process Unity - TLM",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.processunity.net/axp-tlm/Default.aspx",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 51,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n\r\n  await click(By.id(`okta-signin-username`));\r\n\r\n  await typeText(credentials.get('Process_Unity_TLM_SVC'), By.id(`okta-signin-username`));\r\n\r\n  await click(By.id(`okta-signin-password`));\r\n\r\n  await typeText(credentials.get('Process_Unity_TLM_PW'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Login');\r\n\r\n  // Click on 'Sign In'\r\n\r\n  markers.start('Home Page');\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Make driver sleep for 20 seconds | Rather than this sleep we may want to inspect for one of the last objects to load on the page to verify the page loaded successfully before logout\r\n  //await driver.sleep(20000);\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'WORKSPACE')]]\"));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Home Page');\r\n\r\n  // Click on 'DS'\r\n  markers.start('Logout');\r\n  await click(By.css(`[data-ui-test-id=\"profileInitials\"]`));\r\n\r\n  // Click on 'Logout'\r\n  await click(By.id(`LogoutMenuItem`));\r\n\r\n  // Click on 'OK'\r\n  await click(By.css(`.tiny .primary`));\r\n  await driver.takeScreenshot();\r\n  markers.stop('Logout');\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 45 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(650);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3802420"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3802420"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3802420"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3802420"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3802420"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3802420"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-09-04 04:52:18",
            "modifiedDate": "2023-09-26 08:14:09",
            "createdBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "modifiedBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 4079561,
            "testName": "Process Unity - TLM Copy HITESH",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.processunity.net/axp-tlm/Default.aspx",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 45,
            "targetTime": 6,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n\r\n  await click(By.id(`okta-signin-username`));\r\n\r\n  await typeText(credentials.get('Process_Unity_TLM_SVC'), By.id(`okta-signin-username`));\r\n\r\n  await click(By.id(`okta-signin-password`));\r\n\r\n  await typeText(credentials.get('Process_Unity_TLM_PW'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Login');\r\n\r\n  // Click on 'Sign In'\r\n\r\n  markers.start('Home Page');\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Make driver sleep for 20 seconds | Rather than this sleep we may want to inspect for one of the last objects to load on the page to verify the page loaded successfully before logout\r\n  //await driver.sleep(20000);\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'WORKSPACE')]]\"));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Home Page');\r\n\r\n  // Click on 'DS'\r\n  markers.start('Logout');\r\n  await click(By.css(`[data-ui-test-id=\"profileInitials\"]`));\r\n\r\n  // Click on 'Logout'\r\n  await click(By.id(`LogoutMenuItem`));\r\n\r\n  // Click on 'OK'\r\n  await click(By.css(`.tiny .primary`));\r\n  await driver.takeScreenshot();\r\n  markers.stop('Logout');\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 45 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4079561"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4079561"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4079561"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4079561"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4079561"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4079561"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-07-18 22:46:23",
            "modifiedDate": "2023-12-21 14:38:48",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3873380,
            "testName": "Process Unity - TSM",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.processunity.net/axp-tsm/Default.aspx",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 45,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n\r\n  await click(By.id(`okta-signin-username`));\r\n\r\n  await typeText(credentials.get('Process_Unity_TSM_SVC'), By.id(`okta-signin-username`));\r\n\r\n  await click(By.id(`okta-signin-password`));\r\n\r\n  await typeText(credentials.get('Process_Unity_TSM_PW'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Login');\r\n\r\n  // Click on 'Sign In'\r\n\r\n  markers.start('Home Page');\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Make driver sleep for 20 seconds | Rather than this sleep we may want to inspect for one of the last objects to load on the page to verify the page loaded successfully before logout\r\n  //await driver.sleep(20000);\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'WORKSPACE')]]\"));\r\n  \r\n  await driver.takeScreenshot();\r\n  markers.stop('Home Page');\r\n\r\n  // Click on 'DS'\r\n  markers.start('Logout');\r\n  await click(By.css(`[data-ui-test-id=\"profileInitials\"]`));\r\n\r\n  // Click on 'Logout'\r\n  await click(By.id(`LogoutMenuItem`));\r\n\r\n  // Click on 'OK'\r\n  await click(By.css(`.tiny .primary`));\r\n  await driver.takeScreenshot();\r\n  markers.stop('Logout');\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 45 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3873380"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3873380"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3873380"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3873380"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3873380"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3873380"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-30 05:02:51",
            "modifiedDate": "2023-10-11 12:48:18",
            "createdBy": "Vamsi Krishna Gadde (Vamsi.K.Gadde@aexp.com)",
            "modifiedBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1986095,
            "testName": "SharePoint_FileDownload_Browser",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 0,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 64,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, transaction } from 'thousandeyes';\r\nrunScript();\r\nasync function runScript() {\r\n  // Configure\r\n  await configureDriver();\r\n  // Page Load\r\n  markers.start('Page Load');\r\n  // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n  await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n  var actualTitle = await driver.getTitle();\r\n  markers.stop('Page Load');\r\n  \r\n  // Login process\r\n  //credentials.get('SPServiceaccount')\r\n  markers.start('Username');\r\n  await click(By.id(`i0116`));\r\n\r\n  await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n  await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n  // Enter Password\r\n  markers.start('OKTA Login');\r\n  await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id(`okta-signin-submit`));\r\n  markers.stop('OKTA Login');\r\n  markers.start('Shared Documents');\r\n  await click(By.id('idBtn_Back'));\r\n  \r\n  await driver.wait(until.titleContains('Vamsi_Test'));\r\n\r\n\r\n  await driver.get('https://spaces.aexp.com/teams/vgadde/ThousandEyes/download');\r\nawait driver.takeScreenshot();\r\n  await click(By.css(`[aria-label=\"0CdW0MUPUn.txt\"] [data-icon-name=\"StatusCircleCheckmark\"]`));\r\n  \r\n  markers.stop('Shared Documents');\r\n \r\n  // Click on 'Download' and measure download time\r\n  // TODO: replace <your-filename> with the name of the file your downloading; eg. Public Cloud Performance Benchmark Report Final.pdf\r\n  markers.start('Download');\r\n  await click(By.css(`[data-icon-name=\"download\"]`));\r\n  await downloads.waitForDownload('0CdW0MUPUn.txt', 60000);\r\n\r\n  markers.stop('Download');\r\n  await driver.takeScreenshot();\r\n  // Logout\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    //await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n}; \r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1572,\r\n    height: 1133\r\n  });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n} \r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector)\r\n              .sendKeys(value);\r\n} \r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n} \r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n      await driver.findElement(selector)\r\n                  .click().then(null, async function (err) {\r\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\r\n          await driver.findElement(selector)\r\n                      .click();\r\n      });\r\n  }\r\n} \r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n      return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n      return false; // Will throw an error if element is not connected to the document\r\n  }\r\n} \r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n      try {\r\n          numberOfAttempts += 1;\r\n          await attemptActionFn();\r\n      }\r\n      catch (error) {\r\n          attemptError = error;\r\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n          continue; // Attempt failed, reattempt\r\n      }\r\n      attemptError = null;\r\n      break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n      throw attemptError;\r\n  }\r\n} \r\n\r\nasync function rightClick(selector) {\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n} ",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1986095"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1986095"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1986095"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-02-13 02:03:15",
            "modifiedDate": "2023-11-22 18:12:04",
            "createdBy": "Deleted User",
            "modifiedBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3485875,
            "testName": "SharePoint_FileDownload_Graph_Cert",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://spaces.aexp.com/teams/Sathiya",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n\r\nconst clientId = credentials.get('SPOCertClientID');        // Azure Application (client) ID\r\nconst tenantId = credentials.get('SPOCertTenantID');        // Azure Directory (tenant) ID\r\nconst thumbprint = credentials.get('SPOCertThumbPrint')     // Certificate thumbprint\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey = `b33d5fa6460774896b191a09a3348bad:4294d24658941cd8da440e5acb8b47b9cf9762ee67d697337eeabc5a429454f268fa654c218d674140df3a506c9b232205710819414ac1753b8933e21cc17a2ad4a6d1ee52dd43c49325b4d26e4d91110655b18bb5ec170d6807badcb5b179a167ed0b35d94df7a8bcde36b70e859ceedb096190bbcb2608ccab149e94fd4843838680c06874706ab3945a83eaed5740134104c40179693e46a6287610b94a0b645dada98b95efa281f5a750224dbda470968c44ce2b9a986b71d1f8eb59b8353464224516234e724843b59a862d605bca042af0e7469578aa105da46b54bbbf8e3585daf694cd94e503a18b0913882179a43c047025b060628235f4b721c26dd5d1ee3725442c46c093448ce2d5173cde6f1ea3eaa4c6d7f65b59905282114cc1904c0b98d6b4dc7fd55219f920df6778d3e4f82ed04602e001501335743b15f9b2ed6ee46c1a9a12ee7f25c9b448bfaff3dc1f10e334360cb6acf5dd36f06863cdf8b99fa50c3132042f6d71336cdf39e3e57389bf22c89dc611fe10120073d35bf982d4ea2dc2bea4b9396678ac9df2a9a1fb560904f46e331005164087be6a8f84ae02461d739969980b73c3b8e1cc6e646455f441313386372e80ca5fbbf416ce16b49a00701191b7555f4c41422dff415572de7ae008f3e2e040ec7068fab5b12342433ed831603692adebeefe69fc42a366a775183c8e5e8e16928aac1427ece1f2103855fa8b625a66867c84a4a98e978b2ff4ce72eeda04868aff0b62ed07cb81f8b59a6745902d6f18722f771ecb1b8b64a6516c6408aae170192c8ebf89a9b055d4b2660550028f7286785a3bf74537c2747ec0d7d2264af7dfe8aa1b48591bcc42fac2e930b3e140396de9d082e99175577e73b2a7440d3c19a4ced9f6a3cf47493434fc1c6bdca538c0c828c918fbb9045eea55fe69c00baa635d5a978672c1bdc7c5381aad795d2a8c67dfcacd5c8b2e5d1045d55e2f54e9d4f57db93e47f4df38fcb76768291a0a73275cecc68c4aea010f49ff7a7cb3e3bf5916dcc2b4c266da50319865902720963867ebe2ec947df0c43c8e2db3e02cc6866f33829e6b4c72a72ff7f7a9041c7ff01221e3042eefb5a26fe98c3d989cdac430e0c65c4246053229e07978ab208d521358e244b72ddd9dac6516968f89563d1ff169bb44a92ad73465e6bbb3d2db8357f52c6283d7b40ede91ae9998d53e35dc1d10d99808776e1a829e841a7e1bb9fbce83626669434f61cb1362e0b5d00a7f47594ec52ee712c35acc5c5e1e6abd4312c444ff12e9ddc09707f168f474c83684f89de4ab41a53a18f2018179c28eddf965d63c896a2b498a84eb6fb70f662bc822c4ab52204a2e49609288858fb8055ef9f9f9f1d04d10bb231c2a541b0f8ec7a2c090e0193108126055a524e28ba872b5314e080ad2d83d5fa29ea1669ee610b86630681b995ae8e83a69c8bd2d6449782ddc38c6f73e6e4b1b7b5d2fe95c86b52bd5db5ddeccc2008e7609256b35f65ccc3857d1c8c17b0e9f51b67b03c981e7c8248a02d87504aceb9002f4e171ef9a81689b89192ec95bc11abc617836c7d5df5b817e80918ae857a0b2d24bf21e423eedb3d5297ce5f5141e27a8f75680a9bd1c5bfb88718443aefbac9e979f6557a31d2d62c08c60ada13583592f3d8f79edbb1e42d50725dfed1cbb213263df4042a2fda6972982dcf6afb5fadcccd7d160854a26a54bd586c219548b15eeff1a3fde28eca157d1e100397332a2046489457f24a293cb3b4568034c8df3c72a174b7c649acd8188c2337214b39295d3c7aa8fbc0481ef3f9d53791bdab9827838e3450e8dea222420179c08a39629f8889f0758279340a9555c566174a295c5f2a14b2f85deb9fc46bc86829b96984c9ed70a0a6d6578a938aa9adf41c5da2b97eaf0c1569d88c665345ecb8b2338314fb3e8062f769e7ecdb03fb5cd2c6f8da63663eeb8e34949247e2e08ab8e7757ee4a7f98fc5128c366d1b35c46d1e715be80a7d465fe6bd0567d0f392a5d77df0c9d390735bc56f5572a2a891d1d0cd054221c41da7bcc56a0c9415a9dcbe366a4a39ac23ac7298310e441a4d473eef448d2a5c090dcc35c1ba00c3085e0eb425a132a5ced8d7df4c796e4fe5b05cac3f2c9e1ae0a37048bcf40b4d8c5b4abefabb01bde380601e7733c9aa5cf9fae2c5a555e00d7a3df00529a29075e3c02468823591cd9dc12db43586d1c386a0d75b54c57f95486aad260245bf0b2ead02f8f67d8a2820c579a90dc6836d17b4e96ed4d73cf6a62cd732b89b5458103507d03b4257a71fe3dbf36d65a04f69dd2e96fe7d25a5787abe0ee63c1ffa1ae83670ce7cdb71421473f6a8b40b545`;\r\nconst strSiteURL = 'https://graph.microsoft.com/v1.0/sites/fe708ee7-0850-4f2f-a64a-cafb060b1036/drive/items/917e7e57-9f08-48dc-9034-eec515f0c63c/content'; //fe708ee7-0850-4f2f-a64a-cafb060b1036 is site id of target site\r\nconst passphrase = credentials.get('key-tEyes-SharePoint-OneDrive');\r\nconst privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    // Generate Signed JWT\r\n    let signed_jwt = await generateSignedJWT();\r\n    \r\n    //Fetch the Access token from the OAuth service\r\n    let accessToken = await getOAUTHToken(signed_jwt);\r\n\r\n\r\n    // Download Content\r\n    markers.start('DownloadSharepointContent');\r\n        let resp = await fetch(strSiteURL, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': accessToken\r\n            }\r\n        });\r\n    if (resp.status != 200) { throw new Error(`Received:${resp.status}:${resp.statusText}`); }\r\n    if (resp.status == 200) { \r\n        markers.set(`SUCCESS:${resp.status}:${resp.statusText}`);\r\n        console.log(await resp.text()); }\r\n    markers.stop('DownloadSharepointContent');\r\n\r\n};\r\n\r\nasync function getOAUTHToken(_strSignedJWT){\r\n    markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n        \"redirect_uri\": \"http://localhost/\",\r\n        \"grant_type\": \"client_credentials\",\r\n        \"client_id\": clientId,\r\n        \"scope\": \"https://graph.microsoft.com/.default\",\r\n        \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n        \"client_assertion\": _strSignedJWT\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n            'Authorization': 'Bearer ' + _strSignedJWT\r\n        },\r\n        body: formBody\r\n    }\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n        const oauthErrorResponseText = await oauthResponse.text();\r\n        throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    const strAccessToken = responseJson.access_token;\r\n    console.log(strAccessToken)\r\n    markers.stop('RetrieveAccessToken');\r\n    return strAccessToken;\r\n}\r\n\r\nfunction generateSignedJWT() {\r\n    // Construct the signed JWT\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey })\r\n    return (jwt_tosign + \".\" + base64Url(signature))\r\n\r\n    function base64Url(data) {\r\n        return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n    }\r\n\r\n    function hexStringTo64(data) {\r\n        return Buffer.from(data, \"hex\").toString('base64');\r\n    }\r\n\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':');\r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    \r\n    deciphered += decipher.final(\"utf8\");\r\n    \r\n    return deciphered;\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "SharePointFileDownload using Graph Api",
            "numPathTraces": 10,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3485875"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3485875"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3485875"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3485875"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3485875"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3485875"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-08-09 15:44:19",
            "modifiedDate": "2023-10-27 17:02:01",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3960402,
            "testName": "SharePoint_FileDownload_Graph_Cert BTN test",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://spaces.aexp.com/teams/Sathiya",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n\r\nconst clientId = credentials.get('SPOCertClientID');        // Azure Application (client) ID\r\nconst tenantId = credentials.get('SPOCertTenantID');        // Azure Directory (tenant) ID\r\nconst thumbprint = credentials.get('SPOCertThumbPrint')     // Certificate thumbprint\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey = `b33d5fa6460774896b191a09a3348bad:4294d24658941cd8da440e5acb8b47b9cf9762ee67d697337eeabc5a429454f268fa654c218d674140df3a506c9b232205710819414ac1753b8933e21cc17a2ad4a6d1ee52dd43c49325b4d26e4d91110655b18bb5ec170d6807badcb5b179a167ed0b35d94df7a8bcde36b70e859ceedb096190bbcb2608ccab149e94fd4843838680c06874706ab3945a83eaed5740134104c40179693e46a6287610b94a0b645dada98b95efa281f5a750224dbda470968c44ce2b9a986b71d1f8eb59b8353464224516234e724843b59a862d605bca042af0e7469578aa105da46b54bbbf8e3585daf694cd94e503a18b0913882179a43c047025b060628235f4b721c26dd5d1ee3725442c46c093448ce2d5173cde6f1ea3eaa4c6d7f65b59905282114cc1904c0b98d6b4dc7fd55219f920df6778d3e4f82ed04602e001501335743b15f9b2ed6ee46c1a9a12ee7f25c9b448bfaff3dc1f10e334360cb6acf5dd36f06863cdf8b99fa50c3132042f6d71336cdf39e3e57389bf22c89dc611fe10120073d35bf982d4ea2dc2bea4b9396678ac9df2a9a1fb560904f46e331005164087be6a8f84ae02461d739969980b73c3b8e1cc6e646455f441313386372e80ca5fbbf416ce16b49a00701191b7555f4c41422dff415572de7ae008f3e2e040ec7068fab5b12342433ed831603692adebeefe69fc42a366a775183c8e5e8e16928aac1427ece1f2103855fa8b625a66867c84a4a98e978b2ff4ce72eeda04868aff0b62ed07cb81f8b59a6745902d6f18722f771ecb1b8b64a6516c6408aae170192c8ebf89a9b055d4b2660550028f7286785a3bf74537c2747ec0d7d2264af7dfe8aa1b48591bcc42fac2e930b3e140396de9d082e99175577e73b2a7440d3c19a4ced9f6a3cf47493434fc1c6bdca538c0c828c918fbb9045eea55fe69c00baa635d5a978672c1bdc7c5381aad795d2a8c67dfcacd5c8b2e5d1045d55e2f54e9d4f57db93e47f4df38fcb76768291a0a73275cecc68c4aea010f49ff7a7cb3e3bf5916dcc2b4c266da50319865902720963867ebe2ec947df0c43c8e2db3e02cc6866f33829e6b4c72a72ff7f7a9041c7ff01221e3042eefb5a26fe98c3d989cdac430e0c65c4246053229e07978ab208d521358e244b72ddd9dac6516968f89563d1ff169bb44a92ad73465e6bbb3d2db8357f52c6283d7b40ede91ae9998d53e35dc1d10d99808776e1a829e841a7e1bb9fbce83626669434f61cb1362e0b5d00a7f47594ec52ee712c35acc5c5e1e6abd4312c444ff12e9ddc09707f168f474c83684f89de4ab41a53a18f2018179c28eddf965d63c896a2b498a84eb6fb70f662bc822c4ab52204a2e49609288858fb8055ef9f9f9f1d04d10bb231c2a541b0f8ec7a2c090e0193108126055a524e28ba872b5314e080ad2d83d5fa29ea1669ee610b86630681b995ae8e83a69c8bd2d6449782ddc38c6f73e6e4b1b7b5d2fe95c86b52bd5db5ddeccc2008e7609256b35f65ccc3857d1c8c17b0e9f51b67b03c981e7c8248a02d87504aceb9002f4e171ef9a81689b89192ec95bc11abc617836c7d5df5b817e80918ae857a0b2d24bf21e423eedb3d5297ce5f5141e27a8f75680a9bd1c5bfb88718443aefbac9e979f6557a31d2d62c08c60ada13583592f3d8f79edbb1e42d50725dfed1cbb213263df4042a2fda6972982dcf6afb5fadcccd7d160854a26a54bd586c219548b15eeff1a3fde28eca157d1e100397332a2046489457f24a293cb3b4568034c8df3c72a174b7c649acd8188c2337214b39295d3c7aa8fbc0481ef3f9d53791bdab9827838e3450e8dea222420179c08a39629f8889f0758279340a9555c566174a295c5f2a14b2f85deb9fc46bc86829b96984c9ed70a0a6d6578a938aa9adf41c5da2b97eaf0c1569d88c665345ecb8b2338314fb3e8062f769e7ecdb03fb5cd2c6f8da63663eeb8e34949247e2e08ab8e7757ee4a7f98fc5128c366d1b35c46d1e715be80a7d465fe6bd0567d0f392a5d77df0c9d390735bc56f5572a2a891d1d0cd054221c41da7bcc56a0c9415a9dcbe366a4a39ac23ac7298310e441a4d473eef448d2a5c090dcc35c1ba00c3085e0eb425a132a5ced8d7df4c796e4fe5b05cac3f2c9e1ae0a37048bcf40b4d8c5b4abefabb01bde380601e7733c9aa5cf9fae2c5a555e00d7a3df00529a29075e3c02468823591cd9dc12db43586d1c386a0d75b54c57f95486aad260245bf0b2ead02f8f67d8a2820c579a90dc6836d17b4e96ed4d73cf6a62cd732b89b5458103507d03b4257a71fe3dbf36d65a04f69dd2e96fe7d25a5787abe0ee63c1ffa1ae83670ce7cdb71421473f6a8b40b545`;\r\nconst strSiteURL = 'https://graph.microsoft.com/v1.0/sites/fe708ee7-0850-4f2f-a64a-cafb060b1036/drive/items/917e7e57-9f08-48dc-9034-eec515f0c63c/content'; //fe708ee7-0850-4f2f-a64a-cafb060b1036 is site id of target site\r\nconst passphrase = credentials.get('key-tEyes-SharePoint-OneDrive');\r\nconst privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    // Generate Signed JWT\r\n    let signed_jwt = await generateSignedJWT();\r\n    \r\n    //Fetch the Access token from the OAuth service\r\n    let accessToken = await getOAUTHToken(signed_jwt);\r\n\r\n\r\n    // Download Content\r\n    markers.start('DownloadSharepointContent');\r\n        let resp = await fetch(strSiteURL, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': accessToken\r\n            }\r\n        }).catch((e) => {throw new Error(e)});\r\n    if (resp.status != 200) { throw new Error(`Received:${resp.status}:${resp.statusText}`); }\r\n    if (resp.status == 200) { \r\n        markers.set(`SUCCESS:${resp.status}:${resp.statusText}`);\r\n        console.log(await resp.text()); }\r\n    markers.stop('DownloadSharepointContent');\r\n\r\n};\r\n\r\nasync function getOAUTHToken(_strSignedJWT){\r\n    markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n        \"redirect_uri\": \"http://localhost/\",\r\n        \"grant_type\": \"client_credentials\",\r\n        \"client_id\": clientId,\r\n        \"scope\": \"https://graph.microsoft.com/.default\",\r\n        \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n        \"client_assertion\": _strSignedJWT\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n            'Authorization': 'Bearer ' + _strSignedJWT\r\n        },\r\n        body: formBody\r\n    }\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n        const oauthErrorResponseText = await oauthResponse.text();\r\n        throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    const strAccessToken = responseJson.access_token;\r\n    console.log(strAccessToken)\r\n    markers.stop('RetrieveAccessToken');\r\n    return strAccessToken;\r\n}\r\n\r\nfunction generateSignedJWT() {\r\n    // Construct the signed JWT\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey })\r\n    return (jwt_tosign + \".\" + base64Url(signature))\r\n\r\n    function base64Url(data) {\r\n        return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n    }\r\n\r\n    function hexStringTo64(data) {\r\n        return Buffer.from(data, \"hex\").toString('base64');\r\n    }\r\n\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':');\r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    \r\n    deciphered += decipher.final(\"utf8\");\r\n    \r\n    return deciphered;\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "SharePointFileDownload using Graph Api",
            "numPathTraces": 10,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3960402"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3960402"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3960402"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3960402"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3960402"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3960402"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-12-18 09:11:25",
            "modifiedDate": "2023-12-19 06:19:40",
            "createdBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "modifiedBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 4516610,
            "testName": "SharePoint_FileDownload_Graph_Cert_TestForLog",
            "type": "web-transactions",
            "interval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://spaces.aexp.com/teams/Sathiya",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n\r\nconst clientId = credentials.get('SPOCertClientID');        // Azure Application (client) ID\r\nconst tenantId = credentials.get('SPOCertTenantID');        // Azure Directory (tenant) ID\r\nconst thumbprint = credentials.get('SPOCertThumbPrint')     // Certificate thumbprint\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey = `b33d5fa6460774896b191a09a3348bad:4294d24658941cd8da440e5acb8b47b9cf9762ee67d697337eeabc5a429454f268fa654c218d674140df3a506c9b232205710819414ac1753b8933e21cc17a2ad4a6d1ee52dd43c49325b4d26e4d91110655b18bb5ec170d6807badcb5b179a167ed0b35d94df7a8bcde36b70e859ceedb096190bbcb2608ccab149e94fd4843838680c06874706ab3945a83eaed5740134104c40179693e46a6287610b94a0b645dada98b95efa281f5a750224dbda470968c44ce2b9a986b71d1f8eb59b8353464224516234e724843b59a862d605bca042af0e7469578aa105da46b54bbbf8e3585daf694cd94e503a18b0913882179a43c047025b060628235f4b721c26dd5d1ee3725442c46c093448ce2d5173cde6f1ea3eaa4c6d7f65b59905282114cc1904c0b98d6b4dc7fd55219f920df6778d3e4f82ed04602e001501335743b15f9b2ed6ee46c1a9a12ee7f25c9b448bfaff3dc1f10e334360cb6acf5dd36f06863cdf8b99fa50c3132042f6d71336cdf39e3e57389bf22c89dc611fe10120073d35bf982d4ea2dc2bea4b9396678ac9df2a9a1fb560904f46e331005164087be6a8f84ae02461d739969980b73c3b8e1cc6e646455f441313386372e80ca5fbbf416ce16b49a00701191b7555f4c41422dff415572de7ae008f3e2e040ec7068fab5b12342433ed831603692adebeefe69fc42a366a775183c8e5e8e16928aac1427ece1f2103855fa8b625a66867c84a4a98e978b2ff4ce72eeda04868aff0b62ed07cb81f8b59a6745902d6f18722f771ecb1b8b64a6516c6408aae170192c8ebf89a9b055d4b2660550028f7286785a3bf74537c2747ec0d7d2264af7dfe8aa1b48591bcc42fac2e930b3e140396de9d082e99175577e73b2a7440d3c19a4ced9f6a3cf47493434fc1c6bdca538c0c828c918fbb9045eea55fe69c00baa635d5a978672c1bdc7c5381aad795d2a8c67dfcacd5c8b2e5d1045d55e2f54e9d4f57db93e47f4df38fcb76768291a0a73275cecc68c4aea010f49ff7a7cb3e3bf5916dcc2b4c266da50319865902720963867ebe2ec947df0c43c8e2db3e02cc6866f33829e6b4c72a72ff7f7a9041c7ff01221e3042eefb5a26fe98c3d989cdac430e0c65c4246053229e07978ab208d521358e244b72ddd9dac6516968f89563d1ff169bb44a92ad73465e6bbb3d2db8357f52c6283d7b40ede91ae9998d53e35dc1d10d99808776e1a829e841a7e1bb9fbce83626669434f61cb1362e0b5d00a7f47594ec52ee712c35acc5c5e1e6abd4312c444ff12e9ddc09707f168f474c83684f89de4ab41a53a18f2018179c28eddf965d63c896a2b498a84eb6fb70f662bc822c4ab52204a2e49609288858fb8055ef9f9f9f1d04d10bb231c2a541b0f8ec7a2c090e0193108126055a524e28ba872b5314e080ad2d83d5fa29ea1669ee610b86630681b995ae8e83a69c8bd2d6449782ddc38c6f73e6e4b1b7b5d2fe95c86b52bd5db5ddeccc2008e7609256b35f65ccc3857d1c8c17b0e9f51b67b03c981e7c8248a02d87504aceb9002f4e171ef9a81689b89192ec95bc11abc617836c7d5df5b817e80918ae857a0b2d24bf21e423eedb3d5297ce5f5141e27a8f75680a9bd1c5bfb88718443aefbac9e979f6557a31d2d62c08c60ada13583592f3d8f79edbb1e42d50725dfed1cbb213263df4042a2fda6972982dcf6afb5fadcccd7d160854a26a54bd586c219548b15eeff1a3fde28eca157d1e100397332a2046489457f24a293cb3b4568034c8df3c72a174b7c649acd8188c2337214b39295d3c7aa8fbc0481ef3f9d53791bdab9827838e3450e8dea222420179c08a39629f8889f0758279340a9555c566174a295c5f2a14b2f85deb9fc46bc86829b96984c9ed70a0a6d6578a938aa9adf41c5da2b97eaf0c1569d88c665345ecb8b2338314fb3e8062f769e7ecdb03fb5cd2c6f8da63663eeb8e34949247e2e08ab8e7757ee4a7f98fc5128c366d1b35c46d1e715be80a7d465fe6bd0567d0f392a5d77df0c9d390735bc56f5572a2a891d1d0cd054221c41da7bcc56a0c9415a9dcbe366a4a39ac23ac7298310e441a4d473eef448d2a5c090dcc35c1ba00c3085e0eb425a132a5ced8d7df4c796e4fe5b05cac3f2c9e1ae0a37048bcf40b4d8c5b4abefabb01bde380601e7733c9aa5cf9fae2c5a555e00d7a3df00529a29075e3c02468823591cd9dc12db43586d1c386a0d75b54c57f95486aad260245bf0b2ead02f8f67d8a2820c579a90dc6836d17b4e96ed4d73cf6a62cd732b89b5458103507d03b4257a71fe3dbf36d65a04f69dd2e96fe7d25a5787abe0ee63c1ffa1ae83670ce7cdb71421473f6a8b40b545`;\r\nconst strSiteURL = 'https://graph.microsoft.com/v1.0/sites/fe708ee7-0850-4f2f-a64a-cafb060b1036/drive/items/917e7e57-9f08-48dc-9034-eec515f0c63c/content'; //fe708ee7-0850-4f2f-a64a-cafb060b1036 is site id of target site\r\nconst passphrase = credentials.get('key-tEyes-SharePoint-OneDrive');\r\nconst privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    // Generate Signed JWT\r\n    let signed_jwt = await generateSignedJWT();\r\n    \r\n    //Fetch the Access token from the OAuth service\r\n    let accessToken = await getOAUTHToken(signed_jwt);\r\n\r\n\r\n    // Download Content\r\n    markers.start('DownloadSharepointContent');\r\n        let resp = await fetch(strSiteURL, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': accessToken,\r\n                'User-Agent': 'TE-SPOV1.0',\r\n                'client-request-id': uuidv4()\r\n            }\r\n        });\r\n    if (resp.status != 200) { throw new Error(`Received:${resp.status}:${resp.statusText}`); }\r\n    if (resp.status == 200) { \r\n        markers.set(`SUCCESS:${resp.status}:${resp.statusText}`);\r\n        console.log(await resp.text()); }\r\n    markers.stop('DownloadSharepointContent');\r\n\r\n};\r\n\r\nasync function getOAUTHToken(_strSignedJWT){\r\n    markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n        \"redirect_uri\": \"http://localhost/\",\r\n        \"grant_type\": \"client_credentials\",\r\n        \"client_id\": clientId,\r\n        \"scope\": \"https://graph.microsoft.com/.default\",\r\n        \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n        \"client_assertion\": _strSignedJWT\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n            'Authorization': 'Bearer ' + _strSignedJWT,\r\n            'User-Agent': 'TE-SPOV2.0',\r\n            'client-request-id': uuidv4()\r\n        },\r\n        body: formBody\r\n    }\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n        const oauthErrorResponseText = await oauthResponse.text();\r\n        throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    const strAccessToken = responseJson.access_token;\r\n    console.log(strAccessToken)\r\n    markers.stop('RetrieveAccessToken');\r\n    return strAccessToken;\r\n}\r\n\r\nfunction uuidv4() {\r\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\r\n\t.replace(/[xy]/g, function (c) {\r\n\t\tconst r = Math.random() * 16 | 0, \r\n\t\t\tv = c == 'x' ? r : (r & 0x3 | 0x8);\r\n\t\treturn v.toString(16);\r\n\t});\r\n}\r\n\r\nfunction generateSignedJWT() {\r\n    // Construct the signed JWT\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time,\r\n       // \"jti\": uuidv4()\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey })\r\n    return (jwt_tosign + \".\" + base64Url(signature))\r\n\r\n    function base64Url(data) {\r\n        return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n    }\r\n\r\n    function hexStringTo64(data) {\r\n        return Buffer.from(data, \"hex\").toString('base64');\r\n    }\r\n\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':');\r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    \r\n    deciphered += decipher.final(\"utf8\");\r\n    \r\n    return deciphered;\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "SharePointFileDownload using Graph Api",
            "numPathTraces": 10,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4516610"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4516610"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4516610"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4516610"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4516610"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4516610"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-01 05:54:47",
            "modifiedDate": "2023-10-11 06:06:22",
            "createdBy": "Vamsi Krishna Gadde (Vamsi.K.Gadde@aexp.com)",
            "modifiedBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1928443,
            "testName": "SharePoint_FileUpload_Browser",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 100,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nlet fileFolder = 'UC8-Upload';\r\n\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    var myFilePath = await uploads.generateRandomTextFile(1024);\r\n    var fileName = await myFilePath.slice(-14);\r\nawait configureDriver();\r\n // Page Load\r\n    markers.start('Page Load');\r\n    \r\n    // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n    await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n    var actualTitle = await driver.getTitle();\r\n    markers.stop('Page Load');\r\n    markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n\tawait typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    markers.stop('Username');\r\n    markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id(`okta-signin-submit`));\r\n   markers.stop('OKTA Login');\r\n  markers.start('Shared Documents');\r\n  await click(By.id('idBtn_Back'));\r\n  await driver.takeScreenshot();\r\n  await driver.sleep(1000);\r\n    // Wait for backend page to load\r\n    await driver.wait(until.titleContains('Vamsi_Test'));\r\n    // Click on 'Documents'\r\n\t  await click(By.css(`[href=\"/teams/vgadde/ThousandEyes/Forms/AllItems.aspx\"] > .ms-Nav-linkText`));\r\n     markers.stop('Shared Documents');\r\n     markers.start('Upload File');\r\n    // Wait for the main page to load until the Upload button is present\r\n    await driver.wait(until.elementLocated(By.name(`Upload`)));\r\n    // Take a screenshot before uploading file\r\n \r\n    // Click Upload > Files\r\n    await click(By.name(`Upload`));\r\n    await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n    // Locate the file input element\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(myFilePath);\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"`+fileName+`\")]`)));\r\n    markers.stop('Upload File');\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n\r\n    \r\n}\r\nasync function findElementWithText(text) {\r\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\n\r\n",
            "desiredStatusCode": "403",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1928443"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1928443"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1928443"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1928443"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1928443"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1928443"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-05-30 07:36:50",
            "modifiedDate": "2023-05-30 10:26:06",
            "createdBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "modifiedBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3753741,
            "testName": "SharePoint_FileUpload_Browser Test",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 100,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nlet fileFolder = 'UC8-Upload';\r\n\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    var myFilePath = await uploads.generateRandomTextFile(1024);\r\n    var fileName = await myFilePath.slice(-14);\r\nawait configureDriver();\r\n // Page Load\r\n    markers.start('Page Load');\r\n    \r\n    // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n    await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n    var actualTitle = await driver.getTitle();\r\n    markers.stop('Page Load');\r\n    markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n\tawait typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    markers.stop('Username');\r\n    markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  //await driver.takeScreenshot();\r\n  await click(By.id(`okta-signin-submit`));\r\n   markers.stop('OKTA Login');\r\n  markers.start('Shared Documents');\r\n  await click(By.id('idBtn_Back'));\r\n  //await driver.takeScreenshot();\r\n  await driver.sleep(1000);\r\n    // Wait for backend page to load\r\n    await driver.wait(until.titleContains('Vamsi_Test'));\r\n    // Click on 'Documents'\r\n  //  await click(driver.findElement(By.name('ThousandEyes')));\r\n\t await click(By.css(`[href=\"/teams/vgadde/ThousandEyes/Forms/AllItems.aspx\"] > .ms-Nav-linkText`));\r\n     markers.stop('Shared Documents');\r\n     markers.start('Upload File');\r\n    // await driver.takeScreenshot();\r\n    // await driver.wait(until.elementLocated(By.css(`[name=\"Upload\"] > [data-automationid=\"splitbuttonprimary\"]`)))\r\n    // Wait for the main page to load until the Upload button is present\r\n    await driver.wait(until.elementLocated(By.name(`Upload`)));\r\n    await driver.takeScreenshot();\r\n     //await click(By.css(`[aria-label=\"Commands\"]`));\r\n     //await driver.takeScreenshot();\r\n   // await click(By.css(`[name=\"Upload\"] > [data-automationid=\"splitbuttonprimary\"]`));\r\n    // Take a screenshot before uploading file\r\n \r\n    // Click Upload > Files\r\n    await click(By.name(`Upload`));\r\n    await driver.takeScreenshot();\r\n    await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n    // Locate the file input element\r\n    await driver.takeScreenshot();\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(myFilePath);\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"`+fileName+`\")]`)));\r\n    markers.stop('Upload File');\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n\r\n    \r\n}\r\nasync function findElementWithText(text) {\r\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\n\r\n",
            "desiredStatusCode": "403",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3753741"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3753741"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3753741"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3753741"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3753741"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3753741"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-02-13 04:53:12",
            "modifiedDate": "2023-07-21 07:25:40",
            "createdBy": "Deleted User",
            "modifiedBy": "Amey Anil Desai (Amey.A.Desai1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3486000,
            "testName": "SharePoint_FileUpload_Graph_Cert",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://spaces.aexp.com/teams/Sathiya",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n \r\nconst clientId = credentials.get('SPOCertClientID');        // Azure Application (client) ID\r\nconst tenantId = credentials.get('SPOCertTenantID');        // Azure Directory (tenant) ID\r\nconst thumbprint = credentials.get('SPOCertThumbPrint')     // Certificate thumbprint\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey = `b33d5fa6460774896b191a09a3348bad:4294d24658941cd8da440e5acb8b47b9cf9762ee67d697337eeabc5a429454f268fa654c218d674140df3a506c9b232205710819414ac1753b8933e21cc17a2ad4a6d1ee52dd43c49325b4d26e4d91110655b18bb5ec170d6807badcb5b179a167ed0b35d94df7a8bcde36b70e859ceedb096190bbcb2608ccab149e94fd4843838680c06874706ab3945a83eaed5740134104c40179693e46a6287610b94a0b645dada98b95efa281f5a750224dbda470968c44ce2b9a986b71d1f8eb59b8353464224516234e724843b59a862d605bca042af0e7469578aa105da46b54bbbf8e3585daf694cd94e503a18b0913882179a43c047025b060628235f4b721c26dd5d1ee3725442c46c093448ce2d5173cde6f1ea3eaa4c6d7f65b59905282114cc1904c0b98d6b4dc7fd55219f920df6778d3e4f82ed04602e001501335743b15f9b2ed6ee46c1a9a12ee7f25c9b448bfaff3dc1f10e334360cb6acf5dd36f06863cdf8b99fa50c3132042f6d71336cdf39e3e57389bf22c89dc611fe10120073d35bf982d4ea2dc2bea4b9396678ac9df2a9a1fb560904f46e331005164087be6a8f84ae02461d739969980b73c3b8e1cc6e646455f441313386372e80ca5fbbf416ce16b49a00701191b7555f4c41422dff415572de7ae008f3e2e040ec7068fab5b12342433ed831603692adebeefe69fc42a366a775183c8e5e8e16928aac1427ece1f2103855fa8b625a66867c84a4a98e978b2ff4ce72eeda04868aff0b62ed07cb81f8b59a6745902d6f18722f771ecb1b8b64a6516c6408aae170192c8ebf89a9b055d4b2660550028f7286785a3bf74537c2747ec0d7d2264af7dfe8aa1b48591bcc42fac2e930b3e140396de9d082e99175577e73b2a7440d3c19a4ced9f6a3cf47493434fc1c6bdca538c0c828c918fbb9045eea55fe69c00baa635d5a978672c1bdc7c5381aad795d2a8c67dfcacd5c8b2e5d1045d55e2f54e9d4f57db93e47f4df38fcb76768291a0a73275cecc68c4aea010f49ff7a7cb3e3bf5916dcc2b4c266da50319865902720963867ebe2ec947df0c43c8e2db3e02cc6866f33829e6b4c72a72ff7f7a9041c7ff01221e3042eefb5a26fe98c3d989cdac430e0c65c4246053229e07978ab208d521358e244b72ddd9dac6516968f89563d1ff169bb44a92ad73465e6bbb3d2db8357f52c6283d7b40ede91ae9998d53e35dc1d10d99808776e1a829e841a7e1bb9fbce83626669434f61cb1362e0b5d00a7f47594ec52ee712c35acc5c5e1e6abd4312c444ff12e9ddc09707f168f474c83684f89de4ab41a53a18f2018179c28eddf965d63c896a2b498a84eb6fb70f662bc822c4ab52204a2e49609288858fb8055ef9f9f9f1d04d10bb231c2a541b0f8ec7a2c090e0193108126055a524e28ba872b5314e080ad2d83d5fa29ea1669ee610b86630681b995ae8e83a69c8bd2d6449782ddc38c6f73e6e4b1b7b5d2fe95c86b52bd5db5ddeccc2008e7609256b35f65ccc3857d1c8c17b0e9f51b67b03c981e7c8248a02d87504aceb9002f4e171ef9a81689b89192ec95bc11abc617836c7d5df5b817e80918ae857a0b2d24bf21e423eedb3d5297ce5f5141e27a8f75680a9bd1c5bfb88718443aefbac9e979f6557a31d2d62c08c60ada13583592f3d8f79edbb1e42d50725dfed1cbb213263df4042a2fda6972982dcf6afb5fadcccd7d160854a26a54bd586c219548b15eeff1a3fde28eca157d1e100397332a2046489457f24a293cb3b4568034c8df3c72a174b7c649acd8188c2337214b39295d3c7aa8fbc0481ef3f9d53791bdab9827838e3450e8dea222420179c08a39629f8889f0758279340a9555c566174a295c5f2a14b2f85deb9fc46bc86829b96984c9ed70a0a6d6578a938aa9adf41c5da2b97eaf0c1569d88c665345ecb8b2338314fb3e8062f769e7ecdb03fb5cd2c6f8da63663eeb8e34949247e2e08ab8e7757ee4a7f98fc5128c366d1b35c46d1e715be80a7d465fe6bd0567d0f392a5d77df0c9d390735bc56f5572a2a891d1d0cd054221c41da7bcc56a0c9415a9dcbe366a4a39ac23ac7298310e441a4d473eef448d2a5c090dcc35c1ba00c3085e0eb425a132a5ced8d7df4c796e4fe5b05cac3f2c9e1ae0a37048bcf40b4d8c5b4abefabb01bde380601e7733c9aa5cf9fae2c5a555e00d7a3df00529a29075e3c02468823591cd9dc12db43586d1c386a0d75b54c57f95486aad260245bf0b2ead02f8f67d8a2820c579a90dc6836d17b4e96ed4d73cf6a62cd732b89b5458103507d03b4257a71fe3dbf36d65a04f69dd2e96fe7d25a5787abe0ee63c1ffa1ae83670ce7cdb71421473f6a8b40b545`;\r\nconst filename=`${Math.random().toString(16).slice(2)}.txt`;\r\nconst strSiteURL=`https://graph.microsoft.com/v1.0/sites/fe708ee7-0850-4f2f-a64a-cafb060b1036/drive/items/root:/${filename}:/Content`; //fe708ee7-0850-4f2f-a64a-cafb060b1036 is siteid of target site\r\nconst passphrase = credentials.get('key-tEyes-SharePoint-OneDrive');\r\nconst privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\n// Base 64 encoded version of 'AmericanExpress' repeated 60 times, once per new line.\r\nconst strTextToUpload = 'QW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5\\\r\nFeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWV\\\r\nyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXN\\\r\nzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV\\\r\n4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJ\\\r\npY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3M\\\r\nKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXh\\\r\nwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcml\\\r\njYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwp\\\r\nBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHB\\\r\nyZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWN\\\r\nhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkF\\\r\ntZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJlc3MKQW1lcmljYW5FeHByZXNzCkFtZXJpY2FuRXhwcmVzcwpBbWVyaWNhbkV4cHJ\\\r\nlc3M=';\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    // Generate Signed JWT\r\n    let signed_jwt = await generateSignedJWT();\r\n    \r\n    //Fetch the Access token from the OAuth service\r\n    let accessToken = await getOAUTHToken(signed_jwt);\r\n\r\n    // Load page\r\n    markers.start('SharepointFileUpload');\r\n    let resp=await fetch(strSiteURL,{\r\n        method:'PUT',\r\n        headers: {\r\n            'Content-Type': 'text/plain',\r\n            'Content-Encoding': 'base64',\r\n            'authorization':accessToken,\r\n        },\r\n        body: strTextToUpload}); //file content\r\n    if (resp.status != 201) { throw new Error(`Received:${resp.status}:${resp.statusText}`); }\r\n    if (resp.status == 201) { \r\n        markers.set(`SUCCESS:${resp.status}:${resp.statusText}`);\r\n        console.log(await resp.text()); }\r\n    markers.stop('SharepointFileUpload');\r\n\r\n};\r\n\r\nasync function getOAUTHToken(_strSignedJWT){\r\n    markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n        \"redirect_uri\": \"http://localhost/\",\r\n        \"grant_type\": \"client_credentials\",\r\n        \"client_id\": clientId,\r\n        \"scope\": \"https://graph.microsoft.com/.default\",\r\n        \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n        \"client_assertion\": _strSignedJWT\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n            'Authorization': 'Bearer ' + _strSignedJWT\r\n        },\r\n        body: formBody\r\n    }\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n        const oauthErrorResponseText = await oauthResponse.text();\r\n        throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    const strAccessToken = responseJson.access_token;\r\n    console.log(strAccessToken)\r\n    markers.stop('RetrieveAccessToken');\r\n    return strAccessToken;\r\n}\r\n\r\nfunction generateSignedJWT() {\r\n    // Construct the signed JWT\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey })\r\n    return (jwt_tosign + \".\" + base64Url(signature))\r\n\r\n    function base64Url(data) {\r\n        return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n    }\r\n\r\n    function hexStringTo64(data) {\r\n        return Buffer.from(data, \"hex\").toString('base64');\r\n    }\r\n\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':');\r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    \r\n    deciphered += decipher.final(\"utf8\");\r\n    \r\n    return deciphered;\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "SharePointFileUpload via Graph Api",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3486000"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3486000"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3486000"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3486000"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3486000"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-07 16:50:06",
            "modifiedDate": "2023-10-31 12:19:52",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "modifiedBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1943701,
            "testName": "Slack Login + Post Msg GUR",
            "type": "web-transactions",
            "interval": 900,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 23,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "//modified on 10-8-21 removing http authentication settings and \r\n//uncommented the okta login lines.\r\nimport { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n  \r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n \r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1920,\r\n    height: 1080 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(650);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.150 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login + Post Msg",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1943701"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1943701"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1943701"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1943701"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1943701"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1943701"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-02 03:20:24",
            "modifiedDate": "2023-10-05 21:40:59",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1930264,
            "testName": "Slack Login + Post Msg SIN/SYD",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 1,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 25,
            "httpTimeLimit": 14,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "//modified on 10-8-21 removing http authentication settings and \r\n//uncommented the okta login lines.\r\nimport { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.sleep(5000);\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1920,\r\n    height: 1080 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.150 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "Slack Login + Post Msg",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1930264"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1930264"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1930264"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1930264"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1930264"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1930264"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2021-03-02 03:12:53",
            "modifiedDate": "2024-01-02 22:22:30",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 1930254,
            "testName": "Slack Login + Post Msg US/BTN",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 52,
            "targetTime": 25,
            "httpTimeLimit": 6,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "//modified on 10-8-21 removing http authentication settings and \r\n//uncommented the okta login lines.\r\nimport { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.sleep(5000);\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1920,\r\n    height: 1080 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.150 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login + Post Msg",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1930254"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1930254"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1930254"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1930254"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1930254"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1930254"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-07 16:52:10",
            "modifiedDate": "2023-12-21 14:38:45",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1943705,
            "testName": "Slack Login + Post Thread GUR",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01NQ7ABQF7",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 120,
            "targetTime": 25,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.Teyes.slack.prod",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions  } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    \r\n    await driver.get('https://app.slack.com/client/T4RJGGUJV/G01NQ7ABQF7');\r\n\r\n    // Start Login\r\n    markers.start('Slack Login');\r\n\r\n    await typeText('aexp-hr', By.id(`domain`));\r\n\r\n    // Click on 'Continue'\r\n\tawait click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n    // Click on 'Sign in with Okta'\r\n\tawait click(By.id(`enterprise_member_guest_account_signin_link`));\r\n\r\n    await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n    \r\n    // Click on 'Next'\r\n\tawait click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n    await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n    \r\n    // Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n    // Click on 'Sign In' to login\r\n\tawait click(By.id(`okta-signin-submit`));\r\n    \r\n    // Stop Login\r\n    markers.stop('Slack Login');\r\n\r\n    //Slack Loads\r\n    markers.start('Slack Loading')    \r\n\r\n\r\n    // Click on 'Test' Post\r\n\t//await click(By.css(`#\\\\31 613691830\\\\.156500 .p-rich_text_section:nth-child(1)`));\r\n    await click(By.css(`#\\\\31 614264262\\\\.003200 .p-rich_text_section:nth-child(1)`));\r\n\r\n    //Slack Loads\r\n    markers.stop('Slack Loading')\r\n    \r\n    // Take Snapshot\r\n    await driver.takeScreenshot();   \r\n\r\n    // Post Thread\r\n    markers.start('Post Thread')    \r\n \r\n    // Click Thread Icon\r\n    //await click(By.css(`.c-icon--comment-alt`));\r\n    await click(By.css(`.c-icon--comment-alt`));\r\n    // Click in Text Box\r\n    await click(By.css(`[aria-label=\"Reply\\\\2026\"] > p`));\r\n    // Type Message\r\n    await typeText('Thread Test', By.css(`[aria-label=\"Reply\\\\2026\"] > p`));\r\n    // Click Post Button\r\n    await click(By.css(`.p-threads_footer__input [aria-label=\"Send message\"] > .c-icon`));\r\n\r\n    await driver.takeScreenshot();\r\n    markers.stop('Post Thread')\r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().window().setRect({ \r\n        width: 1200, \r\n        height: 908\r\n    });\r\n    await driver.manage().setTimeouts({\r\n        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login + Post Thread",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1943705"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1943705"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1943705"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1943705"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1943705"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1943705"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-02 17:12:25",
            "modifiedDate": "2023-08-01 16:28:25",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1931736,
            "testName": "Slack Login + Post Thread SIN/SYD",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01NQ7ABQF7",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 120,
            "targetTime": 25,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.Teyes.slack.prod",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions  } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    \r\n    await driver.get('https://app.slack.com/client/T4RJGGUJV/G01NQ7ABQF7');\r\n\r\n    // Start Login\r\n    markers.start('Slack Login');\r\n\r\n    await typeText('aexp-hr', By.id(`domain`));\r\n\r\n    // Click on 'Continue'\r\n\tawait click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n    // Click on 'Sign in with Okta'\r\n\tawait click(By.id(`enterprise_member_guest_account_signin_link`));\r\n\r\n    await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n    \r\n    // Click on 'Next'\r\n\tawait click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n    await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n    \r\n    // Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n    // Click on 'Sign In' to login\r\n\tawait click(By.id(`okta-signin-submit`));\r\n    \r\n    // Stop Login\r\n    markers.stop('Slack Login');\r\n\r\n    //Slack Loads\r\n    markers.start('Slack Loading')    \r\n\r\n\r\n    // Click on 'Test' Post\r\n\t//await click(By.css(`#\\\\31 613691830\\\\.156500 .p-rich_text_section:nth-child(1)`));\r\n    await click(By.css(`#\\\\31 614264262\\\\.003200 .p-rich_text_section:nth-child(1)`));\r\n\r\n    //Slack Loads\r\n    markers.stop('Slack Loading')\r\n    \r\n    // Take Snapshot\r\n    await driver.takeScreenshot();   \r\n\r\n    // Post Thread\r\n    markers.start('Post Thread')    \r\n \r\n    // Click Thread Icon\r\n    //await click(By.css(`.c-icon--comment-alt`));\r\n    await click(By.css(`.c-icon--comment-alt`));\r\n    // Click in Text Box\r\n    await click(By.css(`[aria-label=\"Reply\\\\2026\"] > p`));\r\n    // Type Message\r\n    await typeText('Thread Test', By.css(`[aria-label=\"Reply\\\\2026\"] > p`));\r\n    // Click Post Button\r\n    await click(By.css(`.p-threads_footer__input [aria-label=\"Send message\"] > .c-icon`));\r\n\r\n    await driver.takeScreenshot();\r\n    markers.stop('Post Thread')\r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().window().setRect({ \r\n        width: 1200, \r\n        height: 908\r\n    });\r\n    await driver.manage().setTimeouts({\r\n        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login + Post Thread",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1931736"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1931736"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1931736"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1931736"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1931736"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1931736"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-03-02 17:13:35",
            "modifiedDate": "2023-08-01 16:27:59",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1931741,
            "testName": "Slack Login + Post Thread US/BTN",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01NQ7ABQF7",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 90,
            "targetTime": 25,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.Teyes.slack.prod",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions  } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    \r\n    await driver.get('https://app.slack.com/client/T4RJGGUJV/G01NQ7ABQF7');\r\n\r\n    // Start Login\r\n    markers.start('Slack Login');\r\n\r\n    await typeText('aexp-hr', By.id(`domain`));\r\n\r\n    // Click on 'Continue'\r\n\tawait click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n    // Click on 'Sign in with Okta'\r\n\tawait click(By.id(`enterprise_member_guest_account_signin_link`));\r\n\r\n    await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n    \r\n    // Click on 'Next'\r\n\tawait click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n    await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n    \r\n    // Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n    // Click on 'Sign In' to login\r\n\tawait click(By.id(`okta-signin-submit`));\r\n    \r\n    // Stop Login\r\n    markers.stop('Slack Login');\r\n\r\n    //Slack Loads\r\n    markers.start('Slack Loading')    \r\n\r\n\r\n    // Click on 'Test' Post\r\n\t//await click(By.css(`#\\\\31 613691830\\\\.156500 .p-rich_text_section:nth-child(1)`));\r\n    await click(By.css(`#\\\\31 614264262\\\\.003200 .p-rich_text_section:nth-child(1)`));\r\n\r\n    //Slack Loads\r\n    markers.stop('Slack Loading')\r\n    \r\n    // Take Snapshot\r\n    await driver.takeScreenshot();   \r\n\r\n    // Post Thread\r\n    markers.start('Post Thread')    \r\n \r\n    // Click Thread Icon\r\n    //await click(By.css(`.c-icon--comment-alt`));\r\n    await click(By.css(`.c-icon--comment-alt`));\r\n    // Click in Text Box\r\n    await click(By.css(`[aria-label=\"Reply\\\\2026\"] > p`));\r\n    // Type Message\r\n    await typeText('Thread Test', By.css(`[aria-label=\"Reply\\\\2026\"] > p`));\r\n    // Click Post Button\r\n    await click(By.css(`.p-threads_footer__input [aria-label=\"Send message\"] > .c-icon`));\r\n\r\n    await driver.takeScreenshot();\r\n    markers.stop('Post Thread')\r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().window().setRect({ \r\n        width: 1200, \r\n        height: 908\r\n    });\r\n    await driver.manage().setTimeouts({\r\n        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login + Post Thread",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1931741"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1931741"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1931741"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1931741"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1931741"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1931741"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-04-05 16:38:30",
            "modifiedDate": "2024-01-09 16:50:34",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 2781905,
            "testName": "Slack Login + Upload File GUR",
            "type": "web-transactions",
            "interval": 900,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 25,
            "httpTimeLimit": 17,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, uploads } from 'thousandeyes';\r\n\r\nconst strSlackURL = 'https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    const strMyFilePath = await uploads.generateRandomTextFile(1024);\r\n    const strFilename = strMyFilePath.split('/').pop();\r\n\r\n    await configureDriver();\r\n    \r\n    //Load slack Login Page \r\n    await driver.get(strSlackURL);\r\n\r\n    // Login to OKTA\r\n    await loginToOkta();\r\n  \r\n    //Start Slack Loads\r\n    markers.start('Slack Loading');\r\n        //File Upload\r\n        //Click Attachments & Shortcuts\r\n        //Click Upload from your computer\r\n        await click(By.css(`[aria-label=\"Attach\"]`));\r\n        await click(By.css('[aria-label=\"Last item in group attach, Upload from your computer\"]')) \r\n    markers.stop('Slack Loading');\r\n\r\n    // Send the file path to the input element\r\n    await typeText(strMyFilePath,By.xpath(`//input[@type='file']`));\r\n\r\n    // Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n\t// Start Upload File\r\n\tmarkers.start('Upload File');\r\n\t// Click send Message\r\n\tawait click(By.css('[aria-label=\"Send now\"]'));\r\n\t\r\n\t// var strUploadingXPath = `//div[@class=\"p-workspace__primary_view\"]//div[@class=\"c-files_container\"]//span[text()=\"${strFilename}\"]`;\r\n    \r\n\tlet attempts = 0;\r\n\twhile (true) {\r\n\t\ttry {\r\n\t\t\t// await driver.findElement(By.xpath(strUploadingXPath));\r\n            // await driver.wait(until.elementLocated(By.xpath(strUploadingXPath)), 3000);\r\n            const fileElements = await driver.findElements(By.css('span[data-qa=\"file_name\"]'));\r\n\r\n            // Iterate over each element to find the desired file\r\n            for (const element of fileElements) {\r\n                const fileName = await element.getText();\r\n  \r\n                if (fileName === strFilename) {\r\n                break;\r\n                }\r\n            }\r\n\t\t\tbreak; // file found, break the loop\r\n\t\t} catch (e) {\r\n\t\t\tif (attempts === 60) { // or however many attempts you want to make\r\n\t\t\t\tthrow e; // file not found within the attempts, throw the error\r\n\t\t\t}\r\n\t\t\t// await new Promise(resolve => setTimeout(resolve, 1000)); // wait for a second before trying again\r\n\t\t\tattempts++;\r\n\t\t}\r\n\t}\r\n\t\r\n\tmarkers.stop('Upload File');\r\n    // await driver.sleep(5000);\r\n    await driver.takeScreenshot();\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1920,\r\n    height: 1080 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function loginToOkta(){\r\n    markers.start('Slack Login');\r\n        //Type in Workspace Name\r\n        //Click 'Continue'\r\n        //Click 'Sign in with Okta'\r\n        await typeText('aexp-hr', By.id(`domain`));\r\n        await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n        await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n        //Enter Username and Pwd\r\n        //Click 'Next'\r\n        //Click on 'Sign In' to Login\r\n        await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n        await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n        await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n        await click(By.id(`okta-signin-submit`));\r\n        // Take Snapshot\r\n        await driver.takeScreenshot(); \r\n    markers.stop('Slack Login');\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.150 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login + Upload File GUR",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2781905"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2781905"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2781905"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2781905"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2781905"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2781905"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-04-05 16:46:12",
            "modifiedDate": "2024-01-09 16:50:46",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 2781921,
            "testName": "Slack Login + Upload File SIN/SYD",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 80,
            "targetTime": 25,
            "httpTimeLimit": 15,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, uploads } from 'thousandeyes';\r\n\r\nconst strSlackURL = 'https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    const strMyFilePath = await uploads.generateRandomTextFile(1024);\r\n    const strFilename = strMyFilePath.split('/').pop();\r\n\r\n    await configureDriver();\r\n    \r\n    //Load slack Login Page \r\n    await driver.get(strSlackURL);\r\n\r\n    // Login to OKTA\r\n    await loginToOkta();\r\n  \r\n    //Start Slack Loads\r\n    markers.start('Slack Loading');\r\n        //File Upload\r\n        //Click Attachments & Shortcuts\r\n        //Click Upload from your computer\r\n        await click(By.css(`[aria-label=\"Attach\"]`));\r\n        await click(By.css('[aria-label=\"Last item in group attach, Upload from your computer\"]')) \r\n    markers.stop('Slack Loading');\r\n\r\n    // Send the file path to the input element\r\n    await typeText(strMyFilePath,By.xpath(`//input[@type='file']`));\r\n\r\n    // Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n\t// Start Upload File\r\n\tmarkers.start('Upload File');\r\n\t// Click send Message\r\n\tawait click(By.css('[aria-label=\"Send now\"]'));\r\n\t\r\n\t// var strUploadingXPath = `//div[@class=\"p-workspace__primary_view\"]//div[@class=\"c-files_container\"]//span[text()=\"${strFilename}\"]`;\r\n    \r\n\tlet attempts = 0;\r\n\twhile (true) {\r\n\t\ttry {\r\n\t\t\t// await driver.findElement(By.xpath(strUploadingXPath));\r\n            // await driver.wait(until.elementLocated(By.xpath(strUploadingXPath)), 3000);\r\n            const fileElements = await driver.findElements(By.css('span[data-qa=\"file_name\"]'));\r\n\r\n            // Iterate over each element to find the desired file\r\n            for (const element of fileElements) {\r\n                const fileName = await element.getText();\r\n  \r\n                if (fileName === strFilename) {\r\n                break;\r\n                }\r\n            }\r\n\t\t\tbreak; // file found, break the loop\r\n\t\t} catch (e) {\r\n\t\t\tif (attempts === 60) { // or however many attempts you want to make\r\n\t\t\t\tthrow e; // file not found within the attempts, throw the error\r\n\t\t\t}\r\n\t\t\t// await new Promise(resolve => setTimeout(resolve, 1000)); // wait for a second before trying again\r\n\t\t\tattempts++;\r\n\t\t}\r\n\t}\r\n\t\r\n\tmarkers.stop('Upload File');\r\n    // await driver.sleep(5000);\r\n    await driver.takeScreenshot();\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1920,\r\n    height: 1080 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function loginToOkta(){\r\n    markers.start('Slack Login');\r\n        //Type in Workspace Name\r\n        //Click 'Continue'\r\n        //Click 'Sign in with Okta'\r\n        await typeText('aexp-hr', By.id(`domain`));\r\n        await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n        await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n        //Enter Username and Pwd\r\n        //Click 'Next'\r\n        //Click on 'Sign In' to Login\r\n        await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n        await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n        await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n        await click(By.id(`okta-signin-submit`));\r\n        // Take Snapshot\r\n        await driver.takeScreenshot(); \r\n    markers.stop('Slack Login');\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.150 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login + Upload File SIN/SYD",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2781921"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2781921"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2781921"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2781921"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2781921"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2781921"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-03-27 04:30:05",
            "modifiedDate": "2024-01-09 16:50:19",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 2676739,
            "testName": "Slack Login + Upload File US/BTN",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 141,
            "targetTime": 25,
            "httpTimeLimit": 15,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, uploads } from 'thousandeyes';\r\n\r\nconst strSlackURL = 'https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    const strMyFilePath = await uploads.generateRandomTextFile(1024);\r\n    const strFilename = strMyFilePath.split('/').pop();\r\n\r\n    await configureDriver();\r\n    \r\n    //Load slack Login Page \r\n    await driver.get(strSlackURL);\r\n\r\n    // Login to OKTA\r\n    await loginToOkta();\r\n  \r\n    //Start Slack Loads\r\n    markers.start('Slack Loading');\r\n        //File Upload\r\n        //Click Attachments & Shortcuts\r\n        //Click Upload from your computer\r\n        await click(By.css(`[aria-label=\"Attach\"]`));\r\n        await click(By.css('[aria-label=\"Last item in group attach, Upload from your computer\"]')) \r\n    markers.stop('Slack Loading');\r\n\r\n    // Send the file path to the input element\r\n    await typeText(strMyFilePath,By.xpath(`//input[@type='file']`));\r\n\r\n    // Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n\t// Start Upload File\r\n\tmarkers.start('Upload File');\r\n\t// Click send Message\r\n\tawait click(By.css('[aria-label=\"Send now\"]'));\r\n\t\r\n\t// var strUploadingXPath = `//div[@class=\"p-workspace__primary_view\"]//div[@class=\"c-files_container\"]//span[text()=\"${strFilename}\"]`;\r\n    \r\n\tlet attempts = 0;\r\n\twhile (true) {\r\n\t\ttry {\r\n\t\t\t// await driver.findElement(By.xpath(strUploadingXPath));\r\n            // await driver.wait(until.elementLocated(By.xpath(strUploadingXPath)), 3000);\r\n            const fileElements = await driver.findElements(By.css('span[data-qa=\"file_name\"]'));\r\n\r\n            // Iterate over each element to find the desired file\r\n            for (const element of fileElements) {\r\n                const fileName = await element.getText();\r\n  \r\n                if (fileName === strFilename) {\r\n                break;\r\n                }\r\n            }\r\n\t\t\tbreak; // file found, break the loop\r\n\t\t} catch (e) {\r\n\t\t\tif (attempts === 60) { // or however many attempts you want to make\r\n\t\t\t\tthrow e; // file not found within the attempts, throw the error\r\n\t\t\t}\r\n\t\t\t// await new Promise(resolve => setTimeout(resolve, 1000)); // wait for a second before trying again\r\n\t\t\tattempts++;\r\n\t\t}\r\n\t}\r\n\t\r\n\tmarkers.stop('Upload File');\r\n    // await driver.sleep(5000);\r\n    await driver.takeScreenshot();\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1920,\r\n    height: 1080 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function loginToOkta(){\r\n    markers.start('Slack Login');\r\n        //Type in Workspace Name\r\n        //Click 'Continue'\r\n        //Click 'Sign in with Okta'\r\n        await typeText('aexp-hr', By.id(`domain`));\r\n        await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n        await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n        //Enter Username and Pwd\r\n        //Click 'Next'\r\n        //Click on 'Sign In' to Login\r\n        await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n        await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n        await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n        await click(By.id(`okta-signin-submit`));\r\n        // Take Snapshot\r\n        await driver.takeScreenshot(); \r\n    markers.stop('Slack Login');\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.150 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login + Upload File US/BTN",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2676739"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2676739"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2676739"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2676739"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2676739"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2676739"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-23 23:10:48",
            "modifiedDate": "2023-08-01 16:29:21",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1916542,
            "testName": "Slack Login +Switch Channel + Download File SIN/SYD",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://aexp-hr.slack.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 120,
            "targetTime": 25,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.Teyes.slack.prod",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    await configureDriver();\r\n\r\n    await driver.get('https://aexp-hr.slack.com');\r\n\r\n    // Click on 'Sign in with Okta'\r\n    await driver.takeScreenshot();\r\n    markers.start('Slack Sign On')\r\n\r\n\tawait click(By.id(`enterprise_member_guest_account_signin_link`));\r\n\r\n    await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n    // Click on 'Next'\r\n\tawait click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n    await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n    // Click on Sign In\r\n    await driver.takeScreenshot();\r\n\r\n    await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n    // Make driver sleep for 5 seconds\r\n    await driver.sleep(5000);\r\n    await driver.takeScreenshot();\r\n    markers.stop('Slack Sign On')\r\n\r\n    markers.start('Switch Channel')\r\n    // Click on 'Channels'\r\n\t//await click(By.css(`[data-qa-channel-sidebar-section-heading=\"channels\"]`));\r\n\tawait click(By.css(`[data-qa=\"channel_sidebar_name_teyes-test\"]`));\r\n\r\n\r\n    //await click(By.xpath(`/html/body/div[2]/div/div[1]/div[4]/button/div/span`));\r\n    //await click(By.xpath(`/html/body/div[7]/div/div/div/div/div/div/div[10]/button/div`));\r\n\r\n    // Make driver sleep for 5 seconds\r\n    await driver.sleep(5000);\r\n    await driver.takeScreenshot();\r\n    markers.stop('Switch Channel')\r\n\r\n    // Click the File and Click Download Icon\r\n    markers.start('Download File')\r\n    await click(By.css(`div:nth-child(1) > pre`));\r\n\r\n    await click(By.css(`.c-icon--cloud-download`));\r\n\r\n    await driver.takeScreenshot();\r\n    markers.stop('Download File')\r\n\r\n\r\n\r\n\r\n\t//await click(By.css(`#menu-103-9 > .c-menu_item__label`));\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().window().setRect({\r\n        width: 1200,\r\n        height: 908\r\n    });\r\n    await driver.manage().setTimeouts({\r\n        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login +Switch Channel + Download File",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1916542"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1916542"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1916542"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1916542"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1916542"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1916542"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-18 23:18:00",
            "modifiedDate": "2023-08-01 16:28:55",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 1906307,
            "testName": "Slack Login +Switch Channel + Download File US/BTN",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://aexp-hr.slack.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 120,
            "targetTime": 25,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.Teyes.slack.prod",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    await configureDriver();\r\n\r\n    await driver.get('https://aexp-hr.slack.com');\r\n\r\n    // Click on 'Sign in with Okta'\r\n    await driver.takeScreenshot();\r\n    markers.start('Slack Sign On')\r\n\r\n\tawait click(By.id(`enterprise_member_guest_account_signin_link`));\r\n\r\n    await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n    // Click on 'Next'\r\n\tawait click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n    await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n    // Click on Sign In\r\n    await driver.takeScreenshot();\r\n\r\n    await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n    // Make driver sleep for 5 seconds\r\n    await driver.sleep(5000);\r\n    await driver.takeScreenshot();\r\n    markers.stop('Slack Sign On')\r\n\r\n    markers.start('Switch Channel')\r\n    // Click on 'Channels'\r\n\t//await click(By.css(`[data-qa-channel-sidebar-section-heading=\"channels\"]`));\r\n\tawait click(By.css(`[data-qa=\"channel_sidebar_name_teyes-test\"]`));\r\n\r\n\r\n    //await click(By.xpath(`/html/body/div[2]/div/div[1]/div[4]/button/div/span`));\r\n    //await click(By.xpath(`/html/body/div[7]/div/div/div/div/div/div/div[10]/button/div`));\r\n\r\n    // Make driver sleep for 5 seconds\r\n    await driver.sleep(5000);\r\n    await driver.takeScreenshot();\r\n    markers.stop('Switch Channel')\r\n\r\n    // Click the File and Click Download Icon\r\n    markers.start('Download File')\r\n    await click(By.css(`div:nth-child(1) > pre`));\r\n\r\n    await click(By.css(`.c-icon--cloud-download`));\r\n\r\n    await driver.takeScreenshot();\r\n    markers.stop('Download File')\r\n\r\n\r\n\r\n\r\n\t//await click(By.css(`#menu-103-9 > .c-menu_item__label`));\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().window().setRect({\r\n        width: 1200,\r\n        height: 908\r\n    });\r\n    await driver.manage().setTimeouts({\r\n        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "Slack Login +Switch Channel + Download File",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1906307"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1906307"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1906307"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1906307"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1906307"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1906307"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-07-04 08:30:29",
            "modifiedDate": "2024-01-02 14:26:59",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 0,
            "testId": 3834272,
            "testName": "Smart Buy",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://axpgsmsne3.service-now.com/axp",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 105,
            "targetTime": 14,
            "httpTimeLimit": 10,
            "httpTargetTime": 2000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n\r\n  await click(By.id(`okta-signin-username`));\r\n\r\n  await typeText('svc.sn_thous_eyes_e3', By.id(`okta-signin-username`));\r\n\r\n  await click(By.id(`okta-signin-password`));\r\n\r\n  await typeText(credentials.get('Smart_Buy_PW'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  // Click on 'Sign In'\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  markers.stop('Login');\r\n  // Click on 'Approved Third Party List'\r\n\r\n  markers.start('Approved Third Party List');\r\n  await click(By.css(`.col-sm-4:nth-child(1) .name`));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Approved Third Party List');\r\n  // Click on 'S'\r\n\r\n  markers.start('Logout');\r\n  await click(By.css(`.avatar-new [aria-label=\"svc.sn_thous_eyes_e3\"]`));\r\n\r\n  // Click on 'Logout'\r\n  await click(By.css(`.dropdown-menu > li:nth-child(2) > a`));\r\n  \r\n markers.stop('Logout');\r\n await driver.takeScreenshot();\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3834272"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3834272"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3834272"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3834272"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3834272"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3834272"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-07-12 12:26:14",
            "modifiedDate": "2023-07-18 06:03:11",
            "createdBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "modifiedBy": "Amey Anil Desai (Amey.A.Desai1@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3852551,
            "testName": "Test- Graphcert-Sathiya",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://drive.aexp.com/personal/sathiya_kamalanathan1_aexp_com/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n\r\nconst clientId = credentials.get('SPOCertClientID');        // Azure Application (client) ID\r\nconst tenantId = credentials.get('SPOCertTenantID');        // Azure Directory (tenant) ID\r\nconst thumbprint = credentials.get('SPOCertThumbPrint')     // Certificate thumbprint\r\n\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey=`b33d5fa6460774896b191a09a3348bad:4294d24658941cd8da440e5acb8b47b9cf9762ee67d697337eeabc5a429454f268fa654c218d674140df3a506c9b232205710819414ac1753b8933e21cc17a2ad4a6d1ee52dd43c49325b4d26e4d91110655b18bb5ec170d6807badcb5b179a167ed0b35d94df7a8bcde36b70e859ceedb096190bbcb2608ccab149e94fd4843838680c06874706ab3945a83eaed5740134104c40179693e46a6287610b94a0b645dada98b95efa281f5a750224dbda470968c44ce2b9a986b71d1f8eb59b8353464224516234e724843b59a862d605bca042af0e7469578aa105da46b54bbbf8e3585daf694cd94e503a18b0913882179a43c047025b060628235f4b721c26dd5d1ee3725442c46c093448ce2d5173cde6f1ea3eaa4c6d7f65b59905282114cc1904c0b98d6b4dc7fd55219f920df6778d3e4f82ed04602e001501335743b15f9b2ed6ee46c1a9a12ee7f25c9b448bfaff3dc1f10e334360cb6acf5dd36f06863cdf8b99fa50c3132042f6d71336cdf39e3e57389bf22c89dc611fe10120073d35bf982d4ea2dc2bea4b9396678ac9df2a9a1fb560904f46e331005164087be6a8f84ae02461d739969980b73c3b8e1cc6e646455f441313386372e80ca5fbbf416ce16b49a00701191b7555f4c41422dff415572de7ae008f3e2e040ec7068fab5b12342433ed831603692adebeefe69fc42a366a775183c8e5e8e16928aac1427ece1f2103855fa8b625a66867c84a4a98e978b2ff4ce72eeda04868aff0b62ed07cb81f8b59a6745902d6f18722f771ecb1b8b64a6516c6408aae170192c8ebf89a9b055d4b2660550028f7286785a3bf74537c2747ec0d7d2264af7dfe8aa1b48591bcc42fac2e930b3e140396de9d082e99175577e73b2a7440d3c19a4ced9f6a3cf47493434fc1c6bdca538c0c828c918fbb9045eea55fe69c00baa635d5a978672c1bdc7c5381aad795d2a8c67dfcacd5c8b2e5d1045d55e2f54e9d4f57db93e47f4df38fcb76768291a0a73275cecc68c4aea010f49ff7a7cb3e3bf5916dcc2b4c266da50319865902720963867ebe2ec947df0c43c8e2db3e02cc6866f33829e6b4c72a72ff7f7a9041c7ff01221e3042eefb5a26fe98c3d989cdac430e0c65c4246053229e07978ab208d521358e244b72ddd9dac6516968f89563d1ff169bb44a92ad73465e6bbb3d2db8357f52c6283d7b40ede91ae9998d53e35dc1d10d99808776e1a829e841a7e1bb9fbce83626669434f61cb1362e0b5d00a7f47594ec52ee712c35acc5c5e1e6abd4312c444ff12e9ddc09707f168f474c83684f89de4ab41a53a18f2018179c28eddf965d63c896a2b498a84eb6fb70f662bc822c4ab52204a2e49609288858fb8055ef9f9f9f1d04d10bb231c2a541b0f8ec7a2c090e0193108126055a524e28ba872b5314e080ad2d83d5fa29ea1669ee610b86630681b995ae8e83a69c8bd2d6449782ddc38c6f73e6e4b1b7b5d2fe95c86b52bd5db5ddeccc2008e7609256b35f65ccc3857d1c8c17b0e9f51b67b03c981e7c8248a02d87504aceb9002f4e171ef9a81689b89192ec95bc11abc617836c7d5df5b817e80918ae857a0b2d24bf21e423eedb3d5297ce5f5141e27a8f75680a9bd1c5bfb88718443aefbac9e979f6557a31d2d62c08c60ada13583592f3d8f79edbb1e42d50725dfed1cbb213263df4042a2fda6972982dcf6afb5fadcccd7d160854a26a54bd586c219548b15eeff1a3fde28eca157d1e100397332a2046489457f24a293cb3b4568034c8df3c72a174b7c649acd8188c2337214b39295d3c7aa8fbc0481ef3f9d53791bdab9827838e3450e8dea222420179c08a39629f8889f0758279340a9555c566174a295c5f2a14b2f85deb9fc46bc86829b96984c9ed70a0a6d6578a938aa9adf41c5da2b97eaf0c1569d88c665345ecb8b2338314fb3e8062f769e7ecdb03fb5cd2c6f8da63663eeb8e34949247e2e08ab8e7757ee4a7f98fc5128c366d1b35c46d1e715be80a7d465fe6bd0567d0f392a5d77df0c9d390735bc56f5572a2a891d1d0cd054221c41da7bcc56a0c9415a9dcbe366a4a39ac23ac7298310e441a4d473eef448d2a5c090dcc35c1ba00c3085e0eb425a132a5ced8d7df4c796e4fe5b05cac3f2c9e1ae0a37048bcf40b4d8c5b4abefabb01bde380601e7733c9aa5cf9fae2c5a555e00d7a3df00529a29075e3c02468823591cd9dc12db43586d1c386a0d75b54c57f95486aad260245bf0b2ead02f8f67d8a2820c579a90dc6836d17b4e96ed4d73cf6a62cd732b89b5458103507d03b4257a71fe3dbf36d65a04f69dd2e96fe7d25a5787abe0ee63c1ffa1ae83670ce7cdb71421473f6a8b40b545`;\r\nconst strSiteURL = 'https://graph.microsoft.com/v1.0/users/ae1c0d3b-5b5a-46ce-b1d3-73f04f89a95c/drive/items/900d9974-5b1f-472c-b10a-4d2521617cc2/Content'; //ae1c0d3b-5b5a-46ce-b1d3-73f04f89a95c is userid of Sathiya\r\nconst passphrase = credentials.get('key-tEyes-SharePoint-OneDrive');\r\nconst privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    // Generate Signed JWT\r\n    let signed_jwt = await generateSignedJWT();\r\n    \r\n    //Fetch the Access token from the OAuth service\r\n    let accessToken = await getOAUTHToken(signed_jwt);\r\n\r\n\r\n    // Download Content\r\n    markers.start('DownloadOneDriveContent');\r\n        let resp = await fetch(strSiteURL, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': accessToken\r\n            }\r\n        });\r\n    if (resp.status != 200) { throw new Error(`Received:${resp.status}:${resp.statusText}`); }\r\n    if (resp.status == 200) { \r\n        markers.set(`SUCCESS:${resp.status}:${resp.statusText}`);\r\n        console.log(await resp.text()); }\r\n    markers.stop('DownloadOneDriveContent');\r\n\r\n};\r\n\r\nasync function getOAUTHToken(_strSignedJWT){\r\n    markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n        \"redirect_uri\": \"http://localhost/\",\r\n        \"grant_type\": \"client_credentials\",\r\n        \"client_id\": clientId,\r\n        \"scope\": \"https://graph.microsoft.com/.default\",\r\n        \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n        \"client_assertion\": _strSignedJWT\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n            'Authorization': 'Bearer ' + _strSignedJWT\r\n        },\r\n        body: formBody\r\n    }\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n        const oauthErrorResponseText = await oauthResponse.text();\r\n        throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    const strAccessToken = responseJson.access_token;\r\n    console.log(strAccessToken)\r\n    markers.stop('RetrieveAccessToken');\r\n    return strAccessToken;\r\n}\r\n\r\nfunction generateSignedJWT() {\r\n    // Construct the signed JWT\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey })\r\n    return (jwt_tosign + \".\" + base64Url(signature))\r\n\r\n    function base64Url(data) {\r\n        return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n    }\r\n\r\n    function hexStringTo64(data) {\r\n        return Buffer.from(data, \"hex\").toString('base64');\r\n    }\r\n\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':');\r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    \r\n    deciphered += decipher.final(\"utf8\");\r\n    \r\n    return deciphered;\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3852551"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3852551"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3852551"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3852551"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3852551"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3852551"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-07-17 15:18:07",
            "modifiedDate": "2023-07-24 19:03:53",
            "createdBy": "Roy Seidler-Brennan (William.R.SeidlerBrennan1@aexp.com)",
            "modifiedBy": "Roy Seidler-Brennan (William.R.SeidlerBrennan1@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 3868110,
            "testName": "Test-Email -RT-Graph Using Certificate",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 0,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 55,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "\r\nimport { driver, markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n\r\n// Change this to true should you wish to log more detail on the processing of this script. *** Unique Markers will Increase ***\r\nconst boolLogAsMarkers = false;\r\n\r\nconst clientId = 'aee91fd6-14b9-4f78-8c37-038f1b163366';        // Azure Application (client) ID\r\nconst tenantId = '66295b3b-c4fd-41af-a077-c0ec2a40e369';        // Azure Directory (tenant) ID\r\nconst thumbprint = '8a84c2fe64b89b91c52d8cfba1615ebf1d24f995'   // Certificate thumbprint\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey = `e8e50928063ce0252b910ff86090d33c:a25f1fcd6ee0c6c6747db63154bde1d47e483c54f5160df0a93240e6e6584701d6ca8444eb04852937ba4769fa08d1cdc813a386ff8ed503f5faee949dddc79cc55966fe007e397cf97ee08e4048711d57f7f1bfc68f2c286836fe4652fac834e1d9f346a2e6f6a551de78d2090f78389d312433f75913c3ddef346ef8c32b80fd5ddf1bd768314dc4ffdfc7002813659ae95e90269bd9bd001c000d4d5cd306240945fd4569f148d065e1086d57a237181cedab35e003ad352c4d7eb2268e5441269f8cdc540d4fe609d8f07526a468345ada66634a40162ebd537f0339d0bc134c118b50f222e0124c2114eaa8dc49a647bce8cd3e731300f3c6948ba31c6943375c04cb36071b7b9963b21c19693ee194a734d942cc05096bb93d3f9b3c8e6b57e663a90cafcbb116f63b3afd7f37ee1180f415a9c6d7b5a33a70ca6537de460abdb6cab38fde58d18e1d43906c93bbecf36ed6058ef39a05a1c4346fc09f6d01c6a737376d98bdaff0bbb488082adb4e2c051a307edfbdee2f8be1e13a133fc610aab3a0a1cccd7957270e7fd3541dc4d03f8b607503f0ab1b859a48060d1ae33773749e2c1290e02f8d16c5307169b018c3680810160fcaf76764b0e12774e032e74cda3aeec02bbba33703b176c38f440c5d73c95938161727856d459761c781df63aca5604389191dac8d8090dde34b07f20fccb0ec99db18fde7c5be131894e8966467ff5393c32f044d8428ecaff29f03dfef2a19d0ce18e54072a156d9de59785889d57720c9a83bbbef0d0fb2c27f7c3734552b37e0f3cae27c220d2a109aa456cb136b03a96781fde3931d18d21304071d31945252d799015a6f15aeac6efe9999b3833aa01194d59a2e8cfd5b3b2b6be1e3493df663edf2b6511eb647e04085f13505c1ea667af37a1ee013417b71aaae4b7273826bbd08e90210183117eadce05cd5a52a2c979ebecfa0f1ec156984d3073ab98632bae8d03c103b9d03e5a411dcf063041e2c8314fcd39e4471a5460417bf1eb922f0881b4cda575ab0eb28ba766615883b109c06a55d5e08dcdedaec15cb206873360e781095e5bfcc86aa1f93d66119a6a72fa92b98caf8d68fa78290bc2ca01f5f4c7baab59fdb1b1df825cf537dd59e3db0d4fd1cf3fb43e87faabc9ed4e6281cddbb6dad964e81085ba9dd3c38b79635afb515c48890a850f539c195b3a5931997f2993f547f5a653fe8ad1de971c534722c3953c29fcbd89e235751682e3267f37ba513d1cb0eafe02d977e4fffe9aad93ab8efe31dfd8c7f414eb5456bb681b82ee8039554a30375e6deb714572774148a46f31911f7b84a442699907b2c559d6cef3c37201e11ab9eab8eecf1a247155e0ca07f1402f22a84506bd39844f980e3c982ee88f12f7fa484830486e310325fe385ee76155394f422f6faf4f379776ea6aa49ef08c6f04b027dc0a1441013950c63fb9de86eb6d0228c3b0017c1ae5c585d069b54f4dad5f5f36338eb38d9000f5b187d0d56caa020d7f9dca9397448e2b8c79f498f4ecb1fcf64eba467eb54553f1d39d6c343c8695e5030c94e4891d2536eda266ef099d4ebad7bd838382f6a29da43b1b51413c07498a1ad8835d180b97aacd3ee43c9d7fc45285e65bbd3058519da4979731ef60f91b519139645f5ce7a7d9b516de2c8a8e935e631ba2a3f7ee3fb96a938ca66d13581ed5a8b80fe57a51f95940f99cbfdfa1d1a6911cab5150c8865199d1de2f61ef649ae4ea527b115440f0a5b460d24019d2efa26675be5c1c61c0d76cd37f92871743adeb812ae1cda1f12a3011404eda261b2c32ab3247b71074244465597dcb00b5dab53fc694b41b863fcd20aa4ec1cda55fcd01b4091a9ecbdf3fb6f715873703eaa39924b9356f13aedafd9db2d4665ba5f3c0e7895b58c0f0a96318b38a9f8830232e99584a5000a7eded5c70a9cd65a48cbd496ce931a9ccf5d8ed8007394f26d41d2c7e631461e308d5c3fde503afa655c743ae579d5ede16554fa668df9f625e8a5c9e795a890aba945b90363550931dc0add9a762a781b13cd7fd28a91f6448c216c83bd11918d243aa72ee96c5773a96eb54ff4cfe5cbd906b3690c225b51ca89bf7d31200cf37f7f54dc6a31d4186c016d220fa959972e4bf0b125d695019b35dadb6bd938072bcc5355cb02981f162fa75021a26e8df772b1ff8fa31e665510e18637eaa4a1d733d641b5da23eb4b43347bc0c4f1f9051b9d4dcb452588bbe17651735e6199c6fd6aa7ec8bc6f626beb1519870ac414a748e7c4439124fa809aa58ecc837289b8a20d26eb89a2e97c1ecc1dcfe2bdac5e5878cfd6629ce7d87ad94481415da111a2457ae54406bfbcd580b4f55671abf5c770b62a5d8e98e464b912d0a785841216eb4a4016751c3fe`;\r\nconst strUserPrincipal = `svc.thouseyeexo@aexp.com`;\r\nconst strCustomInboxFolder = 'GraphRoundTrip';\r\nconst intSecondsToWaittoFindMessage = 20;\r\nconst strToAddress365 = 'roundtrip@roundtrip.aexp.com';\r\nconst strGraphBaseURL = `https://graph.microsoft.com/v1.0`;\r\nconst dtDateSent = `GraphAPI-RoundTrip CreateDateTime:` + Date.now();\r\nvar strSendEmailURL = `${strGraphBaseURL}/users/${strUserPrincipal}/sendMail`;\r\nvar strFindEmailURL = `${strGraphBaseURL}/users/${strUserPrincipal}/mailFolders/{strFolderID}/messages?$format=json&$search=\"subject:${dtDateSent}\"&select=subject,toRecipients`;\r\nvar strFindEmailFolderID = `${strGraphBaseURL}/users/${strUserPrincipal}/mailFolders?filter=displayname eq '${strCustomInboxFolder}'`;\r\nvar strError = '';\r\nvar jsonEmailMessage = {\r\n  message: {\r\n    subject: dtDateSent,\r\n    body: {\r\n      contentType: 'Text',\r\n      content: dtDateSent\r\n    },\r\n    toRecipients: [\r\n      {\r\n        emailAddress: {\r\n          address: strToAddress365\r\n        }\r\n      }\r\n    ],\r\n    from: {\r\n      emailAddress: {\r\n        address: strUserPrincipal\r\n      }\r\n    }\r\n  },\r\n  saveToSentItems: 'true'\r\n};\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  const passphrase = credentials.get('key_EXOMSGBLUECERT23');\r\n  const privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\n  // Construct the signed JWT\r\n  let current_time = Math.floor(new Date().getTime() / 1000);\r\n  let nbf_time = current_time - 1;\r\n  let exp_time = current_time + (5 * 60);\r\n\r\n  let jwt_header = base64Url(JSON.stringify({\r\n    \"typ\": \"JWT\",\r\n    \"alg\": \"RS256\",\r\n    \"x5t\": hexStringTo64(thumbprint)\r\n  }));\r\n  let jwt_payload = base64Url(JSON.stringify({\r\n    \"iss\": clientId,\r\n    \"sub\": clientId,\r\n    \"aud\": oauthUrl,\r\n    \"exp\": exp_time,\r\n    \"nbf\": nbf_time\r\n  }));\r\n  let jwt_tosign = (jwt_header + \".\" + jwt_payload);\r\n  let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey });\r\n  let signed_jwt = (jwt_tosign + \".\" + base64Url(signature));\r\n\r\n  // Fetch the Access token from the OAuth service\r\n  markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n      \"redirect_uri\": \"http://localhost/\",\r\n      \"grant_type\": \"client_credentials\",\r\n      \"client_id\": clientId,\r\n      \"scope\": \"https://graph.microsoft.com/.default\",\r\n      \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n      \"client_assertion\": signed_jwt,\r\n      \"response_type\": \"code\"\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n        'Authorization': 'Bearer ' + signed_jwt\r\n      },\r\n      body: formBody\r\n    };\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n      const oauthErrorResponseText = await oauthResponse.text();\r\n      strError = (`RetrieveAccessToken:: ERROR: Subject:\"${dtDateSent}\" ${oauthResponse.status} ${oauthResponse.statusText} \\n ${oauthErrorResponseText} Test Un-Successful`).replace(/\\./g, ` `);\r\n      markers.set(strError);\r\n      throw new Error(strError);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    consoleLog(`OAuthResponse:: ${JSON.stringify(responseJson)}`);\r\n    const accessToken = responseJson.access_token;\r\n    consoleLog('AccessToken: ' + accessToken);\r\n  markers.stop('RetrieveAccessToken');\r\n\r\n  consoleLog(`runScript:: Enter()`);\r\n\r\n  consoleLog(`SendMessage:: Sending Message with subject \"${dtDateSent}\"`);\r\n  consoleLog(`SendMessage:: Sending JSON Message Payload \"${JSON.stringify(jsonEmailMessage)}\"`);\r\n  consoleLog(`SendMessage:: Posting Message with URL \"${strSendEmailURL}\"`);\r\n  markers.start(`SendMessage:: Sending Message`);\r\n  let objResult = await fetch(strSendEmailURL, {\r\n    method: 'POST',\r\n    body: JSON.stringify(jsonEmailMessage),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': accessToken\r\n    }\r\n  });\r\n\r\n  if (objResult.status == 202) {\r\n    markers.stop(`SendMessage:: Sending Message`);\r\n    consoleLog(`SendMessage:: Email Successfully Sent\"`);\r\n    markers.start(`FindMessage:: Finding Message`);\r\n    // Find the ID for the GraphRoundTrip folder\r\n    objResult = await fetch(strFindEmailFolderID, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'authorization': accessToken,\r\n        'Prefer': `IdType=\"ImmutableId\"`\r\n      }\r\n    });\r\n    let arrFolders = await JSON.parse(await objResult.text());\r\n    let strFolderID = arrFolders[\"value\"][0].id;\r\n    // Find Sent Email\r\n    consoleLog(`FindMessage:: Finding Message with Subject \"${dtDateSent}\"`);\r\n    strFindEmailURL = strFindEmailURL.replace(`{strFolderID}`, strFolderID);\r\n\r\n    let arrFindMessage = [];\r\n\r\n    for (let i = 0; i < intSecondsToWaittoFindMessage; i++) {\r\n      objResult = await fetch(strFindEmailURL, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': accessToken,\r\n          'Prefer': `IdType=\"ImmutableId\"`\r\n        }\r\n      });\r\n      arrFindMessage = await JSON.parse(await objResult.text());\r\n      if (objResult.status == 200) {\r\n        if ((arrFindMessage.value).length > 0) {\r\n          await consoleLog(`FindMessage:: ${dtDateSent} == ${arrFindMessage.value[0].subject}.  Test Successful`);\r\n          markers.stop(`FindMessage:: Finding Message`);\r\n          return true;\r\n        }\r\n      }\r\n      else {\r\n        strError = (`FindMessage:: Error: Subject:\"${dtDateSent}\" ${arrFindMessage.error.code}:${arrFindMessage.error.message}  Test Un-Successful`).replace(/\\./g, ` `);\r\n        await consoleLog(strError);\r\n        markers.set(strError);\r\n        throw new Error(strError);\r\n      }\r\n      await consoleLog(`FindMessage:: Sleeping for 1000ms.  Round ${i}/${intSecondsToWaittoFindMessage}`);\r\n      await sleep(1000);\r\n    }\r\n    //If we reach here we have not found the message, thus throw error\r\n    strError = (`FindMessage:: Error: Could not find Subject:\"${dtDateSent}\" after ${intSecondsToWaittoFindMessage} seconds Test Un-Successful`).replace(/\\./g, ` `);\r\n    await consoleLog(strError);\r\n    markers.set(strError);\r\n    throw new Error(strError);\r\n  }\r\n  else {\r\n    strError = (`SendMessage:: Error: Could not send Subject:\"${dtDateSent}\" ${objResult.status}:${objResult.statusText}  Test Un-Successful`).replace(/\\./g, ` `);\r\n    markers.set(strError);\r\n    await consoleLog(strError);\r\n    throw new Error(strError);\r\n  }\r\n};\r\n\r\nfunction base64Url(data) {\r\n  return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n}\r\n\r\nfunction hexStringTo64(data) {\r\n  return Buffer.from(data, \"hex\").toString('base64');\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n  var key = Buffer.from(pass, \"utf8\");\r\n  var components = encKey.split(':');\r\n  var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n  var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n  var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n  deciphered += decipher.final(\"utf8\");\r\n\r\n  return deciphered;\r\n}\r\n\r\n/**\r\n * @param {string} strLogString\r\n */\r\nasync function consoleLog(strLogString) {\r\n  var m = new Date();\r\n  var dateString =\r\n    m.getUTCFullYear() + \"/\" +\r\n    (\"0\" + (m.getUTCMonth() + 1)).slice(-2) + \"/\" +\r\n    (\"0\" + m.getUTCDate()).slice(-2) + \" \" +\r\n    (\"0\" + m.getUTCHours()).slice(-2) + \":\" +\r\n    (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" +\r\n    (\"0\" + m.getUTCSeconds()).slice(-2) + \":\" +\r\n    (\"0\" + m.getUTCMilliseconds());\r\n  console.log(`${dateString}: ${strLogString}`);\r\n  if (typeof boolLogAsMarkers !== 'undefined') {\r\n    if (boolLogAsMarkers) {\r\n      markers.set(strLogString.replace(/\\./g, ` `));\r\n    }\r\n  }\r\n}\r\n/**\r\n * @param {number} ms\r\n */\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "script to test new blue cert.",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3868110"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3868110"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3868110"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3868110"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3868110"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-22 21:03:53",
            "modifiedDate": "2024-01-09 16:03:15",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "modifiedBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2345242,
            "testName": "Webex amex.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 1800,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n    await driver.get(settings.url);\r\n    await authenticateToOKTA();\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n    await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n    //Locate iframe\r\n    let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n    if (intThinIFrames == 0) {\r\n      markers.stop('1- Clicking \"Start a Meeting\"');\r\n      markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n      markers.set('Taking thiniframes=0 ScreenShot');\r\n      await driver.takeScreenshot();\r\n      //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n      let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start\")]');\r\n      markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n      if (intStartMeetingPage > 0) {\r\n        markers.start('2: Clicking \"Start a Meeting\"');\r\n        await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n        await driver.takeScreenshot();\r\n        await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n        markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n      }\r\n    }\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try { markers.stop('1- Clicking \"Start\"'); } catch { };\r\n  try { markers.stop('2- Clicking \"Start\"'); } catch { };\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n    sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n      click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2345242"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2345242"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2345242"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2345242"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2345242"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2345242"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-22 21:06:32",
            "modifiedDate": "2023-10-29 04:58:14",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "modifiedBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2345254,
            "testName": "Webex amexame.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amexame.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n    await driver.get(settings.url);\r\n    await authenticateToOKTA();\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n    await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n    //Locate iframe\r\n    let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n    if (intThinIFrames == 0) {\r\n      markers.stop('1- Clicking \"Start\"');\r\n      markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n      markers.set('Taking thiniframes=0 ScreenShot');\r\n      await driver.takeScreenshot();\r\n      //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n      let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start\")]');\r\n      markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n      if (intStartMeetingPage > 0) {\r\n        markers.start('2: Clicking \"Start a Meeting\"');\r\n        await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n        await driver.takeScreenshot();\r\n        await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n        markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n      }\r\n    }\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try { markers.stop('1- Clicking \"Start\"'); } catch { };\r\n  try { markers.stop('2- Clicking \"Start\"'); } catch { };\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n    sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n      click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2345254"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2345254"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2345254"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2345254"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2345254"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2345254"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-22 21:16:23",
            "modifiedDate": "2023-10-29 04:58:05",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "modifiedBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 0,
            "savedEvent": 0,
            "testId": 2345298,
            "testName": "Webex amexstream.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amexstream.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 1,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n    await driver.get(settings.url);\r\n    await authenticateToOKTA();\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n    await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n    //Locate iframe\r\n    let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n    if (intThinIFrames == 0) {\r\n      markers.stop('1- Clicking \"Start a Meeting\"');\r\n      markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n      markers.set('Taking thiniframes=0 ScreenShot');\r\n      await driver.takeScreenshot();\r\n      //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n      let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start\")]');\r\n      markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n      if (intStartMeetingPage > 0) {\r\n        markers.start('2: Clicking \"Start a Meeting\"');\r\n        await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start\")]`))));\r\n        await driver.takeScreenshot();\r\n        await click(By.xpath(`//button[contains(.,\"Start\")]`));\r\n        markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n      }\r\n    }\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try { markers.stop('1- Clicking \"Start\"'); } catch { };\r\n  try { markers.stop('2- Clicking \"Start\"'); } catch { };\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n    sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n      click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "description": "",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2345298"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2345298"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2345298"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2345298"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2345298"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2345298"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-01-28 15:40:00",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2552342,
            "testName": "011022 - Higher Txn Time - vendor.68441de1.js",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 41,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\nimport assert from 'assert';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n  const settings = test.getSettings();\n\n  // Starting Login\n  markers.start('SignOn');\n\n  await driver.get(settings.url);\n\n  // Click on 'Sign In'\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\n  // commented out line 20 on 6-29-21 and replaced with line 22\n  await click(By.css(`#guest_signin_split_button-action > span`));\n\n  //Okta\n  await click(By.id(`okta-signin-username`));\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\n  await click(By.id(`okta-signin-password`));\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\n  \n  await driver.takeScreenshot();\n  \n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\n\n  await driver.sleep(5000);\n  markers.stop('SignOn');\n  await driver.takeScreenshot();\n\n\n  markers.start('Connect to Personal Room');\n    // Start meeting\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\n\n    // Load/join meeting\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\n    await driver.takeScreenshot();\n\n  markers.stop('Connect to Personal Room');\n}\n\nasync function configureDriver() {\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  await driver.findElement(selector).\n  sendKeys(value);\n}\n\nasync function deleteText(value, selector) {\n  await simulateHumanDelay();\n  await driver.findElement(selector).\n  sendKeys(value);\n}\n\nasync function pressDelete(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.DELETE);\n}\n\nasync function pressEnter(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.RETURN);\n}\n\nasync function arrowDown(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.ARROW_DOWN);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}\n\nasync function switchToNextTab(backupTabId) {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\n  return driver.switchTo().window(nextTabId);\n}\nasync function switchToPrevTab(backupTabId) {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\n  return driver.switchTo().window(nextTabId);\n}\n\nasync function getBackupTabId() {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await driver.getAllWindowHandles();\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\n}\n\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\n  const allTabIds = await driver.getAllWindowHandles();\n  return allTabIds.filter(tabId => tabId !== backupTabId);\n}\n\nasync function moveMouseInto(element) {\n  await driver.actions({ bridge: true }).\n  move({ x: -1, y: 0, origin: element }).\n  move({ x: 1, y: 0, origin: element }).\n  perform();\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2552342"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2552342"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2552342"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2552342"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2552342"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2552342"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-01-21 15:28:04",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2541720,
            "testName": "012122 - GSP_PaperlessBilling_US - No SSL Verify",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://central1218.intra.aexp.com/wsp/IAC-US",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.gsp.te",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, test, credentials, markers } from 'thousandeyes';\nimport assert from 'assert'\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    const settings = test.getSettings()\n    await driver.get(settings.url);\n\n    await AccountSearch(credentials.get('GSP_AccountNo_US_Platinum'));\n\n    markers.start(\"Home Page\")\n    await AccountValidation({\n        pin: credentials.get('GSP_Platinum_CID')\n    })\n    markers.stop(\"Home Page\")\n\n    await PaperlessBilling();\n\n    await Exit();\n    \n}\n\nasync function configureDriver() {\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function selectOption(selectSelector, optionSelector) {\n    await simulateHumanDelay();\n    await driver.sleep(3000);\n    await driver.findElement(selectSelector)\n                .findElement(optionSelector)\n                .click();\n}\n\nasync function AccountSearch(accountNumber) {\n    try {\n        // Click on 'New +'\n        await click(By.css(`[data-test-id=\"2018022014244307453262\"]`));\n\n        // Click on 'Account Search'\n        await click(By.css(`[href=\"#\"] [data-click=\"..\"]`));\n        await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n        \n        await click(By.id(`AccountNumber`));\n        await typeText(accountNumber, By.id(`AccountNumber`));\n        \n        markers.start('Account Search')\n        await click(By.css(`.field-item > img`));\n        markers.stop('Account Search')\n    } catch {\n        markers.set(\"Account Search Error\")\n    }\n}\n\nasync function AccountValidation(methods){\n    try {\n        if (methods.pin){\n            //Pin Validation\n            await typeText(methods.pin, By.id(`Answer`));\n            await click(By.css(`[data-test-id=\"2016041422102307961039\"] [data-click=\"....\"]`));\n\n        } else if (methods.noCaller) {\n            //Select No Caller\n            await selectOption(By.id(`SelectedCallerText`), By.css(`[value=\"NOCALL-No Caller\"]`));\n        }\n    } catch {\n        markers.set(\"Account Validation Error\")\n    }\n}\n\nasync function PaperlessBilling(){\n\n // Click on 'Hub Menu'\n await click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n\n // Search Box\n await click(By.id(`CPMTaskSearchInput`));\n //Enter Demand Name\n await typeText('Paperless Billing', By.id(`CPMTaskSearchInput`));\n\n //Human Delay\n await driver.sleep(650);\n\n markers.start(\"Paperless Billing\");\n await click(By.css(\".oflowDivM > div[onclick^='javascript: startTaskFromTakeActionMenu']\"));\n \n await driver.switchTo().defaultContent()\n await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n markers.stop(\"Paperless Billing\");\n\n  // Click on 'Enroll For MYCA'\n  await click(By.css(`[data-test-id=\"201604142212370207109547\"]`));\n\n}\n\nasync function Exit() {\n    // Click on 'Finished with Account'\n\tawait click(By.css(`[data-dblclick=\"....\"]`));\n    \n    await driver.switchTo().defaultContent()\n\n    // Click on 'Username'\n\tawait click(By.css(`[data-test-id=\"20160418232711043014163\"]`));\n\n    // Click on 'Logout'\n\tawait click(By.css(`[role=\"presentation\"]:nth-child(2) [data-click=\"..\"]`));\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2541720"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2541720"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2541720"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2541720"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2541720"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2541720"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-01-28 15:22:10",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2552300,
            "testName": "012822 - GSO4 - Webex Test - Successful",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 41,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\nimport assert from 'assert';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n  const settings = test.getSettings();\n\n  // Starting Login\n  markers.start('SignOn');\n\n  await driver.get(settings.url);\n\n  // Click on 'Sign In'\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\n  // commented out line 20 on 6-29-21 and replaced with line 22\n  await click(By.css(`#guest_signin_split_button-action > span`));\n\n  //Okta\n  await click(By.id(`okta-signin-username`));\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\n  await click(By.id(`okta-signin-password`));\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\n  \n  await driver.takeScreenshot();\n  \n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\n\n  await driver.sleep(5000);\n  markers.stop('SignOn');\n  await driver.takeScreenshot();\n\n\n  markers.start('Connect to Personal Room');\n    // Start meeting\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\n\n    // Load/join meeting\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\n    await driver.takeScreenshot();\n\n  markers.stop('Connect to Personal Room');\n}\n\nasync function configureDriver() {\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  await driver.findElement(selector).\n  sendKeys(value);\n}\n\nasync function deleteText(value, selector) {\n  await simulateHumanDelay();\n  await driver.findElement(selector).\n  sendKeys(value);\n}\n\nasync function pressDelete(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.DELETE);\n}\n\nasync function pressEnter(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.RETURN);\n}\n\nasync function arrowDown(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.ARROW_DOWN);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}\n\nasync function switchToNextTab(backupTabId) {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\n  return driver.switchTo().window(nextTabId);\n}\nasync function switchToPrevTab(backupTabId) {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\n  return driver.switchTo().window(nextTabId);\n}\n\nasync function getBackupTabId() {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await driver.getAllWindowHandles();\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\n}\n\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\n  const allTabIds = await driver.getAllWindowHandles();\n  return allTabIds.filter(tabId => tabId !== backupTabId);\n}\n\nasync function moveMouseInto(element) {\n  await driver.actions({ bridge: true }).\n  move({ x: -1, y: 0, origin: element }).\n  move({ x: 1, y: 0, origin: element }).\n  perform();\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2552300"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2552300"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2552300"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2552300"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2552300"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-08-13 18:14:05",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2213846,
            "testName": "080521 - O365 - Messaging delays in auto reply email",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://outlook.office365.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nlet myemail = 'svc.thouseyeexo@aexp.com';\r\n\r\n// DEFINED O365 password and stored in MSGEXO-TE-PWD\r\n\r\nasync function runScript() {\r\n\r\n  // Configure\r\n  await configureDriver();\r\n\r\n  markers.start('Login');\r\n  // Goto outlook.office.com\r\n  await driver.get('https://outlook.office.com');\r\n\r\n  // Enter 'svc.thouseyeexo@aexp.com' service account\r\n  await typeText('svc.thouseyeexo@aexp.com', By.id(`i0116`));\r\n  await click(By.id(`idSIButton9`));\r\n  await typeText('svc.thouseyeexo', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('MSGEXO-TE-PWD'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In'\r\n  await click(By.id(`okta-signin-submit`));\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'No'\r\n  await click(By.id('idBtn_Back'));\r\n  markers.stop('Login');\r\n\r\n  markers.start('Compose Mail');\r\n  //BELOW CODE TO TEST CREATING AND SENDING EMAIL FROM OUTLOOK\r\n  // Click on 'New message'\r\n  await click(By.id(`id__7`));\r\n  await typeText('RoundTrip@Roundtrip.aexp.com', By.xpath(`//input[@aria-label=\"To\"]`));\r\n\r\n  // Type a subject\r\n  let subject = \"Hello \" + Date.now();\r\n  await typeText(subject, By.xpath(`//input[@placeholder=\"Add a subject\"]`));\r\n  await typeText(subject, By.xpath(`//div[@aria-label=\"Message body\"]`));\r\n  markers.stop('Compose Mail');\r\n\r\n  // Click on 'Send', wait for compose window to disappear\r\n  markers.start('Send Mail');\r\n  await click(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n  await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//span[contains(text(),'Select an item to read')]`))));\r\n  markers.stop('Send Mail');\r\n\r\n  markers.start('Verify Mail Sent');\r\n  //THIS CODE WILL SEARCH FOR EMAIL\r\n  // Open 'Sent Items'\r\n  await click(By.xpath(`//span[contains(text(),\"Navigation pane\")]/..//span[contains(text(),\"Sent Items\")]`));\r\n\r\n  // Find the email that was sent\r\n  await findElementWithText(subject);\r\n  await driver.takeScreenshot();\r\n  markers.stop('Verify Mail Sent');\r\n\r\n  //Validate Inbox - take screenshot\r\n  markers.start('Verify Inbox Receipt');\r\n  await driver.sleep(10000);\r\n  await click(By.xpath(`//div[@title=\"Inbox\"]`));\r\n  await findElementWithText(subject);\r\n  await driver.takeScreenshot();\r\n  markers.stop('Verify Inbox Receipt');\r\n\r\n  markers.start('Sign Out');\r\n  // ALL OF THE BELOW IS NEEDED FOR LOGOUT\r\n  // Click on 'Thousand Eyes'\r\n  await click(By.css(`[aria-label=\"Account manager for svc.ThousEyeEXO\"]`));\r\n\r\n  // Wait for sign out link to be visible\r\n  await driver.wait(until.elementLocated(By.id(`mectrl_body_signOut`)));\r\n\r\n  // Click on 'Sign out'\r\n  await click(By.id(`mectrl_body_signOut`));\r\n  await driver.takeScreenshot();\r\n  markers.stop('Sign Out');\r\n\r\n}\r\n\r\n\r\nasync function findElementWithText(text) {\r\n  try {\r\n    await driver.wait(until.elementLocated(By.xpath(`//*[contains(text(),\"${text}\")]`)), 1000);\r\n  }\r\n  catch (e) {\r\n    await driver.navigate().refresh();\r\n    await driver.wait(until.elementLocated(By.xpath(`//*[contains(text(),\"${text}\")]`)), 1000);\r\n  }\r\n}\r\n\r\nasync function clickText(text) {\r\n  await click(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\n\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\n\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n    return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n    return false; // Will throw an error if element is not connected to the document\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2213846"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2213846"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2213846"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2213846"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2213846"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2213846"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-09-29 17:12:12",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2280447,
            "testName": "092921 - DMZ Probes Troubleshooting - Increased Timeout from 60s to 120s - OKTA conn refused",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 120,
            "targetTime": 25,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\n\n  // Start Login\n  markers.start('Slack Login');\n\n  await typeText('aexp-hr', By.id(`domain`));\n\n  // Click on 'Continue'\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\n\n  // Click on 'Sign in with Okta'\n  await click(By.id(`enterprise_member_guest_account_signin_link`));\n  // Take Snapshot\n  await driver.takeScreenshot();\n    //commenting out the Okta login process 9-21 (lines 24,29,31,37)\n  //await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\n \n  // Click on 'Next'\n  //await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n\n  //await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\n\n  // Click on 'Sign In' to login\n  //await click(By.id(`okta-signin-submit`));\n\n  // Stop Login\n  markers.stop('Slack Login');\n\n  //Slack Loads\n  markers.start('Slack Loading');\n  // Take Snapshot\n  //await driver.takeScreenshot();\n\n  //Click in the message box\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n\n  //Type the message and Click Enter to Post Chat\n\n\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\n\n  // Take Snapshot\n  await driver.takeScreenshot();\n  markers.stop('Slack Loading');\n\n  markers.start('Post Chat');\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  await click(By.css('[aria-label=\"Send now\"]'));\n\n  markers.stop('Post Chat');\n\n  //Take Screenshot of Posted Message\n  await driver.takeScreenshot();\n\n}\n\nasync function configureDriver() {\n  await driver.manage().window().setRect({\n    width: 1200,\n    height: 908 });\n\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\n\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  const element = await driver.findElement(selector);\n  await element.clear();\n  await element.sendKeys(value);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2280447"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2280447"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2280447"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2280447"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2280447"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2021-09-29 17:29:16",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2280494,
            "testName": "092921 - TE AK - No Response back from OKTA",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 120,
            "targetTime": 25,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\n\n  // Start Login\n  markers.start('Slack Login');\n\n  await typeText('aexp-hr', By.id(`domain`));\n\n  // Click on 'Continue'\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\n\n  // Click on 'Sign in with Okta'\n  await click(By.id(`enterprise_member_guest_account_signin_link`));\n  // Take Snapshot\n  await driver.takeScreenshot();\n    //commenting out the Okta login process 9-21 (lines 24,29,31,37)\n    //uncommented the OKTA lines 092921 - 1013 MST\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\n \n  // Click on 'Next'\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\n\n  // Click on 'Sign In' to login\n  await click(By.id(`okta-signin-submit`));\n\n  // Stop Login\n  markers.stop('Slack Login');\n\n  //Slack Loads\n  markers.start('Slack Loading');\n  // Take Snapshot\n  //await driver.takeScreenshot();\n\n  //Click in the message box\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n\n  //Type the message and Click Enter to Post Chat\n\n\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\n\n  // Take Snapshot\n  await driver.takeScreenshot();\n  markers.stop('Slack Loading');\n\n  markers.start('Post Chat');\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  await click(By.css('[aria-label=\"Send now\"]'));\n\n  markers.stop('Post Chat');\n\n  //Take Screenshot of Posted Message\n  await driver.takeScreenshot();\n\n}\n\nasync function configureDriver() {\n  await driver.manage().window().setRect({\n    width: 1200,\n    height: 908 });\n\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\n\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  const element = await driver.findElement(selector);\n  await element.clear();\n  await element.sendKeys(value);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2280494"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2280494"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2280494"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2280494"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2280494"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2021-10-11 15:55:39",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2314361,
            "testName": "101121 0855MST - TE AK - 092921 - Ad-Hoc JY-Slack Login + Post Msg US DMZ ENT AGENT PROBES (Oct 11, 2021 15:51 UTC)",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 120,
            "targetTime": 25,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\n\n  // Start Login\n  markers.start('Slack Login');\n\n  await typeText('aexp-hr', By.id(`domain`));\n\n  // Click on 'Continue'\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\n\n  // Click on 'Sign in with Okta'\n  await click(By.id(`enterprise_member_guest_account_signin_link`));\n  \n  // Added screenshot 10-5-21 JY\n  // Take Snapshot\n  await driver.takeScreenshot();\n  //commenting out the Okta login process 9-21 (lines 24,29,31,37)\n  //uncommented the OKTA lines 092921 - 1013 MST\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\n\n  // Click on 'Next'\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\n\n  await driver.takeScreenshot();\n  // Click on 'Sign In' to login\n  await click(By.id(`okta-signin-submit`));\n\n  // Stop Login\n  markers.stop('Slack Login');\n\n  //Slack Loads\n  markers.start('Slack Loading');\n  // Take Snapshot\n  //await driver.takeScreenshot();\n\n  //Click in the message box\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n\n  //Type the message and Click Enter to Post Chat\n\n\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\n\n  // Take Snapshot\n  await driver.takeScreenshot();\n  markers.stop('Slack Loading');\n\n  markers.start('Post Chat');\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  await click(By.css('[aria-label=\"Send now\"]'));\n\n  markers.stop('Post Chat');\n\n  //Take Screenshot of Posted Message\n  await driver.takeScreenshot();\n\n}\n\nasync function configureDriver() {\n  await driver.manage().window().setRect({\n    width: 1200,\n    height: 908 });\n\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\n\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  const element = await driver.findElement(selector);\n  await element.clear();\n  await element.sendKeys(value);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2314361"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2314361"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2314361"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2314361"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2314361"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2021-12-06 16:06:29",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2458960,
            "testName": "120621 - Webex - amexstream - GSO T-Shooting Example",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amexstream.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 35,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n\r\n  await driver.get(settings.url);\r\n\r\n  // Click on 'Sign In'\r\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\r\n  // commented out line 20 on 6-29-21 and replaced with line 22\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  //Okta\r\n  await click(By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.id(`okta-signin-password`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n  \r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n  await driver.sleep(5000);\r\n  markers.stop('SignOn');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n  markers.start('Connect to Personal Room');\r\n    // Start meeting\r\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function deleteText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function pressDelete(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.DELETE);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function arrowDown(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.ARROW_DOWN);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function switchToNextTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\nasync function switchToPrevTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\n\r\nasync function getBackupTabId() {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\r\n}\r\n\r\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== backupTabId);\r\n}\r\n\r\nasync function moveMouseInto(element) {\r\n  await driver.actions({ bridge: true }).\r\n  move({ x: -1, y: 0, origin: element }).\r\n  move({ x: 1, y: 0, origin: element }).\r\n  perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2458960"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2458960"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2458960"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2458960"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2458960"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2458960"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-12-20 16:24:23",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2495461,
            "testName": "122021 - Example for Erro",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amexame.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 40,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n\r\n  await driver.get(settings.url);\r\n\r\n  // Click on 'Sign In'\r\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\r\n  // commented out line 20 on 6-29-21 and replaced with line 22\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  //Okta\r\n  await click(By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.id(`okta-signin-password`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n  \r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n  await driver.sleep(5000);\r\n  markers.stop('SignOn');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n  markers.start('Connect to Personal Room');\r\n    // Start meeting\r\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function deleteText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function pressDelete(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.DELETE);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function arrowDown(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.ARROW_DOWN);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function switchToNextTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\nasync function switchToPrevTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\n\r\nasync function getBackupTabId() {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\r\n}\r\n\r\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== backupTabId);\r\n}\r\n\r\nasync function moveMouseInto(element) {\r\n  await driver.actions({ bridge: true }).\r\n  move({ x: -1, y: 0, origin: element }).\r\n  move({ x: 1, y: 0, origin: element }).\r\n  perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2495461"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2495461"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2495461"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2495461"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2495461"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2495461"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-10-04 04:55:39",
            "createdBy": "Deleted User",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3169103,
            "testName": "[PS] - JC - amex.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\nimport { driver, markers, credentials, test } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n  const settings = test.getSettings();\n\n  // Starting Login\n  markers.start('SignOn');\n  await driver.get(settings.url);\n  // Click on 'Sign In'\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\n  //Okta\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\n  await driver.takeScreenshot();\n\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\n  markers.stop('SignOn');\n  await driver.takeScreenshot();\n\n\n  markers.start('Connect to Personal Room');\n  // Start meeting\n\n  await driver.findElement(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\n  markers.set('ClickingStartaMeeting');\n  markers.set('TakingStartMeetingScreenshot');\n  await driver.takeScreenshot();\n  await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\n\n  //Locate iframe\n  let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\n  markers.set(`thinIframesFound:: ${intThinIFrames}`);\n  if (intThinIFrames == 0) {\n    markers.set('Takingthiniframes0ScreenShot');\n    await driver.takeScreenshot();\n    //Suspecting we are on the main page still.. Will try and click Start a Meeting again\n    let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start a meeting\")]');\n    markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\n    if (intStartMeetingPage > 0) {\n      markers.set('ClickingStartMeetingAgain');\n      await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\n      markers.set('TakingStartMeetingAgainScreenshot');\n      await driver.takeScreenshot();\n      //Reload page if we dont find it then continue\n    }\n  }\n\n  // Load/join meeting\n  await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\n  await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\n  await driver.takeScreenshot();\n\n  markers.stop('Connect to Personal Room');\n}\n\n/**\n* @param {string} _strXPathToFind\n*/\nasync function teHowManyElements(_strXPathToFind) {\n\n  console.log(`teHowManyElements:: Enter()`);\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\n  console.log(`teHowManyElements:: Exit()`);\n  return objElements.length;\n}\n\nasync function configureDriver() {\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\n/**\n* @param {string | number | Promise<string | number>} value\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\n*/\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  await driver.findElement(selector).\n    sendKeys(value);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n  async function attemptToClick() {\n    await driver.findElement(selector).\n      click();\n  }\n}\n\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}\n",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3169103"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3169103"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3169103"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3169103"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3169103"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3169103"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-04-01 14:26:00",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2751475,
            "testName": "Akamai SharePoint Download",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 39,
            "httpTimeLimit": 39,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "username": "svc.spoautomation@aexp.onmicrosoft.com",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, transaction } from 'thousandeyes';\r\nrunScript();\r\nasync function runScript() {\r\n  // Configure\r\n  await configureDriver();\r\n  // Page Load\r\n  markers.start('Page Load');\r\n  // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n  await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n  var actualTitle = await driver.getTitle();\r\n  markers.stop('Page Load');\r\n  \r\n  // Login process\r\n  //credentials.get('SPServiceaccount')\r\n  markers.start('Username');\r\n  await click(By.id(`i0116`));\r\n\r\n  await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n  await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n  // Enter Password\r\n  markers.start('OKTA Login');\r\n  await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id(`okta-signin-submit`));\r\n  markers.stop('OKTA Login');\r\n  markers.start('Shared Documents');\r\n  await click(By.id('idBtn_Back'));\r\n  \r\n  await driver.wait(until.titleContains('Vgadde - Home'));\r\n\r\n\r\n  await driver.get('https://spaces.aexp.com/teams/vgadde/ThousandEyes/download');\r\nawait driver.takeScreenshot();\r\n  await click(By.css(`[aria-label=\"0CdW0MUPUn.txt\"] [data-icon-name=\"StatusCircleCheckmark\"]`));\r\n  \r\n  markers.stop('Shared Documents');\r\n \r\n  // Click on 'Download' and measure download time\r\n  // TODO: replace <your-filename> with the name of the file your downloading; eg. Public Cloud Performance Benchmark Report Final.pdf\r\n  markers.start('Download');\r\n  await click(By.css(`[data-icon-name=\"download\"]`));\r\n  await downloads.waitForDownload('0CdW0MUPUn.txt', 60000);\r\n\r\n  markers.stop('Download');\r\n  await driver.takeScreenshot();\r\n  // Logout\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    //await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n}; \r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1572,\r\n    height: 1133\r\n  });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n} \r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector)\r\n              .sendKeys(value);\r\n} \r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n} \r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n      await driver.findElement(selector)\r\n                  .click().then(null, async function (err) {\r\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\r\n          await driver.findElement(selector)\r\n                      .click();\r\n      });\r\n  }\r\n} \r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n      return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n      return false; // Will throw an error if element is not connected to the document\r\n  }\r\n} \r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n      try {\r\n          numberOfAttempts += 1;\r\n          await attemptActionFn();\r\n      }\r\n      catch (error) {\r\n          attemptError = error;\r\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n          continue; // Attempt failed, reattempt\r\n      }\r\n      attemptError = null;\r\n      break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n      throw attemptError;\r\n  }\r\n} \r\n\r\nasync function rightClick(selector) {\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n} \r\n\r\n",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "desiredStatusCode": "401",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2751475"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2751475"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2751475"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2751475"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2751475"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2751475"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-04-01 14:31:16",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2751536,
            "testName": "Akamai SharePoint Download SIN",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 39,
            "httpTimeLimit": 39,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "username": "svc.spoautomation@aexp.onmicrosoft.com",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, transaction } from 'thousandeyes';\r\nrunScript();\r\nasync function runScript() {\r\n  // Configure\r\n  await configureDriver();\r\n  // Page Load\r\n  markers.start('Page Load');\r\n  // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n  await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n  var actualTitle = await driver.getTitle();\r\n  markers.stop('Page Load');\r\n  \r\n  // Login process\r\n  //credentials.get('SPServiceaccount')\r\n  markers.start('Username');\r\n  await click(By.id(`i0116`));\r\n\r\n  await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n  await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n  // Enter Password\r\n  markers.start('OKTA Login');\r\n  await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id(`okta-signin-submit`));\r\n  markers.stop('OKTA Login');\r\n  markers.start('Shared Documents');\r\n  await click(By.id('idBtn_Back'));\r\n  \r\n  await driver.wait(until.titleContains('Vgadde - Home'));\r\n\r\n\r\n  await driver.get('https://spaces.aexp.com/teams/vgadde/ThousandEyes/download');\r\nawait driver.takeScreenshot();\r\n  await click(By.css(`[aria-label=\"0CdW0MUPUn.txt\"] [data-icon-name=\"StatusCircleCheckmark\"]`));\r\n  \r\n  markers.stop('Shared Documents');\r\n \r\n  // Click on 'Download' and measure download time\r\n  // TODO: replace <your-filename> with the name of the file your downloading; eg. Public Cloud Performance Benchmark Report Final.pdf\r\n  markers.start('Download');\r\n  await click(By.css(`[data-icon-name=\"download\"]`));\r\n  await downloads.waitForDownload('0CdW0MUPUn.txt', 60000);\r\n\r\n  markers.stop('Download');\r\n  await driver.takeScreenshot();\r\n  // Logout\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    //await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n}; \r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1572,\r\n    height: 1133\r\n  });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n} \r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector)\r\n              .sendKeys(value);\r\n} \r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n} \r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n      await driver.findElement(selector)\r\n                  .click().then(null, async function (err) {\r\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\r\n          await driver.findElement(selector)\r\n                      .click();\r\n      });\r\n  }\r\n} \r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n      return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n      return false; // Will throw an error if element is not connected to the document\r\n  }\r\n} \r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n      try {\r\n          numberOfAttempts += 1;\r\n          await attemptActionFn();\r\n      }\r\n      catch (error) {\r\n          attemptError = error;\r\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n          continue; // Attempt failed, reattempt\r\n      }\r\n      attemptError = null;\r\n      break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n      throw attemptError;\r\n  }\r\n} \r\n\r\nasync function rightClick(selector) {\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n} \r\n\r\n",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "desiredStatusCode": "401",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2751536"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2751536"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2751536"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2751536"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2751536"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2751536"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-04-01 14:42:14",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2751658,
            "testName": "Akamai SharePoint Upload BTN",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "username": "svc.spoautomation@aexp.onmicrosoft.com",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nlet fileFolder = 'UC8-Upload';\r\n\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    var myFilePath = await uploads.generateRandomTextFile(1024);\r\n    var fileName = await myFilePath.slice(-14);\r\nawait configureDriver();\r\n // Page Load\r\n    markers.start('Page Load');\r\n    \r\n    // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n    await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n    var actualTitle = await driver.getTitle();\r\n    markers.stop('Page Load');\r\n    markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n\tawait typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    markers.stop('Username');\r\n    markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await click(By.id(`okta-signin-submit`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id('idBtn_Back'));\r\n   markers.stop('OKTA Login');\r\n   markers.start('Shared Documents');\r\n     await driver.takeScreenshot();\r\n   // await click(By.id(`idBtn_Back`));\r\n    await driver.sleep(1000);\r\n  \r\n\r\n    // Wait for backend page to load\r\n    await driver.wait(until.titleContains('Vgadde - Home'));\r\n  \r\n\r\n    // Click on 'Documents'\r\n\tawait click(By.css(`[href=\"/teams/vgadde/ThousandEyes/Forms/AllItems.aspx\"] > .ms-Nav-linkText`));\r\n     markers.stop('Shared Documents');\r\n        // Upload File\r\n    await markers.start('Upload File');\r\n\r\n    // Wait for the main page to load until the Upload button is present\r\n    await driver.wait(until.elementLocated(By.name(`Upload`)));\r\n\r\n    // Take a screenshot before uploading file\r\n    await driver.takeScreenshot();\r\n\r\n    // Click Upload > Files\r\n    await click(By.name(`Upload`));\r\n                  await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n\r\n    // Locate the file input element\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(myFilePath);\r\n\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"`+fileName+`\")]`)));\r\n\r\n    await markers.stop('Upload File');\r\n\r\n   \r\n   \r\n    // Logout\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n\r\n    \r\n}\r\nasync function findElementWithText(text) {\r\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\n\r\n",
            "desiredStatusCode": "401",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2751658"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2751658"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2751658"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2751658"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2751658"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2751658"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-04-01 14:43:39",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2751673,
            "testName": "Akamai SharePoint Upload SIN",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "username": "svc.spoautomation@aexp.onmicrosoft.com",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nlet fileFolder = 'UC8-Upload';\r\n\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    var myFilePath = await uploads.generateRandomTextFile(1024);\r\n    var fileName = await myFilePath.slice(-14);\r\nawait configureDriver();\r\n // Page Load\r\n    markers.start('Page Load');\r\n    \r\n    // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n    await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n    var actualTitle = await driver.getTitle();\r\n    markers.stop('Page Load');\r\n    markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n\tawait typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    markers.stop('Username');\r\n    markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await click(By.id(`okta-signin-submit`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id('idBtn_Back'));\r\n   markers.stop('OKTA Login');\r\n   markers.start('Shared Documents');\r\n     await driver.takeScreenshot();\r\n   // await click(By.id(`idBtn_Back`));\r\n    await driver.sleep(1000);\r\n  \r\n\r\n    // Wait for backend page to load\r\n    await driver.wait(until.titleContains('Vgadde - Home'));\r\n  \r\n\r\n    // Click on 'Documents'\r\n\tawait click(By.css(`[href=\"/teams/vgadde/ThousandEyes/Forms/AllItems.aspx\"] > .ms-Nav-linkText`));\r\n     markers.stop('Shared Documents');\r\n        // Upload File\r\n    await markers.start('Upload File');\r\n\r\n    // Wait for the main page to load until the Upload button is present\r\n    await driver.wait(until.elementLocated(By.name(`Upload`)));\r\n\r\n    // Take a screenshot before uploading file\r\n    await driver.takeScreenshot();\r\n\r\n    // Click Upload > Files\r\n    await click(By.name(`Upload`));\r\n                  await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n\r\n    // Locate the file input element\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(myFilePath);\r\n\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"`+fileName+`\")]`)));\r\n\r\n    await markers.stop('Upload File');\r\n\r\n   \r\n   \r\n    // Logout\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n\r\n    \r\n}\r\nasync function findElementWithText(text) {\r\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\n\r\n",
            "desiredStatusCode": "401",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2751673"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2751673"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2751673"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2751673"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2751673"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2751673"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-04-01 14:44:54",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2751685,
            "testName": "Akamai SharePont Upload SIN",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "username": "svc.spoautomation@aexp.onmicrosoft.com",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nlet fileFolder = 'UC8-Upload';\r\n\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    var myFilePath = await uploads.generateRandomTextFile(1024);\r\n    var fileName = await myFilePath.slice(-14);\r\nawait configureDriver();\r\n // Page Load\r\n    markers.start('Page Load');\r\n    \r\n    // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n    await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n    var actualTitle = await driver.getTitle();\r\n    markers.stop('Page Load');\r\n    markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n\tawait typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    markers.stop('Username');\r\n    markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await click(By.id(`okta-signin-submit`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id('idBtn_Back'));\r\n   markers.stop('OKTA Login');\r\n   markers.start('Shared Documents');\r\n     await driver.takeScreenshot();\r\n   // await click(By.id(`idBtn_Back`));\r\n    await driver.sleep(1000);\r\n  \r\n\r\n    // Wait for backend page to load\r\n    await driver.wait(until.titleContains('Vgadde - Home'));\r\n  \r\n\r\n    // Click on 'Documents'\r\n\tawait click(By.css(`[href=\"/teams/vgadde/ThousandEyes/Forms/AllItems.aspx\"] > .ms-Nav-linkText`));\r\n     markers.stop('Shared Documents');\r\n        // Upload File\r\n    await markers.start('Upload File');\r\n\r\n    // Wait for the main page to load until the Upload button is present\r\n    await driver.wait(until.elementLocated(By.name(`Upload`)));\r\n\r\n    // Take a screenshot before uploading file\r\n    await driver.takeScreenshot();\r\n\r\n    // Click Upload > Files\r\n    await click(By.name(`Upload`));\r\n                  await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n\r\n    // Locate the file input element\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(myFilePath);\r\n\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"`+fileName+`\")]`)));\r\n\r\n    await markers.stop('Upload File');\r\n\r\n   \r\n   \r\n    // Logout\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n\r\n    \r\n}\r\nasync function findElementWithText(text) {\r\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\n\r\n",
            "desiredStatusCode": "401",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2751685"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2751685"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2751685"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2751685"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2751685"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2751685"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-04 22:14:31",
            "createdBy": "Deleted User",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1883102,
            "testName": "Bomgar",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://btcdev.tims.intra.aexp.com/#/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.RUMtest",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers, credentials } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const usernamePwd = credentials.get('usernamePwdTest');\r\n  const url = 'https://' + usernamePwd + '@btcdev.tims.intra.aexp.com/#/';\r\n  await driver.get(url);\r\n\r\n  await driver.sleep(10000);\r\n  await driver.takeScreenshot();\r\n\r\n  await click(By.css(`#chatPanel > img`));\r\n                                 await driver.takeScreenshot();\r\n                                 \r\n                                  // Click on 'Chat with an Engineer'\r\n                                 await click(By.css(`.chatColumns:nth-child(2) > .noLinkDec`));\r\n                                    await driver.sleep(2000);\r\n                                 await driver.takeScreenshot();\r\n                                 markers.start('chat');\r\n                                 // Add any steps you'd like to time or otherwise mark here\r\n                                 await click(By.css(`.btn-primary:nth-child(1)`));\r\n                                 // this.waitForNumberOfWindowsToEqual(2);\r\n                                 // Make driver sleep for 5 seconds\r\n                                 await driver.sleep(12000);\r\n                                 //await driver.takeScreenshot();\r\n                                 //let browserWindows= [];\r\n                                 let browserWindows = await driver.getAllWindowHandles();\r\n                                 console.debug(\"No.of windows: \"+browserWindows);\r\n                                 \r\n                                  await driver.switchTo().window(browserWindows[1]);\r\n                                  console.debug(\"No.of windows: \"+browserWindows);\r\n                                 await driver.sleep(10000);\r\n                                 //  await driver.takeScreenshot();\r\n                                  // Click on 'End Chat'\r\n                                 //await click(By.css(`#endButton > .ui-button-text`));\r\n                                 await click(By.xpath('//span[text()=\"End Chat\"]'));\r\n                                // await driver.takeScreenshot();\r\n                                 \r\n                                  // Click on 'Yes'\r\n                                 await click(By.css(`.bt-dialog-footer > .ui-button:nth-child(1) > .ui-button-text`));\r\n                                  markers.stop('chat');\r\n                                 // Make driver sleep for 5 seconds\r\n                                 await driver.sleep(1000);\r\n                                  var windows = driver.getAllWindowHandles();\r\n                                 console.log(\"No.of windows: \"+windows);\r\n                                 await driver.switchTo().window(browserWindows[0]);\r\n                                  await click(By.css(`#chatPanel > img`));\r\n                                 await driver.takeScreenshot();\r\n                                 \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1051,\r\n    height: 806 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1883102"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1883102"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1883102"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1883102"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1883102"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1883102"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-11 20:03:56",
            "createdBy": "Deleted User",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1894615,
            "testName": "Bomgar 11th Feb",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://btcdev.tims.intra.aexp.com/#/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.RUMtest",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers, credentials } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n // const usernamePwd = credentials.get('usernamePwdTest');\r\n  //const url = 'https://' + usernamePwd + '@btcdev.tims.intra.aexp.com/#/';\r\n  await driver.get(\"https://btcdev.tims.intra.aexp.com/#/\");\r\n\r\n  await driver.sleep(10000);\r\n  await driver.takeScreenshot();\r\n\r\n  await click(By.css(`#chatPanel > img`));\r\n                                 await driver.takeScreenshot();\r\n                                 \r\n                                  // Click on 'Chat with an Engineer'\r\n                                 await click(By.css(`.chatColumns:nth-child(2) > .noLinkDec`));\r\n                                    await driver.sleep(2000);\r\n                                 await driver.takeScreenshot();\r\n                                 markers.start('chat');\r\n                                 // Add any steps you'd like to time or otherwise mark here\r\n                                 await click(By.css(`.btn-primary:nth-child(1)`));\r\n                                 // this.waitForNumberOfWindowsToEqual(2);\r\n                                 // Make driver sleep for 5 seconds\r\n                                 await driver.sleep(12000);\r\n                                 //await driver.takeScreenshot();\r\n                                 //let browserWindows= [];\r\n                                 let browserWindows = await driver.getAllWindowHandles();\r\n                                 console.debug(\"No.of windows: \"+browserWindows);\r\n                                 \r\n                                  await driver.switchTo().window(browserWindows[1]);\r\n                                  console.debug(\"No.of windows: \"+browserWindows);\r\n                                 await driver.sleep(10000);\r\n                                 //  await driver.takeScreenshot();\r\n                                  // Click on 'End Chat'\r\n                                 //await click(By.css(`#endButton > .ui-button-text`));\r\n                                 await click(By.xpath('//span[text()=\"End Chat\"]'));\r\n                                // await driver.takeScreenshot();\r\n                                 \r\n                                  // Click on 'Yes'\r\n                                 await click(By.css(`.bt-dialog-footer > .ui-button:nth-child(1) > .ui-button-text`));\r\n                                  markers.stop('chat');\r\n                                 // Make driver sleep for 5 seconds\r\n                                 await driver.sleep(1000);\r\n                                  var windows = driver.getAllWindowHandles();\r\n                                 console.log(\"No.of windows: \"+windows);\r\n                                 await driver.switchTo().window(browserWindows[0]);\r\n                                  await click(By.css(`#chatPanel > img`));\r\n                                 await driver.takeScreenshot();\r\n                                 \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1051,\r\n    height: 806 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1894615"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1894615"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1894615"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1894615"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1894615"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1894615"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-04 22:10:47",
            "createdBy": "Deleted User",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1883098,
            "testName": "Bomgar Prod",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://techcare.aexp.com/#/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.RUMtest",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers, credentials } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n    \r\n     const usernamePwd = credentials.get('usernamePwdTest');\r\n  const url = 'https://' + usernamePwd + '@techcare.aexp.com/#/';\r\n  await driver.get(url);\r\n\r\n    await click(By.css(`#chatPanel > img`));\r\n    await driver.takeScreenshot();\r\n    \r\n\r\n    // Click on 'Chat with an Engineer'\r\n\tawait click(By.css(`.chatColumns:nth-child(2) > .noLinkDec`));\r\n     await driver.sleep(5000);\r\n    await driver.takeScreenshot();\r\n    markers.start('chat');\r\n    // Add any steps you'd like to time or otherwise mark here\r\n    await click(By.css(`.btn-primary:nth-child(1)`));\r\n   // this.waitForNumberOfWindowsToEqual(2);\r\n// Make driver sleep for 5 seconds\r\n   await driver.sleep(5000);\r\n\r\n    let browserWindows= [];\r\n  browserWindows = await driver.getAllWindowHandles();\r\n  console.log(\"No.of windows: \"+browserWindows);\r\n  \r\n  await driver.takeScreenshot();\r\n \r\n\r\n  await driver.switchTo().window(browserWindows[1]);\r\n   await driver.sleep(10000);\r\n  \r\n  \r\n\r\n    // Click on 'End Chat'\r\n\tawait click(By.css(`#endButton > .ui-button-text`));\r\n    await driver.takeScreenshot();\r\n    \r\n\r\n    // Click on 'Yes'\r\n\tawait click(By.css(`.bt-dialog-footer > .ui-button:nth-child(1) > .ui-button-text`));\r\n     markers.stop('chat');\r\n\r\n// Make driver sleep for 5 seconds\r\nawait driver.sleep(1000);\r\n\r\n    var windows = driver.getAllWindowHandles();\r\n   console.log(\"No.of windows: \"+windows);\r\n  await driver.switchTo().window(browserWindows[0]);\r\n\r\n    await click(By.css(`#chatPanel > img`));\r\n    await driver.takeScreenshot();\r\n    \r\n    \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().window().setRect({ \r\n        width: 1051, \r\n        height: 806\r\n    });\r\n    await driver.manage().setTimeouts({\r\n        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1883098"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1883098"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1883098"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1883098"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1883098"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1883098"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-16 20:01:40",
            "createdBy": "Deleted User",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1900748,
            "testName": "Bomgar Prod - Start Chat - Chrome",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://techcare.aexp.com/#/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.RUMtest",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get(\"https://techcare.aexp.com/#/\");\r\n\r\n  markers.start('chatendtoend');\r\n  await click(By.css(`#chatPanel > img`));\r\n\r\n  // Click on 'Chat with an Engineer'\r\n  await click(By.css(`.chatColumns:nth-child(2) > .noLinkDec`));\r\nawait driver.takeScreenshot();\r\n  \r\n  driver.switchTo().activeElement();\r\n  await click(By.css(`.btn-primary:nth-child(1)`));\r\n  markers.start('initializingchat');\r\n\r\n  let handles = await openNewTab(driver);\r\n  await driver.switchTo().window(handles[1]);\r\n\r\n  await click(By.css('#flex-container > bt-chat-log'));\r\n   driver.findElement(By.css('#flex-container > bt-chat-log')).isDisplayed();\r\n   markers.stop('initializingchat');\r\n  // Click on 'End Chat'\r\n  await click(By.xpath(`//span[text()='End Chat']`));\r\n   await driver.takeScreenshot();\r\n  // Click on 'Yes'\r\n  await click(By.css(`.bt-dialog-footer > .ui-button:nth-child(1) > .ui-button-text`));\r\n // Make driver sleep for 5 seconds\r\n \r\n  markers.stop('chatendtoend');\r\n   await driver.switchTo().window(handles[0]);\r\n    await driver.takeScreenshot();\r\n \r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1051,\r\n    height: 806 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 12 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n  const openNewTab = async (driver) =>{\r\n       let handlesRetunr;\r\n  await driver.wait(function () {\r\n    return driver.getAllWindowHandles().then(function (handles) {\r\n      var isHandleCount2 = (handles.length == 2);\r\n      if (isHandleCount2) {\r\n          handlesRetunr = handles;\r\n         return isHandleCount2;\r\n      }\r\n    });\r\n  });\r\n  return handlesRetunr;\r\n} \r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n",
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1900748"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1900748"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1900748"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1900748"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1900748"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1900748"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-24 14:42:50",
            "createdBy": "Deleted User",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1918038,
            "testName": "Bomgar Prod - Start Chat - Chrome24/02",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://techcare.aexp.com/#/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.RUMtest",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get(\"https://techcare.aexp.com/#/\");\r\n\r\n  markers.start('chatendtoend');\r\n  await click(By.css(`#chatPanel > img`));\r\n\r\n  // Click on 'Chat with an Engineer'\r\n  await click(By.css(`.chatColumns:nth-child(2) > .noLinkDec`));\r\nawait driver.takeScreenshot();\r\n  \r\n  driver.switchTo().activeElement();\r\n  await click(By.css(`.btn-primary:nth-child(1)`));\r\n  markers.start('initializingchat');\r\n\r\n  let handles = await openNewTab(driver);\r\n  await driver.switchTo().window(handles[1]);\r\n\r\n  await click(By.css('#flex-container > bt-chat-log'));\r\n   driver.findElement(By.css('#flex-container > bt-chat-log')).isDisplayed();\r\n   markers.stop('initializingchat');\r\n  // Click on 'End Chat'\r\n  await click(By.xpath(`//span[text()='End Chat']`));\r\n   await driver.takeScreenshot();\r\n  // Click on 'Yes'\r\n  await click(By.css(`.bt-dialog-footer > .ui-button:nth-child(1) > .ui-button-text`));\r\n // Make driver sleep for 5 seconds\r\n \r\n  markers.stop('chatendtoend');\r\n   await driver.switchTo().window(handles[0]);\r\n    await driver.takeScreenshot();\r\n \r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1051,\r\n    height: 806 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 12 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n  const openNewTab = async (driver) =>{\r\n       let handlesRetunr;\r\n  await driver.wait(function () {\r\n    return driver.getAllWindowHandles().then(function (handles) {\r\n      var isHandleCount2 = (handles.length == 2);\r\n      if (isHandleCount2) {\r\n          handlesRetunr = handles;\r\n         return isHandleCount2;\r\n      }\r\n    });\r\n  });\r\n  return handlesRetunr;\r\n} \r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n",
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1918038"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1918038"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1918038"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1918038"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1918038"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1918038"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-16 19:50:40",
            "createdBy": "Deleted User",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1900730,
            "testName": "Bomgar Prod - Start Chat - Edge",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://techcare.aexp.com/#/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.RUMtest",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get(\"https://techcare.aexp.com/#/\");\r\n\r\n  markers.start('chatendtoend');\r\n  await click(By.css(`#chatPanel > img`));\r\n\r\n  // Click on 'Chat with an Engineer'\r\n  await click(By.css(`.chatColumns:nth-child(2) > .noLinkDec`));\r\nawait driver.takeScreenshot();\r\n  \r\n  driver.switchTo().activeElement();\r\n  await click(By.css(`.btn-primary:nth-child(1)`));\r\n  markers.start('initializingchat');\r\n\r\n  let handles = await openNewTab(driver);\r\n  await driver.switchTo().window(handles[1]);\r\n\r\n  await click(By.css('#flex-container > bt-chat-log'));\r\n   driver.findElement(By.css('#flex-container > bt-chat-log')).isDisplayed();\r\n   markers.stop('initializingchat');\r\n  // Click on 'End Chat'\r\n  await click(By.xpath(`//span[text()='End Chat']`));\r\n   await driver.takeScreenshot();\r\n  // Click on 'Yes'\r\n  await click(By.css(`.bt-dialog-footer > .ui-button:nth-child(1) > .ui-button-text`));\r\n // Make driver sleep for 5 seconds\r\n \r\n  markers.stop('chatendtoend');\r\n   await driver.switchTo().window(handles[0]);\r\n    await driver.takeScreenshot();\r\n \r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1051,\r\n    height: 806 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 12 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n  const openNewTab = async (driver) =>{\r\n       let handlesRetunr;\r\n  await driver.wait(function () {\r\n    return driver.getAllWindowHandles().then(function (handles) {\r\n      var isHandleCount2 = (handles.length == 2);\r\n      if (isHandleCount2) {\r\n          handlesRetunr = handles;\r\n         return isHandleCount2;\r\n      }\r\n    });\r\n  });\r\n  return handlesRetunr;\r\n} \r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n",
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.100.0",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1900730"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1900730"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1900730"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1900730"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1900730"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1900730"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-24 14:55:41",
            "createdBy": "Deleted User",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1918066,
            "testName": "Bomgar Prod - Start Chat - Edge24/02",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://techcare.aexp.com/#/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.RUMtest",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get(\"https://techcare.aexp.com/#/\");\r\n\r\n  markers.start('chatendtoend');\r\n  await click(By.css(`#chatPanel > img`));\r\n\r\n  // Click on 'Chat with an Engineer'\r\n  await click(By.css(`.chatColumns:nth-child(2) > .noLinkDec`));\r\nawait driver.takeScreenshot();\r\n  \r\n  driver.switchTo().activeElement();\r\n  await click(By.css(`.btn-primary:nth-child(1)`));\r\n  markers.start('initializingchat');\r\n\r\n  let handles = await openNewTab(driver);\r\n  await driver.switchTo().window(handles[1]);\r\n\r\n  await click(By.css('#flex-container > bt-chat-log'));\r\n   driver.findElement(By.css('#flex-container > bt-chat-log')).isDisplayed();\r\n   markers.stop('initializingchat');\r\n  // Click on 'End Chat'\r\n  await click(By.xpath(`//span[text()='End Chat']`));\r\n   await driver.takeScreenshot();\r\n  // Click on 'Yes'\r\n  await click(By.css(`.bt-dialog-footer > .ui-button:nth-child(1) > .ui-button-text`));\r\n // Make driver sleep for 5 seconds\r\n \r\n  markers.stop('chatendtoend');\r\n   await driver.switchTo().window(handles[0]);\r\n    await driver.takeScreenshot();\r\n \r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1051,\r\n    height: 806 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 12 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n  const openNewTab = async (driver) =>{\r\n       let handlesRetunr;\r\n  await driver.wait(function () {\r\n    return driver.getAllWindowHandles().then(function (handles) {\r\n      var isHandleCount2 = (handles.length == 2);\r\n      if (isHandleCount2) {\r\n          handlesRetunr = handles;\r\n         return isHandleCount2;\r\n      }\r\n    });\r\n  });\r\n  return handlesRetunr;\r\n} \r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n",
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.100.0",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1918066"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1918066"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1918066"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1918066"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1918066"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1918066"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-10-31 00:52:23",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 4331515,
            "testName": "Cisco Syslogs btn-rdcpbxpuba.rdc.uk.aexp.com",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/CISCO%20CUCM/CISCO%20CUCM%20SysLogs",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 90,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl02`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'btn-rdcpbxpuba.rdc.uk.aexp.com')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4331515"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4331515"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4331515"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4331515"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4331515"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4331515"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-10-31 00:52:59",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 4331516,
            "testName": "Cisco Syslogs btn-rdcpbxpuba.rdc.uk.aexp.com",
            "type": "web-transactions",
            "interval": 3600,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://ircassrs.aexp.com/Reports/report/CISCO%20CUCM/CISCO%20CUCM%20SysLogs",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 90,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "Svc.te-cdr",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n  await driver.switchTo().frame(driver.findElement(By.css(`.viewer`)));\r\n  markers.stop('Login');\r\n  \r\n  // Set date and server\r\n  markers.start('Set date and server');\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl03_ddValue`), By.css(`[value=\"1\"]`));\r\n  await driver.sleep(3000);\r\n  await selectOption(By.id(`ReportViewerControl_ctl04_ctl05_ddValue`), By.css(`[value=\"2\"]`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_ctl01`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl00`));\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl07_divDropDown_ctl02`));\r\n  markers.stop('Set date and server');\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'View Report'\r\n  markers.start('View Report');\r\n  await click(By.id(`ReportViewerControl_ctl04_ctl00`));\r\n  markers.stop('View Report');\r\n  await driver.takeScreenshot();\r\n\r\n  // Find server name on page\r\n  markers.start('Verify Report');\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'btn-rdcpbxpuba.rdc.uk.aexp.com')]]\"));\r\n  markers.stop('Verify Report');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 60 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function selectOption(selectSelector, optionSelector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selectSelector).\r\n  findElement(optionSelector).\r\n  click();\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function rightClick(selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4331516"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4331516"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4331516"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4331516"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4331516"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4331516"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-07-14 13:55:13",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3860321,
            "testName": "Concur",
            "type": "web-transactions",
            "interval": 1800,
            "subinterval": 900,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://us2.concursolutions.com/nui/signin",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 45,
            "targetTime": 25,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  await driver.get(settings.url);\r\n  markers.start('Login');\r\n  // Add any steps you'd like to time or otherwise mark here\r\n\r\n  await click(By.id(`username-input`));\r\n\r\n  await typeText(credentials.get('Concur_SVC'), By.id(`username-input`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.id(`btnSubmit`));\r\n\r\n  await typeText(credentials.get('Concur_PW'), By.id(`password`));\r\n\r\n  await driver.takeScreenshot();\r\n  // Click on 'Sign In'\r\n  await click(By.id(`btnSubmit`));\r\n  markers.stop('Login');\r\n  // Make driver sleep for 5 seconds\r\n  await driver.sleep(7000);\r\n  \r\n  await driver.takeScreenshot();\r\n  markers.start('Expense Module');\r\n  await click(By.css(`.cnqr-quicktask:nth-child(1) .action`));\r\n  // Make driver sleep for 3 seconds\r\n  await driver.sleep(3000);\r\n\r\n  \r\n  await driver.takeScreenshot();\r\n  markers.stop('Expense Module');\r\n  // Click on 'Cancel'\r\n  await click(By.css(`.sapcnqr-button--muted > .sapcnqr-button__text`));\r\n\r\n  await click(By.css(`[data-test=\"user-icon-profile\"]`));\r\n\r\n  // Click on 'Sign Out'\r\n  await click(By.css(`[data-test=\"user-profile-menu-signout-link\"] > .sapcnqr-button__text-9ddd8d`));\r\n\r\n  \r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 200;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3860321"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3860321"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3860321"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3860321"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3860321"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3860321"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-04-27 13:50:30",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3680306,
            "testName": "Email - Round Trip - Outlook Web Using OKTA",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 110,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\n// Variables\r\nvar strMyEmail = 'svc.thouseyeexo@aexp.com';\r\nvar strSubject = \"Hello \" + Date.now();\r\nvar strRecipientEmail = 'RoundTrip@Roundtrip.aexp.com'\r\n\r\n// Constants\r\nconst intImplicitTimeout = 30 // Number of seconds to wait for an action to take place before erorring out\r\n\r\nasync function runScript() {\r\n\r\n  // Configure\r\n  await configureDriver();\r\n\r\n  markers.start('Login');\r\n    // Goto outlook.office.com\r\n    await driver.get('https://mymail.aexp.com');\r\n    await authenticateToOKTA();\r\n  markers.stop('Login');\r\n\r\n  //BELOW CODE TO TEST CREATING AND SENDING EMAIL FROM OUTLOOK\r\n  markers.start('Compose Mail');\r\n    // Click on 'New message'\r\n    await click(By.xpath(`//span[text()=\"New message\" or text()='New mail']`));\r\n\r\n    await click(By.xpath(`//div[@aria-label=\"To\"]`));\r\n    await typeText(strRecipientEmail, By.xpath(`//div[@aria-label=\"To\"]`));\r\n\r\n    // Verify that the recipient address was typed correctly. If not, try again.\r\n    let objToBox = await driver.findElement(By.xpath(`//div[@aria-label=\"To\"]`));\r\n    let objToValue = await objToBox.getAttribute('value');\r\n    if (objToValue != strRecipientEmail){\r\n        await objToBox.clear()\r\n        await typeText(strRecipientEmail, By.xpath(`//div[@aria-label=\"To\"]`));\r\n    }    \r\n\r\n    // Type a subject\r\n    await typeText(strSubject, By.xpath(`//input[@placeholder=\"Add a subject\"]`));\r\n    await typeText(strSubject, By.xpath(`//div[contains(@aria-label,\"Message body\")]`));\r\n  markers.stop('Compose Mail');\r\n\r\n  // Click on 'Send', wait for compose window to disappear\r\n  markers.start('Send Mail');\r\n    try {\r\n      var objSendButton = await driver.findElement(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n      await click(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n      await driver.wait(until.stalenessOf(objSendButton));\r\n      //await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//span[contains(text(),'Select an item to read')]`))));\r\n    } \r\n    catch (e) {\r\n      let strSendError = `SendEmail:: Error: Couldn't Send \"${strSubject}\". Test Un-Successful`;\r\n      markers.set(strSendError.replace(/\\./g, ` `));\r\n      await driver.takeScreenshot();\r\n      throw new Error();\r\n    }\r\n  markers.stop('Send Mail');\r\n\r\n  //THIS CODE WILL SEARCH FOR EMAIL\r\n  markers.start('Verify Mail Sent');\r\n    // Open 'Sent Items'\r\n    await click(By.xpath(`//span[contains(text(),\"Navigation pane\")]/..//span[contains(text(),\"Sent Items\")]`));\r\n\r\n    // Find the email that was sent - by clicking on it (waits the implicit wait timeout)\r\n    try {\r\n      await click(By.xpath(`//*[contains(text(),\"${strSubject}\")]`));\r\n    }\r\n    catch (e) {\r\n      let strFindSentErorr = `FindSentEmail:: Error: Couldn't find \"${strSubject}\". Test Un-Successful`;\r\n      throw new Error(strFindSentErorr);\r\n    }\r\n    await driver.takeScreenshot();\r\n  markers.stop('Verify Mail Sent');\r\n\r\n  //Validate Inbox - take screenshot\r\n  markers.start('Verify Inbox Receipt');\r\n    await click(By.xpath(`//div[@title=\"Inbox\"]`));\r\n    try {\r\n      await click(By.xpath(`//*[contains(text(),\"${strSubject}\")]`));\r\n    }\r\n    catch (e) {\r\n      let strInboxError = `FindInboxEmail:: Error: Couldn't find \"${strSubject}\". Test Un-Successful`;\r\n      throw new Error(strInboxError);\r\n    }\r\n    await driver.takeScreenshot();\r\n  markers.stop('Verify Inbox Receipt');\r\n\r\n  // ALL OF THE BELOW IS NEEDED FOR LOGOUT\r\n  markers.start('Sign Out');\r\n    // Click on 'Thousand Eyes'\r\n    await click(By.xpath(`//*[@aria-label=\"Account manager for svc.ThousEyeEXO\"]`));\r\n\r\n    await driver.wait(until.elementLocated(By.xpath(`//a[contains(.,'Sign out')]`)));\r\n    await click(By.xpath(`//a[contains(.,'Sign out')]`));\r\n\r\n    await driver.takeScreenshot();\r\n  markers.stop('Sign Out');\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: intImplicitTimeout * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n/**\r\n* @param {{ (): Promise<void>; (): any; }} attemptActionFn\r\n* @param {number} attemptEndTime\r\n*/\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Enter 'svc.thouseyeexo@aexp.com' service account\r\n    await typeText(strMyEmail, By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    await typeText('svc.thouseyeexo', By.id(`okta-signin-username`));\r\n    // DEFINED O365 password and stored in MSGEXO-TE-PWD\r\n    await typeText(credentials.get('MSGEXO-TE-PWD'), By.id(`okta-signin-password`));\r\n\r\n    // Click on 'Sign In'\r\n    await click(By.id(`okta-signin-submit`));\r\n    await driver.takeScreenshot();\r\n\r\n    // Click on 'No'\r\n    await click(By.id('idBtn_Back'));\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3680306"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3680306"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3680306"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3680306"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3680306"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3680306"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-09-20 21:23:20",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 4148448,
            "testName": "Email - Round Trip - Outlook Web Using OKTA",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 110,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\n// Variables\r\nvar strMyEmail = 'svc.thouseyeexo@aexp.com';\r\nvar strSubject = \"Hello \" + Date.now();\r\nvar strRecipientEmail = 'RoundTrip@Roundtrip.aexp.com'\r\n\r\n// Constants\r\nconst intImplicitTimeout = 30 // Number of seconds to wait for an action to take place before erorring out\r\n\r\nasync function runScript() {\r\n\r\n  // Configure\r\n  await configureDriver();\r\n\r\n  markers.start('Login');\r\n    // Goto outlook.office.com\r\n    await driver.get('https://mymail.aexp.com');\r\n    await authenticateToOKTA();\r\n  markers.stop('Login');\r\n\r\n  //BELOW CODE TO TEST CREATING AND SENDING EMAIL FROM OUTLOOK\r\n  markers.start('Compose Mail');\r\n    // Click on 'New message'\r\n    await click(By.xpath(`//span[text()=\"New message\" or text()='New mail']`));\r\n\r\n    await click(By.xpath(`//div[@aria-label=\"To\"]`));\r\n    await typeText(strRecipientEmail, By.xpath(`//div[@aria-label=\"To\"]`));\r\n\r\n    // Verify that the recipient address was typed correctly. If not, try again.\r\n    let objToBox = await driver.findElement(By.xpath(`//div[@aria-label=\"To\"]`));\r\n    let objToValue = await objToBox.getAttribute('value');\r\n    if (objToValue != strRecipientEmail){\r\n        await objToBox.clear()\r\n        await typeText(strRecipientEmail, By.xpath(`//div[@aria-label=\"To\"]`));\r\n    }    \r\n\r\n    // Type a subject\r\n    await typeText(strSubject, By.xpath(`//input[@placeholder=\"Add a subject\"]`));\r\n    await typeText(strSubject, By.xpath(`//div[contains(@aria-label,\"Message body\")]`));\r\n  markers.stop('Compose Mail');\r\n\r\n  // Click on 'Send', wait for compose window to disappear\r\n  markers.start('Send Mail');\r\n    try {\r\n      var objSendButton = await driver.findElement(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n      await click(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n      await driver.wait(until.stalenessOf(objSendButton));\r\n      //await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//span[contains(text(),'Select an item to read')]`))));\r\n    } \r\n    catch (e) {\r\n      let strSendError = `SendEmail:: Error: Couldn't Send \"${strSubject}\". Test Un-Successful`;\r\n      markers.set(strSendError.replace(/\\./g, ` `));\r\n      await driver.takeScreenshot();\r\n      throw new Error();\r\n    }\r\n  markers.stop('Send Mail');\r\n\r\n  //THIS CODE WILL SEARCH FOR EMAIL\r\n  markers.start('Verify Mail Sent');\r\n    // Open 'Sent Items'\r\n    await click(By.xpath(`//span[contains(text(),\"Navigation pane\")]/..//span[contains(text(),\"Sent Items\")]`));\r\n\r\n    // Find the email that was sent - by clicking on it (waits the implicit wait timeout)\r\n    try {\r\n      await click(By.xpath(`//*[contains(text(),\"${strSubject}\")]`));\r\n    }\r\n    catch (e) {\r\n      let strFindSentErorr = `FindSentEmail:: Error: Couldn't find \"${strSubject}\". Test Un-Successful`;\r\n      throw new Error(strFindSentErorr);\r\n    }\r\n    await driver.takeScreenshot();\r\n  markers.stop('Verify Mail Sent');\r\n\r\n  //Validate Inbox - take screenshot\r\n  markers.start('Verify Inbox Receipt');\r\n    //await click(By.xpath(`//div[@title=\"Inbox\"]`)); ----edit out due to code change 7_28_23\r\n    await click(By.xpath(`//*[contains(text(),\"Inbox\")]`));\r\n    try {\r\n      await click(By.xpath(`//*[contains(text(),\"${strSubject}\")]`));\r\n    }\r\n    catch (e) {\r\n      let strInboxError = `FindInboxEmail:: Error: Couldn't find \"${strSubject}\". Test Un-Successful`;\r\n      throw new Error(strInboxError);\r\n    }\r\n    await driver.takeScreenshot();\r\n  markers.stop('Verify Inbox Receipt');\r\n\r\n  // ALL OF THE BELOW IS NEEDED FOR LOGOUT\r\n  markers.start('Sign Out');\r\n    // Click on 'Thousand Eyes'\r\n    await click(By.xpath(`//*[@aria-label=\"Account manager for svc.ThousEyeEXO\"]`));\r\n\r\n    await driver.wait(until.elementLocated(By.xpath(`//a[contains(.,'Sign out')]`)));\r\n    await click(By.xpath(`//a[contains(.,'Sign out')]`));\r\n\r\n    await driver.takeScreenshot();\r\n  markers.stop('Sign Out');\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: intImplicitTimeout * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n/**\r\n* @param {{ (): Promise<void>; (): any; }} attemptActionFn\r\n* @param {number} attemptEndTime\r\n*/\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Enter 'svc.thouseyeexo@aexp.com' service account\r\n    await typeText(strMyEmail, By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    await typeText('svc.thouseyeexo', By.id(`okta-signin-username`));\r\n    // DEFINED O365 password and stored in MSGEXO-TE-PWD\r\n    await typeText(credentials.get('MSGEXO-TE-PWD'), By.id(`okta-signin-password`));\r\n\r\n    // Click on 'Sign In'\r\n    await click(By.id(`okta-signin-submit`));\r\n    await driver.takeScreenshot();\r\n\r\n    // Click on 'No'\r\n    await click(By.id('idBtn_Back'));\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4148448"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4148448"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4148448"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4148448"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4148448"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4148448"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-12-10 01:33:53",
            "createdBy": "Sathiesh Mani (Sathiesh.Mani2@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 4486508,
            "testName": "Email - Round Trip - Outlook Web Using OKTA",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 110,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\n// Variables\r\nvar strMyEmail = 'svc.thouseyeexo@aexp.com';\r\nvar strSubject = \"Hello \" + Date.now();\r\nvar strRecipientEmail = 'RoundTrip@Roundtrip.aexp.com'\r\n\r\n// Constants\r\nconst intImplicitTimeout = 30 // Number of seconds to wait for an action to take place before erorring out\r\n\r\nasync function runScript() {\r\n\r\n  // Configure\r\n  await configureDriver();\r\n\r\n  markers.start('Login');\r\n    // Goto outlook.office.com\r\n    await driver.get('https://mymail.aexp.com');\r\n    await authenticateToOKTA();\r\n  markers.stop('Login');\r\n\r\n  //BELOW CODE TO TEST CREATING AND SENDING EMAIL FROM OUTLOOK\r\n  markers.start('Compose Mail');\r\n    // Click on 'New message'\r\n    await click(By.xpath(`//span[text()=\"New message\" or text()='New mail']`));\r\n\r\n    await click(By.xpath(`//div[@aria-label=\"To\"]`));\r\n    await typeText(strRecipientEmail, By.xpath(`//div[@aria-label=\"To\"]`));\r\n\r\n    // Verify that the recipient address was typed correctly. If not, try again.\r\n    let objToBox = await driver.findElement(By.xpath(`//div[@aria-label=\"To\"]`));\r\n    let objToValue = await objToBox.getAttribute('value');\r\n    if (objToValue != strRecipientEmail){\r\n        await objToBox.clear()\r\n        await typeText(strRecipientEmail, By.xpath(`//div[@aria-label=\"To\"]`));\r\n    }    \r\n\r\n    // Type a subject\r\n    await typeText(strSubject, By.xpath(`//input[@placeholder=\"Add a subject\"]`));\r\n    await typeText(strSubject, By.xpath(`//div[contains(@aria-label,\"Message body\")]`));\r\n  markers.stop('Compose Mail');\r\n\r\n  // Click on 'Send', wait for compose window to disappear\r\n  markers.start('Send Mail');\r\n    try {\r\n      var objSendButton = await driver.findElement(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n      await click(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n      await driver.wait(until.stalenessOf(objSendButton));\r\n      //await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//span[contains(text(),'Select an item to read')]`))));\r\n    } \r\n    catch (e) {\r\n      let strSendError = `SendEmail:: Error: Couldn't Send \"${strSubject}\". Test Un-Successful`;\r\n      markers.set(strSendError.replace(/\\./g, ` `));\r\n      await driver.takeScreenshot();\r\n      throw new Error();\r\n    }\r\n  markers.stop('Send Mail');\r\n\r\n  //THIS CODE WILL SEARCH FOR EMAIL\r\n  markers.start('Verify Mail Sent');\r\n    // Open 'Sent Items'\r\n    await click(By.xpath(`//span[contains(text(),\"Navigation pane\")]/..//span[contains(text(),\"Sent Items\")]`));\r\n\r\n    // Find the email that was sent - by clicking on it (waits the implicit wait timeout)\r\n    try {\r\n      await click(By.xpath(`//*[contains(text(),\"${strSubject}\")]`));\r\n    }\r\n    catch (e) {\r\n      let strFindSentErorr = `FindSentEmail:: Error: Couldn't find \"${strSubject}\". Test Un-Successful`;\r\n      throw new Error(strFindSentErorr);\r\n    }\r\n    await driver.takeScreenshot();\r\n  markers.stop('Verify Mail Sent');\r\n\r\n  //Validate Inbox - take screenshot\r\n  markers.start('Verify Inbox Receipt');\r\n    //await click(By.xpath(`//div[@title=\"Inbox\"]`)); ----edit out due to code change 7_28_23\r\n    await click(By.xpath(`//*[contains(text(),\"Inbox\")]`));\r\n    try {\r\n      await click(By.xpath(`//*[contains(text(),\"${strSubject}\")]`));\r\n    }\r\n    catch (e) {\r\n      let strInboxError = `FindInboxEmail:: Error: Couldn't find \"${strSubject}\". Test Un-Successful`;\r\n      throw new Error(strInboxError);\r\n    }\r\n    await driver.takeScreenshot();\r\n  markers.stop('Verify Inbox Receipt');\r\n\r\n  // ALL OF THE BELOW IS NEEDED FOR LOGOUT\r\n  markers.start('Sign Out');\r\n    // Click on 'Thousand Eyes'\r\n    await click(By.xpath(`//*[@aria-label=\"Account manager for svc.ThousEyeEXO\"]`));\r\n\r\n    await driver.wait(until.elementLocated(By.xpath(`//a[contains(.,'Sign out')]`)));\r\n    await click(By.xpath(`//a[contains(.,'Sign out')]`));\r\n\r\n    await driver.takeScreenshot();\r\n  markers.stop('Sign Out');\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: intImplicitTimeout * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n/**\r\n* @param {{ (): Promise<void>; (): any; }} attemptActionFn\r\n* @param {number} attemptEndTime\r\n*/\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Enter 'svc.thouseyeexo@aexp.com' service account\r\n    await typeText(strMyEmail, By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    await typeText('svc.thouseyeexo', By.id(`okta-signin-username`));\r\n    // DEFINED O365 password and stored in MSGEXO-TE-PWD\r\n    await typeText(credentials.get('MSGEXO-TE-PWD'), By.id(`okta-signin-password`));\r\n\r\n    // Click on 'Sign In'\r\n    await click(By.id(`okta-signin-submit`));\r\n    await driver.takeScreenshot();\r\n\r\n    // Click on 'No'\r\n    await click(By.id('idBtn_Back'));\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4486508"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4486508"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4486508"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4486508"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4486508"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4486508"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-07-20 17:37:39",
            "createdBy": "ThousandEyes (support@thousandeyes.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3002607,
            "testName": "EXO-RoundTrip-Cert-Test James - Support saved event",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "/*\r\nJames\r\n*/\r\nimport {\r\n    markers,\r\n    credentials,\r\n} from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\nimport assert from 'assert';\r\n\r\nconst clientId = 'aee91fd6-14b9-4f78-8c37-038f1b163366';        // Azure Application (client) ID\r\nconst tenantId = '66295b3b-c4fd-41af-a077-c0ec2a40e369';        // Azure Directory (tenant) ID\r\nconst thumbprint = '0FE37AD23676F4FA016DAFAC4DD686A1BBEDE682'   // Certificate thumbprint\r\nconst oauthUrl = 'https://login.microsoftonline.com/' + tenantId + '/oauth2/v2.0/token';\r\nconst encryptedPrivateKey = `b9ee4aa8f4223741aa528a61b35a57c4:d6dea635d83bc0541b48f1d00bb9b7e561e7a33d69fa1215e533ec6cade65cb947e1c3988eb0f686ca1f1e532a2c4dd14012a46c4aa43a34aa7f5783dbd32ce2348c80c0d073e8ef70916be767421348087af826dd39cc4f70d6c40ac6937ad679a6830792366a022eeb3216904738300c02ff8195a26045f6fafa149b9abda2cd1d500ad7fb647c8e5330c4d2a526bfc2694834370cb3c3a4ae80bfae15822869e4cb5f623fe872f63c0ad8ff1ee042c17fb0aaf6a367ea65c19b2bb4c8d7bc8db6421d440bfd835f94f75821f3be316c0692b325d4277abf2a3f3bcf3e6fc2dad681499c82240308db1ce623f338891a9d420d9b918819ee4e68cd7f1432ba7aaf007351030625de478a8e891783ad707fdfd833e23819fd44138da6b1ca6499f1d60f6093ada44465fe988ef0a9d729113827ed62d46e78072da881641e830971b0c6a1493440bfe0b2ee8b8d428db3ca5681e45a0e9f401af8d8b6a03990b9129c90bf0211cbca3325b4909d6b79943878ffbe59bc8a50aae2d76a676a0ec73f0adb2706111b39730c083f6659262835fe7ccde5ea9c8dbd260e0e8a6e6660cb1767e6279384ab2721c098f1f5ebdae110095996f5676b92526897cbbf90b956a906fb2c9662283c37d9ca4254967fac5ffdd2369f5a442b33186e507a5ebdb94bb83b54c0df95cf1754888805d20d49bb803c3d20b1ebff2c2363f218a45dd076dbf57558249c9925680bea5ca34b5c3592bcd974b3ade4a3ca163efd61a241efd2507da6a3996aef644fd7f9741dd537c2f2d7865f42ebc91b2f69710bfab236ead887cf669983bc77dc07e82e01f08f0eb55c33262487e77bfcd59316b58c0ca6d10cfe513c4244a02d082759683bd09b6c73eb378288a94932dcb7e0e3063e9220a4c651957f4bcf07950467db8aba7522533a87b097a733628a1611122f069501182f5844a8c392d28beef74205bdceb708f7cb8b78dc8b2ca6dafa415a12be1b385b40f470a74cb4c7c6ece3e1fb2204efd86191a676cd2f296caedae62a593ccefb7c180e61cdda67d263132341d03764296c223dacece7ed65384e38f670ea762179bbb36a4ea04866b723311a7abc736009a2576344e23b1a3fbec4cbc66eb53528d0e29a59db019d59d582ada7ab1db9e5da56abdb4d22125f0b4493c6f8a21341b16dd0ef80da32f47247953a7af4fbc981d9ef020d3dcfba4b8fdc3a9bef903f4a06740d35150156f5d50098f0710c9334ebb93fb9948e9875c95f588ced2cb37d3315284fc62f9edb7bd9f679c8d645dcd6b8c29f7a1bfe56074779cb92a91172552aa3e9dc4f2a2a2ee84fb7ed63715ce695ab43484775f475933912a3b82876322a810bf70034dfa010cdf6d16186c460be96cf7043a60809810cbaf85cf581281a23c178600eb28bdf2aa8a8a80e7b302cfadaaf5969316f6c693ad9d086b22d04a2362f0b8b1f3c88d5549a57671486e8276a704ea9f1f98ed0707499ed1b40267d28a5d67470aea860e8456e3fdb30954810ee618e4f6399616f34525a75918dd21a96b993b73bb91e89edd447648f71cd09ac699a557c822bca38035566404b929d016c06f75cca27914c455f2728213b30a8b5246c81655ac7adae8d850477d7c6b243ac7d283034def0ca705d590bc048cf8d24bbd4ce45ee84ab90c666e84b04912cde3c4664a3f1f9b73edaa9b4d4cd22bb531d5596f798c15e5b269ba11a903af8f90e7f77c59e93fcc6413cf343ff72108884d299f5d170b24b3de50683ee49e5f175f8b8faf8b220fe8f1aa9b8569439c771845a31a775620813dab2407d2a0d2338ea24924bae633d64fd4e84fb2863e32df6dc6730365589b5ae3ae2e6aae5a388de79cdca6a957df2ba80a3666be714ce104ab0f3678eb15d93122a45c1f6f7cacdcff65acfd116abab4e234b07250a0e204a95df8b39e23ac1ed66cfd770e5f306ee56d07a576e639cecd163983faf63171c8c0b9a0bc8940b9c64fbc9c1258aa7c3e870c5fc60f789606685cc7a3d9d4f1dcd06bf0db63f25204de9a8ac967156cf9b4ee25acde03885a2301d512073763d345fa413143bbbb888cb2758fefce10d0927aa74a367b9f0599650c4b524c8aaed7d0ca610a0139c2ec1a3c5c0b01b16921430d603b6c0ec55425a57650e14e7527e23412304bc81d320d50f37518c56ac3d22dc5b3a3adda0f90e8aa3e0efac891613298565742a067d3e32f378de4306e6ba37a814047cb04cf4e5200efd02e63cf9fd507f3bfb5d1f7dedee1d999791aa0f8af0764b9cb6e25cbfb221c8ffe674c09d875604bc2840ab298f5fc3151b541c40571d76580471ce5825c0fc9f3cfc8d5470fbbe40879e9b2353b477b208c304e239e487324bd905d6122d70b388a7551162c3ec08bf6edd18c1`;\r\nconst boolLogAsMarkers = false;\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    const passphrase = credentials.get('key_EXOMSGBLUECERT');\r\n    const privateKey = await getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n    \r\n    //Construct the signed JWT\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": await hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = await base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), {key: privateKey})\r\n    let signed_jwt = (jwt_tosign +  \".\" + await base64Url(signature))\r\n\r\n    //Fetch the Access token from the OAuth service\r\n        let formParams = {\r\n            \"redirect_uri\": \"http://localhost/\",\r\n            \"grant_type\": \"client_credentials\",\r\n            \"client_id\": clientId,\r\n            \"scope\": \"https://graph.microsoft.com/.default\",\r\n            \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n            \"client_assertion\": signed_jwt\r\n        }\r\n        const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n        const oauthRequest = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n                'Authorization': 'Bearer ' + signed_jwt\r\n            },\r\n            body: formBody\r\n        }\r\n        \r\n        const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n        if (!oauthResponse.ok) {\r\n            const oauthErrorResponseText = await oauthResponse.text();\r\n            throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n        }\r\n\r\n        let responseJson = await oauthResponse.json();\r\n        const accessToken = responseJson.access_token;\r\n\r\n        console.log(accessToken)\r\n        await runEmailScript();\r\n        throw new Error(JSON.stringify(accessToken))\r\n        markers.stop('OAuth Query Time');\r\n};\r\n\r\n\r\nasync function base64Url(data) {\r\n    return Buffer.from(data).toString('base64').replace(/\\+/g,\"-\").replace(/\\//g,\"_\").replace(/=/g,\"\");\r\n}\r\n\r\nasync function hexStringTo64(data){\r\n    return Buffer.from(data, \"hex\").toString('base64');\r\n}\r\n\r\nasync function getDecryptedPrivateKey(encKey, pass){\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':'); \r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    deciphered += decipher.final(\"utf8\");\r\n\r\n    return deciphered;\r\n}\r\n\r\n\r\n\r\nasync function runEmailScript() {\r\n    //construct the email message below using Json format:\r\n\r\nconst strSecret = `App Secret`;\r\nconst strClientID = `App Client ID`;\r\nconst strTenantID = `App Tenant ID`;\r\nconst strUserPrincipal = `User Account to Use`;\r\nconst intSecondsToWaittoFindMessage = 10;\r\n\r\n\r\nvar strUserID = ``;\r\nconst dtDateSent = `CreateDateTime:` + Date.now();\r\n\r\nconst strGraphBaseURL = `https://graph.microsoft.com/v1.0`;\r\nconst strAuthURL = `https://login.microsoftonline.com/${strTenantID}/oauth2/token?$format=json`;\r\nconst strUserURL = `https://graph.microsoft.com/v1.0/users?$search=\"userPrincipalName:${strUserPrincipal}\"`;\r\nvar strSendEmailURL = `${strGraphBaseURL}/users/{strUserID}/sendMail`\r\nvar strFindEmailURL = `${strGraphBaseURL}/users/{strUserID}/mailFolders/inbox/messages?$format=json&$search=\"subject:${dtDateSent}\"&select=subject,toRecipients`;\r\n\r\nconst strToAddress365 = `aamiles@aamiles.org`;\r\n\r\n\r\nvar jsonEmailMessage = {\r\n    message: {\r\n        subject: dtDateSent,\r\n        body: {\r\n            contentType: 'Text',\r\n            content: dtDateSent\r\n        },\r\n        toRecipients: [\r\n            {\r\n                emailAddress: {\r\n                    address: strToAddress365\r\n                }\r\n            }\r\n        ],\r\n        from: {\r\n            emailAddress: {\r\n                address: strToAddress365\r\n            }\r\n        }\r\n    },\r\n    saveToSentItems: 'true'\r\n};\r\n\r\n    ConsoleLog(`runScript:: Enter()`);\r\n    // Retreive Token\r\n    var requestParams = {\r\n        grant_type: 'client_credentials',\r\n        client_id: strClientID,\r\n        response_type: `code`,\r\n        response_mode: `query`,\r\n        client_secret: strSecret,\r\n        scope: `https://graph.microsoft.com/.default`,\r\n        resource: 'https://graph.microsoft.com'\r\n    };\r\n    let objResult = await fetch(strAuthURL, {\r\n        method: 'POST',\r\n        body: await URLEncode(requestParams),\r\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\r\n    });\r\n    let strAuthToken = await (JSON.parse(await objResult.text())).access_token;\r\n    ConsoleLog(`Access Token: ${(strAuthToken).substring(0, 20)} etc`);\r\n    // Retrieve User ID\r\n    objResult = await fetch(strUserURL, {\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n            authorization: strAuthToken,\r\n            Prefer: 'IdType = \"ImmutableId\"',\r\n            ConsistencyLevel: 'eventual'\r\n        }\r\n    });\r\n    let arrUser = await JSON.parse(await objResult.text());\r\n    //let arrSendEmail =[];\r\n    \r\n    if (objResult.status == 200) {\r\n        if (typeof (arrUser) == 'object') {\r\n            await ConsoleLog(`User ID: ${arrUser.value[0].id}`);\r\n            strUserID = arrUser.value[0].id;\r\n            // Send email\r\n            strSendEmailURL = strSendEmailURL.replace(`{strUserID}`, strUserID);\r\n            objResult = await fetch(strSendEmailURL, {\r\n                method: 'POST',\r\n                body: JSON.stringify(jsonEmailMessage),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization': strAuthToken,\r\n                    'Prefer': `IdType=\"ImmutableId\"`\r\n                }\r\n            });\r\n            if (objResult.status == 202) {\r\n                // Find Sent Email\r\n                ConsoleLog(`FindMessage:: Finding Message with Subject \"${dtDateSent}\"`);\r\n                strFindEmailURL = strFindEmailURL.replace(`{strUserID}`, strUserID);\r\n                let arrFindMessage = [];\r\n                \r\n                for (let i = 0; i < intSecondsToWaittoFindMessage; i++) {\r\n                    objResult = await fetch(strFindEmailURL, {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'authorization': strAuthToken,\r\n                            'Prefer': `IdType=\"ImmutableId\"`\r\n                        }\r\n                    });\r\n                    arrFindMessage = await JSON.parse(await objResult.text());\r\n                    if (objResult.status == 200) {\r\n                        if (arrFindMessage.length > 0) {\r\n                            await ConsoleLog(`FindMessage:: ${dtDateSent} == ${arrFindMessage(0).subject}.  Test Successful`);\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        await ConsoleLog(`FindEmail:: Error: ${arrFindMessage.error.code}:${arrFindMessage.error.message}  Test Un-Successful`);\r\n                        assert(false, `FindEmail:: Error: ${arrFindMessage.error.code}:${arrFindMessage.error.message}  Test Un-Successful`);\r\n                    }\r\n                    await ConsoleLog(`FindEmail:: Sleeping for 1000ms.  Round ${i}/${intSecondsToWaittoFindMessage}`);\r\n                    await sleep(1000);\r\n                }\r\n            }\r\n            else {\r\n                //await ConsoleLog(`SendMessage:: Error: ${arrSendEmail.error.code}:${arrSendEmail.error.message}  Test Un-Successful`);\r\n                //assert(false, `SendMessage:: Error: ${arrSendEmail.error.code}:${arrSendEmail.error.message}  Test Un-Successful`);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        await ConsoleLog(`RetreiveUserID:: Error ${arrUser.error.code}:${arrUser.error.message}`);\r\n        assert(false, `RetreiveUserID:: Error ${arrUser.error.code}:${arrUser.error.message}`);\r\n    }\r\n    ConsoleLog(`runScript:: Exit()`);\r\n}\r\n\r\n/**\r\n * @param {string} strLogString\r\n */\r\nasync function ConsoleLog(strLogString) {\r\n    var m = new Date();\r\n    var dateString =\r\n        m.getUTCFullYear() + \"/\" +\r\n        (\"0\" + (m.getUTCMonth() + 1)).slice(-2) + \"/\" +\r\n        (\"0\" + m.getUTCDate()).slice(-2) + \" \" +\r\n        (\"0\" + m.getUTCHours()).slice(-2) + \":\" +\r\n        (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" +\r\n        (\"0\" + m.getUTCSeconds()).slice(-2) + \":\" +\r\n        (\"0\" + m.getUTCMilliseconds());\r\n    console.log(`${dateString}: ${strLogString}`);\r\n    if (typeof boolLogAsMarkers !== 'undefined') {\r\n        if (boolLogAsMarkers) {\r\n            markers.set(strLogString.replace(/\\./g,` `));\r\n        }\r\n    }\r\n}\r\nasync function URLEncode(strStringToEncode) {\r\n    var formBody = [];\r\n    for (var property in strStringToEncode) {\r\n        var encodedKey = encodeURIComponent(property);\r\n        var encodedValue = encodeURIComponent(strStringToEncode[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    return formBody.join(\"&\");\r\n}\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3002607"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3002607"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3002607"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3002607"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3002607"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2021-02-26 16:30:44",
            "createdBy": "Roy Seidler-Brennan (Roy.Seidler-Brennan@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1925133,
            "testName": "EXO-RoundTrip-Test",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n// Template Values\r\nlet email = 'svc.ThousEyeEXO@aexp.com';\r\nlet credentialName = 'svc.ThousEyeEXO';\r\nlet sendToEmail = 'svc.ThousEyeEXO@aexp.com';\r\nrunScript();\r\nasync function runScript() {\r\n  await configureDriver();\r\n  markers.start('Page Load');\r\n  await driver.get('https://outlook.office365.com/');\r\n  markers.stop('Page Load');\r\n  markers.start('Login');\r\n  await typeText(email, By.id(`i0116`));\r\n  // Click on 'Next'\r\n  await click(By.id(`idSIButton9`));\r\n  // Click on 'Enter the password for tonystark@ac...'\r\n  await click(By.id(`i0118`));\r\n  await typeText(credentials.get('EXO-AccountTest'), By.id(`i0118`));\r\n  // Click on 'Sign in'\r\n  await click(By.id(`idSIButton9`));\r\n  // Click on 'No'\r\n  await markerClick(By.id('idBtn_Back'), \"Login\", \"Compose Email\");\r\n  // Click on 'New message'\r\n  await click(By.id(`id__20`));\r\n  // #app > div > div._3KAPMPOz8KsW24ooeUflK2 > div._2jR8Yc0t2ByBbcz_HIGqZ4 > div > div._3mBjlqTqXMUiRuuWRKCPtX.css-41 > div._1jw6v9zFEgnOiXShpU1qqM > div > div.mm4nCLKbIRtx5HvuorDWT > div._1QDTZfBsizkS8O4Jej5a3A > div > div > div > div._29NreFcQ3QoBPNO3rKXKB0 > div._3Yr_hO7j5doGUkhrRiP6uY > div:nth-child(1) > div:nth-child(1) > div._31eKqae41uP_KBAvjXjCLQ > div > div > div > div > div.ms-FocusZone.css-57 > div > div > input\r\n  ////*[@id=\"app\"]/div/div[2]/div[1]/div/div[3]/div[2]/div/div[3]/div[1]/div/div/div/div[1]/div[1]/div[1]/div[1]/div[1]/div/div/div/div/div[1]/div/div/input\r\n  await typeText(sendToEmail, By.css(`input.ms-BasePicker-input.pickerInput_ecad0f63`));\r\n  await driver.sleep(500);\r\n  await typeText(Key.TAB, By.css(`input.ms-BasePicker-input.pickerInput_ecad0f63`));\r\n  // Click on 'Add a subject'\r\n  await click(By.id(`subjectLine0`));\r\n  let subject = \"Hello \" + Date.now();\r\n  await typeText(subject, By.id(`subjectLine0`));\r\n  await console.log(\"Sent: \" + subject);\r\n  // Click on 'Send'\r\n  await markerClick(By.css(`[aria-label=\"Send\"]`), \"Compose Email\", \"Email Round Trip\");\r\n  await driver.sleep(200);\r\n  await findElementWithText(subject);\r\n  markers.stop('Email Round Trip');\r\n  await console.log(\"Found email inbox: \" + subject);\r\n  await driver.takeScreenshot();\r\n} \r\n\r\nasync function findElementWithText(text) {\r\n        return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\r\n    } \r\n\r\nasync function clickText(text) {\r\n  await click(By.xpath(`//*[text()=\"${text}\"]`));\r\n}async function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n} \r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1572,\r\n    height: 1133\r\n  });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n} \r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector)\r\n              .sendKeys(value);\r\n} \r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n} \r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n      await driver.findElement(selector)\r\n                  .click().then(null, async function (err) {\r\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\r\n          await driver.findElement(selector)\r\n                      .click();\r\n      });\r\n  }\r\n} \r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n      try {\r\n          numberOfAttempts += 1;\r\n          await attemptActionFn();\r\n      }\r\n      catch (error) {\r\n          attemptError = error;\r\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n          continue; // Attempt failed, reattempt\r\n      }\r\n      attemptError = null;\r\n      break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n      throw attemptError;\r\n  }\r\n} \r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n      return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n      return false; // Will throw an error if element is not connected to the document\r\n  }\r\n} \r\n\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1925133"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1925133"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1925133"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1925133"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1925133"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/1925133"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-22 22:37:28",
            "createdBy": "Roy Seidler-Brennan (Roy.Seidler-Brennan@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1913901,
            "testName": "EXO-Test RoundTrip (Feb 22, 2021 22:35 UTC)",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.thouseyeexo@aexp.com",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\nimport { driver, markers, credentials, downloads, transaction, test } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\nconst settings = test.getSettings();\n\n// Load page\nawait driver.get(settings.url);\nawait driver.takeScreenshot();\n\n// Search\nmarkers.start('SearchForWebdriver');\nawait driver.findElement(By.name('q')).sendKeys('webdriver', Key.RETURN);\nawait driver.takeScreenshot();\nmarkers.stop('SearchForWebdriver');\n\n// Wait for full page load\nawait driver.wait(until.titleIs('webdriver - Google Search'), 1000);\nawait driver.takeScreenshot();\n};\n                ",
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.100.0",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1913901"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1913901"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1913901"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1913901"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1913901"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-02-09 18:00:31",
            "createdBy": "Deleted User",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 1889443,
            "testName": "GSP-Arena-tes1 (Feb 9, 2021 17:55 UTC)",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 1,
            "url": "https://serviceportalarena.aexp.com/wsp/PRServlet",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\nimport { driver, credentials } from 'thousandeyes';\nrunScript();\nasync function runScript() {\n    await configureDriver();\n    await driver.get('https://serviceportalarena.aexp.com/wsp/PRServlet');\n    await click(By.id(`textboxuid_AD`));\n    await typeText('gsparena1', By.id(`textboxuid_AD`));\n    await click(By.id(`textboxpwd_AD`));\n    await typeText(credentials.get('ArenaTestID'), By.id(`textboxpwd_AD`));\n    await pressEnter(By.id(`textboxpwd_AD`));\n    // Click on 'Recent Cards'\n\tawait click(By.name(`CPMInteractionPortalHeader_pyDisplayHarness_5`));\n    // Click on '379764074001003'\n\tawait click(By.css(`#\\\\$PRecentCard\\\\$ppxResults\\\\$l2 #CT > [href=\"#\"]`));\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget0Ifr`)))\n    await click(By.id(`Answer`));\n    await typeText(credentials.get('myPassword2'), By.id(`Answer`));\n    // Click on 'Validate'\n\tawait click(By.css(`[data-keyboard=\"....\"]`));\n    // Click on 'Hub Menu'\n\tawait click(By.css(`[name=\"CPMInteractionDriver_D_Interaction_20\"] [data-click=\"....\"]`));\n    // Click on 'Balance Summary'\n\tawait click(By.css(`[data-ui-meta=\"{\\\\'type\\\\':\\\\'Cell\\\\',\\\\'subType\\\\':\\\\'SUB_SECTION\\\\',\\\\'clipboardPath\\\\':\\\\'CPMTasksByCategory\\\\',\\\\'className\\\\':\\\\'Embed-PegaCA-IntentCategory\\\\',\\\\'pgRef\\\\':\\\\'.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)\\\\'}\"]:nth-child(1) [data-ui-meta=\"{\\\\'type\\\\':\\\\'Cell\\\\',\\\\'subType\\\\':\\\\'SUB_SECTION\\\\',\\\\'clipboardPath\\\\':\\\\'CPMDisplayTaskInMenu\\\\',\\\\'className\\\\':\\\\'Rule-PegaCA-Intent-Task\\\\',\\\\'pgRef\\\\':\\\\'.pySections(2).pySectionBody(1).pyTable.pyRows(1).pyCells(1)\\\\'}\"]:nth-child(1) [data-test-id=\"2014123005242607302524\"]:nth-child(1)`));\n    // Click on 'Add task(s)'\n\tawait click(By.css(`[data-test-id=\"2018020814111202931892\"] [data-click=\"....\"]`));\n    await driver.switchTo().defaultContent()\n    await driver.switchTo().frame(driver.findElement(By.id(`PegaGadget1Ifr`)))\n    await click(By.id(`Answer`));\n    await typeText(credentials.get('myPassword3'), By.id(`Answer`));\n    // Click on 'Validate'\n\tawait click(By.css(`[data-keyboard=\"....\"]`));\n   // await driver.sleep(3000)\n}\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 3187, \n        height: 1337\n    });\n    await driver.manage().setTimeouts({\n        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\nasync function click(selector) {\n    await simulateHumanDelay();\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\nasync function dbClick(selector) {\n    await simulateHumanDelay();\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    async function attemptToClick() {\n        const act = driver.actions({async: true});\n        await act.doubleClick(driver.findElement(selector))              \n    }\n}\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\nasync function pressEnter(selector) {\n    await driver.findElement(selector)\n                .sendKeys(Key.RETURN);\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/1889443"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/1889443"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/1889443"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/1889443"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/1889443"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-09-02 05:16:12",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3103429,
            "testName": "JC - amex.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 41,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n\r\n  await driver.get(settings.url);\r\n\r\n  // Click on 'Sign In'\r\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\r\n  // commented out line 20 on 6-29-21 and replaced with line 22\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  //Okta\r\n  await click(By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.id(`okta-signin-password`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n  \r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n  await driver.sleep(5000);\r\n  markers.stop('SignOn');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n  markers.start('Connect to Personal Room');\r\n    // Start meeting\r\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n    await driver.takeScreenshot();\r\n\r\n  markers.stop('Connect to Personal Room');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function deleteText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function pressDelete(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.DELETE);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function arrowDown(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.ARROW_DOWN);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function switchToNextTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\nasync function switchToPrevTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\n\r\nasync function getBackupTabId() {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\r\n}\r\n\r\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== backupTabId);\r\n}\r\n\r\nasync function moveMouseInto(element) {\r\n  await driver.actions({ bridge: true }).\r\n  move({ x: -1, y: 0, origin: element }).\r\n  move({ x: 1, y: 0, origin: element }).\r\n  perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3103429"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3103429"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3103429"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3103429"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3103429"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3103429"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-09-27 04:21:01",
            "createdBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3156430,
            "testName": "JC - amex.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n\r\n  await driver.get(settings.url);\r\n\r\n  // Click on 'Sign In'\r\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\r\n  // commented out line 20 on 6-29-21 and replaced with line 22\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  //Okta\r\n  await click(By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.id(`okta-signin-password`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n  \r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n  await driver.sleep(5000);\r\n  markers.stop('SignOn');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n  markers.start('Connect to Personal Room');\r\n    // Start meeting\r\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n    await driver.takeScreenshot();\r\n\r\n  markers.stop('Connect to Personal Room');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function deleteText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function pressDelete(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.DELETE);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function arrowDown(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.ARROW_DOWN);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function switchToNextTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\nasync function switchToPrevTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\n\r\nasync function getBackupTabId() {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\r\n}\r\n\r\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== backupTabId);\r\n}\r\n\r\nasync function moveMouseInto(element) {\r\n  await driver.actions({ bridge: true }).\r\n  move({ x: -1, y: 0, origin: element }).\r\n  move({ x: 1, y: 0, origin: element }).\r\n  perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3156430"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3156430"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3156430"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3156430"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3156430"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3156430"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-11-16 03:59:09",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3262623,
            "testName": "JC - amex.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n\r\n  await driver.get(settings.url);\r\n\r\n  // Click on 'Sign In'\r\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\r\n  // commented out line 20 on 6-29-21 and replaced with line 22\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  //Okta\r\n  await click(By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.id(`okta-signin-password`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n  \r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n  await driver.sleep(5000);\r\n  markers.stop('SignOn');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n  markers.start('Connect to Personal Room');\r\n    // Start meeting\r\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n    await driver.takeScreenshot();\r\n\r\n  markers.stop('Connect to Personal Room');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function deleteText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function pressDelete(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.DELETE);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function arrowDown(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.ARROW_DOWN);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function switchToNextTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\nasync function switchToPrevTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\n\r\nasync function getBackupTabId() {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\r\n}\r\n\r\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== backupTabId);\r\n}\r\n\r\nasync function moveMouseInto(element) {\r\n  await driver.actions({ bridge: true }).\r\n  move({ x: -1, y: 0, origin: element }).\r\n  move({ x: 1, y: 0, origin: element }).\r\n  perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3262623"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3262623"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3262623"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3262623"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3262623"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3262623"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-12-07 15:59:01",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3324430,
            "testName": "JC - amex.webex.com Login+Join",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n    await driver.get(settings.url);\r\n    await authenticateToOKTA();\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start a meeting\")]`))));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n    //Locate iframe\r\n    let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n    if (intThinIFrames == 0) {\r\n      markers.stop('1- Clicking \"Start a Meeting\"');\r\n      markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n      markers.set('Taking thiniframes=0 ScreenShot');\r\n      await driver.takeScreenshot();\r\n      //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n      let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start a meeting\")]');\r\n      markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n      if (intStartMeetingPage > 0) {\r\n        markers.start('2: Clicking \"Start a Meeting\"');\r\n        await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start a meeting\")]`))));\r\n        await driver.takeScreenshot();\r\n        await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n        markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n      }\r\n    }\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try { markers.stop('1- Clicking \"Start a Meeting\"'); } catch { };\r\n  try { markers.stop('2- Clicking \"Start a Meeting\"'); } catch { };\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n    sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n      click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3324430"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3324430"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3324430"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3324430"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3324430"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3324430"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-12-14 17:21:35",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3342220,
            "testName": "JC - amex.webex.com Login+Join (Dec 14, 2022 16:17 UTC)",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, test } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n    await driver.get(settings.url);\r\n    await authenticateToOKTA();\r\n  markers.stop('SignOn');\r\n\r\n  markers.start('Connect to Personal Room');\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start a meeting\")]`))));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n\r\n  markers.start('1- Clicking \"Start a Meeting\"');\r\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n    //Locate iframe\r\n    let intThinIFrames = await teHowManyElements('//iframe[@name=\"thinIframe\"]');\r\n    if (intThinIFrames == 0) {\r\n      markers.stop('1- Clicking \"Start a Meeting\"');\r\n      markers.set(`PR thinIframesFound:: ${intThinIFrames}`);\r\n      markers.set('Taking thiniframes=0 ScreenShot');\r\n      await driver.takeScreenshot();\r\n      //Suspecting we are on the main page still.. Will try and click Start a Meeting again\r\n      let intStartMeetingPage = await teHowManyElements('//button[contains(.,\"Start a meeting\")]');\r\n      markers.set(`StartMeetingPages: ${intStartMeetingPage}`);\r\n      if (intStartMeetingPage > 0) {\r\n        markers.start('2: Clicking \"Start a Meeting\"');\r\n        await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//button[contains(.,\"Start a meeting\")]`))));\r\n        await driver.takeScreenshot();\r\n        await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n        markers.set('2: Taking \"Start Meeting\" Screenshot');\r\n      }\r\n    }\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n  try { markers.stop('1- Clicking \"Start a Meeting\"'); } catch { };\r\n  try { markers.stop('2- Clicking \"Start a Meeting\"'); } catch { };\r\n  await driver.takeScreenshot();\r\n}\r\n\r\n/**\r\n* @param {string} _strXPathToFind\r\n*/\r\nasync function teHowManyElements(_strXPathToFind) {\r\n\r\n  console.log(`teHowManyElements:: Enter()`);\r\n  console.log(`teHowManyElements:: Finding ${_strXPathToFind}`);\r\n  let objElements = await driver.findElements(By.xpath(_strXPathToFind));\r\n  console.log(`teHowManyElements:: Found ${objElements.length} Elements`);\r\n  console.log(`teHowManyElements:: Exit()`);\r\n  return objElements.length;\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n/**\r\n* @param {string | number | Promise<string | number>} value\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n    sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n/**\r\n* @param {Function | import(\"selenium-webdriver/lib/by\").By} selector\r\n*/\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n      click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function authenticateToOKTA(){\r\n  // Click on 'Sign In'\r\n  await click(By.xpath('//button[@id=\"guest_signin_split_button-action\"]/span'));\r\n  //Okta\r\n  await click(By.xpath(`//*[@id=\"okta-signin-username\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3342220"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3342220"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3342220"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3342220"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3342220"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-06-05 05:26:14",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3764210,
            "testName": "JY-Slack Login + Post Msg SIN/SYD",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 1,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 25,
            "httpTimeLimit": 14,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "//modified on 10-8-21 removing http authentication settings and \r\n//uncommented the okta login lines.\r\nimport { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n  \r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n \r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 908 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3764210"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3764210"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3764210"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3764210"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3764210"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3764210"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-11-15 16:24:11",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3261052,
            "testName": "JY-Slack Login + Upload File GUR",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 59,
            "targetTime": 25,
            "httpTimeLimit": 6,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\nimport assert from 'assert';\n\nlet fileFolder = 'UC8-Upload';\n\n\nrunScript();\n\nasync function runScript() {\n    // Generate a random text file for upload\n    var myFilePath = await uploads.generateRandomTextFile(1024);\n    var fileName = await myFilePath.slice(-14);\n\n    await configureDriver();\n    \n    /////////Logging In via Okta\\\\\\\\\\\\\\\\\\\\\\\n    //Load slack Login Page \n    await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\n\n    // Start Login\n    markers.start('Slack Login');\n  \n    //Type in Workspace Name\n    //Click 'Continue'\n    //Click 'Sign in with Okta'\n    await typeText('aexp-hr', By.id(`domain`));\n    await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\n    //4-18-22 updated id variable to end with `_okta` \n    //await click(By.id(`enterprise_member_guest_account_signin_link`));\n    await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\n\n    // Take Snapshot\n    //await driver.takeScreenshot();\n  \n    //Enter Username and Pwd\n    //Click 'Next'\n    //Click on 'Sign In' to Login\n    await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\n    await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n    await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\n    await click(By.id(`okta-signin-submit`));\n    // Take Snapshot\n    await driver.takeScreenshot(); \n    // Stop Login\n    markers.stop('Slack Login');\n  \n    /////////Slack Loads\\\\\\\\\\\\\\\\\\\\\\\\\n    //Start Slack Loads\n    markers.start('Slack Loading');\n\n\n    ////////Uploading the File Begins\\\\\\\\\\\\\\\\\\\\\\\\\n    //File Upload\n    //Click Attachments & Shortcuts\n    //Click Upload from your computer\n    await click(By.css(`[aria-label=\"Attachments & shortcuts\"]`));\n    await click(By.css('[aria-label=\"Last item in group attach, Upload from your computer\"]'))\n\n \n    //Stop Slack Loading\n    markers.stop('Slack Loading');\n\n    // Locate the file input element\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\n\n    // Send the file path to the input element\n    await inputElement.sendKeys(myFilePath);\n    // Take Snapshot\n    await driver.takeScreenshot();\n\n\n    //Start Upload File\n    //4-29-22 adding lines 85-96 for upload validation. Commented out lines\n    //82-84. \n    markers.start('Upload File');\n    //Click send Message\n    // Verify the uploaded file appears in the file list\n    await click(By.css('[aria-label=\"Send now\"]'));\n    //await driver.wait(until.elementLocated(By.xpath(`//span=[contains(text(),\"`+fileName+`\")]`)));\n    //await driver.wait(until.elementLocated(By.xpath(`//span[contains(text(),\"`+fileName+`\")]`)));\n    //await driver.takeScreenshot();\n    //await markers.stop('Upload File');\n\n    //Added: 06/May/22 - aamiles: Added in logic to find filename in main window.\n    fileName = myFilePath.substring(myFilePath.lastIndexOf('/')+1);\n    var strUploadingXPath = `//div[@class=\"p-workspace__primary_view\"]//div[@class=\"c-files_container\"]//span[text()=\"${fileName}\"]`;\n    consoleLog(`Waiting for upload to complete`);\n    await driver.wait(until.elementLocated(By.xpath(strUploadingXPath)));\n\n    markers.stop('Upload File');\n    //markers.set(`File uploaded: ${fileName.replace(/\\./g,` `)}`);\n\n    await driver.takeScreenshot();\n}\n    \n\n\nasync function findElementWithText(text) {\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\n}\nasync function markerClick(selector, markerStop, markerStart) {\n  await driver.findElement(selector);\n  await markers.stop(markerStop);\n  await markers.start(markerStart);\n  await click(selector);\n}\n\nasync function configureDriver() {\n  await driver.manage().window().setRect({\n    width: 1500,\n    height: 1053 });\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function consoleLog(strLogString) {\n    var m = new Date();\n    var dateString =\n        m.getUTCFullYear() + \"/\" +\n        (\"0\" + (m.getUTCMonth() + 1)).slice(-2) + \"/\" +\n        (\"0\" + m.getUTCDate()).slice(-2) + \" \" +\n        (\"0\" + m.getUTCHours()).slice(-2) + \":\" +\n        (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" +\n        (\"0\" + m.getUTCSeconds()).slice(-2) + \":\" +\n        (\"0\" + m.getUTCMilliseconds());\n\n    console.log(`${dateString}: ${strLogString}`);\n    if (typeof boolLogAsMarkers !== 'undefined') {\n        if (boolLogAsMarkers) {\n            markers.set(strLogString.replace(/\\./g,` `));\n        }\n    }\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3261052"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3261052"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3261052"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3261052"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3261052"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3261052"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-11-16 04:00:12",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3262627,
            "testName": "JY-Slack Login + Upload File GUR",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 59,
            "targetTime": 25,
            "httpTimeLimit": 6,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\nimport assert from 'assert';\n\nlet fileFolder = 'UC8-Upload';\n\n\nrunScript();\n\nasync function runScript() {\n    // Generate a random text file for upload\n    var myFilePath = await uploads.generateRandomTextFile(1024);\n    var fileName = await myFilePath.slice(-14);\n\n    await configureDriver();\n    \n    /////////Logging In via Okta\\\\\\\\\\\\\\\\\\\\\\\n    //Load slack Login Page \n    await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\n\n    // Start Login\n    markers.start('Slack Login');\n  \n    //Type in Workspace Name\n    //Click 'Continue'\n    //Click 'Sign in with Okta'\n    await typeText('aexp-hr', By.id(`domain`));\n    await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\n    //4-18-22 updated id variable to end with `_okta` \n    //await click(By.id(`enterprise_member_guest_account_signin_link`));\n    await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\n\n    // Take Snapshot\n    //await driver.takeScreenshot();\n  \n    //Enter Username and Pwd\n    //Click 'Next'\n    //Click on 'Sign In' to Login\n    await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\n    await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n    await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\n    await click(By.id(`okta-signin-submit`));\n    // Take Snapshot\n    await driver.takeScreenshot(); \n    // Stop Login\n    markers.stop('Slack Login');\n  \n    /////////Slack Loads\\\\\\\\\\\\\\\\\\\\\\\\\n    //Start Slack Loads\n    markers.start('Slack Loading');\n\n\n    ////////Uploading the File Begins\\\\\\\\\\\\\\\\\\\\\\\\\n    //File Upload\n    //Click Attachments & Shortcuts\n    //Click Upload from your computer\n    await click(By.css(`[aria-label=\"Attachments & shortcuts\"]`));\n    await click(By.css('[aria-label=\"Last item in group attach, Upload from your computer\"]'))\n\n \n    //Stop Slack Loading\n    markers.stop('Slack Loading');\n\n    // Locate the file input element\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\n\n    // Send the file path to the input element\n    await inputElement.sendKeys(myFilePath);\n    // Take Snapshot\n    await driver.takeScreenshot();\n\n\n    //Start Upload File\n    //4-29-22 adding lines 85-96 for upload validation. Commented out lines\n    //82-84. \n    markers.start('Upload File');\n    //Click send Message\n    // Verify the uploaded file appears in the file list\n    await click(By.css('[aria-label=\"Send now\"]'));\n    //await driver.wait(until.elementLocated(By.xpath(`//span=[contains(text(),\"`+fileName+`\")]`)));\n    //await driver.wait(until.elementLocated(By.xpath(`//span[contains(text(),\"`+fileName+`\")]`)));\n    //await driver.takeScreenshot();\n    //await markers.stop('Upload File');\n\n    //Added: 06/May/22 - aamiles: Added in logic to find filename in main window.\n    fileName = myFilePath.substring(myFilePath.lastIndexOf('/')+1);\n    var strUploadingXPath = `//div[@class=\"p-workspace__primary_view\"]//div[@class=\"c-files_container\"]//span[text()=\"${fileName}\"]`;\n    consoleLog(`Waiting for upload to complete`);\n    await driver.wait(until.elementLocated(By.xpath(strUploadingXPath)));\n\n    markers.stop('Upload File');\n    //markers.set(`File uploaded: ${fileName.replace(/\\./g,` `)}`);\n\n    await driver.takeScreenshot();\n}\n    \n\n\nasync function findElementWithText(text) {\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\n}\nasync function markerClick(selector, markerStop, markerStart) {\n  await driver.findElement(selector);\n  await markers.stop(markerStop);\n  await markers.start(markerStart);\n  await click(selector);\n}\n\nasync function configureDriver() {\n  await driver.manage().window().setRect({\n    width: 1500,\n    height: 1053 });\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\n\n\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function consoleLog(strLogString) {\n    var m = new Date();\n    var dateString =\n        m.getUTCFullYear() + \"/\" +\n        (\"0\" + (m.getUTCMonth() + 1)).slice(-2) + \"/\" +\n        (\"0\" + m.getUTCDate()).slice(-2) + \" \" +\n        (\"0\" + m.getUTCHours()).slice(-2) + \":\" +\n        (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" +\n        (\"0\" + m.getUTCSeconds()).slice(-2) + \":\" +\n        (\"0\" + m.getUTCMilliseconds());\n\n    console.log(`${dateString}: ${strLogString}`);\n    if (typeof boolLogAsMarkers !== 'undefined') {\n        if (boolLogAsMarkers) {\n            markers.set(strLogString.replace(/\\./g,` `));\n        }\n    }\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3262627"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3262627"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3262627"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3262627"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3262627"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3262627"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-09-26 15:57:42",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3155119,
            "testName": "Messaging - Outlook - Compose - Send - Verify - Logout",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 80,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nlet myemail = 'svc.thouseyeexo@aexp.com';\r\n\r\n// DEFINED O365 password and stored in MSGEXO-TE-PWD\r\n\r\nasync function runScript() {\r\n\r\n  // Configure\r\n  await configureDriver();\r\n\r\n  markers.start('Login');\r\n  // Goto outlook.office.com\r\n  await driver.get('https://mymail.aexp.com');\r\n\r\n  // Enter 'svc.thouseyeexo@aexp.com' service account\r\n  await typeText('svc.thouseyeexo@aexp.com', By.id(`i0116`));\r\n  await click(By.id(`idSIButton9`));\r\n  await typeText('svc.thouseyeexo', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('MSGEXO-TE-PWD'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In'\r\n  await click(By.id(`okta-signin-submit`));\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'No'\r\n  await click(By.id('idBtn_Back'));\r\n  markers.stop('Login');\r\n\r\n  markers.start('Compose Mail');\r\n  //BELOW CODE TO TEST CREATING AND SENDING EMAIL FROM OUTLOOK\r\n  // Click on 'New message'\r\n  //await click(By.id(`id__7`));\r\n\r\n    //let new_message_button = By.xpath(\"//span[text()='New message']\"); Commented out JA 6-17-22\r\n    let new_message_button = By.xpath(`//span[text()=\"New message\" or text()='New mail']`);\r\n    await click(new_message_button);\r\n\r\n    //change 11.24.21- let to_box_locator = By.xpath(`//div[contains(.,\"To\")]/../input`);\r\n    // Updated below line to say //div instead of //input 05-31-2022 AMO\r\n    let to_box_locator = By.xpath(`//div[@aria-label=\"To\"]`);\r\n    let recipient_email = 'RoundTrip@Roundtrip.aexp.com'\r\n\r\n    await driver.wait(until.elementLocated(to_box_locator));\r\n    await driver.wait(until.elementIsVisible(driver.findElement(to_box_locator)));\r\n    await typeText(recipient_email, to_box_locator);\r\n\r\n    // Verify that the recipient address was typed correctly. If not, try again.\r\n    let to_box = await driver.findElement(to_box_locator);\r\n    let value = await to_box.getAttribute('value');\r\n    if (value != recipient_email){\r\n        await to_box.clear()\r\n        await typeText(recipient_email, to_box_locator);\r\n    }\r\n\r\n\r\n  //await typeText('RoundTrip@Roundtrip.aexp.com', By.css('input[aria-label=To]'));\r\n  //await driver.sleep(3000);\r\n  //await driver.switchTo().activeElement().sendKeys(\"RoundTrip@Roundtrip.aexp.com\");\r\n  \r\n\r\n  // Type a subject\r\n  //Update \"Message body\" to \"Message body, press Alt+F10 to exit\" JA 7.20.22\r\n  let subject = \"Hello \" + Date.now();\r\n  await typeText(subject, By.xpath(`//input[@placeholder=\"Add a subject\"]`));\r\n  await typeText(subject, By.xpath(`//div[@aria-label=\"Message body, press Alt+F10 to exit\"]`));\r\n  markers.stop('Compose Mail');\r\n\r\n  // Click on 'Send', wait for compose window to disappear\r\n  markers.start('Send Mail');\r\n  await click(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n  await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//span[contains(text(),'Select an item to read')]`))));\r\n  markers.stop('Send Mail');\r\n\r\n  markers.start('Verify Mail Sent');\r\n  //THIS CODE WILL SEARCH FOR EMAIL\r\n  // Open 'Sent Items'\r\n  await click(By.xpath(`//span[contains(text(),\"Navigation pane\")]/..//span[contains(text(),\"Sent Items\")]`));\r\n\r\n  // Find the email that was sent\r\n  await findElementWithText(subject);\r\n  await driver.takeScreenshot();\r\n  markers.stop('Verify Mail Sent');\r\n\r\n  //Validate Inbox - take screenshot\r\n  markers.start('Verify Inbox Receipt');\r\n  await driver.sleep(12000);\r\n  await click(By.xpath(`//div[@title=\"Inbox\"]`));\r\n  await findElementWithText(subject);\r\n  await driver.takeScreenshot();\r\n  markers.stop('Verify Inbox Receipt');\r\n\r\n  markers.start('Sign Out');\r\n  // ALL OF THE BELOW IS NEEDED FOR LOGOUT\r\n  // Click on 'Thousand Eyes'\r\n  await click(By.css(`[aria-label=\"Account manager for svc.ThousEyeEXO\"]`));\r\n  //await click(By.id(`meInitialsButton`));\r\n\r\n//   // Wait for sign out link to be visible\r\n//   let sign_out_link = await driver.wait(until.elementLocated(By.id(`mectrl_body_signOut`)));\r\n//   // await driver.wait(until.elementIsVisible(sign_out_link));\r\n\r\n//   // Click on 'Sign out'\r\n//   await click(By.id(`mectrl_body_signOut`));\r\n\r\n\r\n  await driver.wait(until.elementLocated(By.xpath(`//a[contains(.,'Sign out')]`)));\r\n  await click(By.xpath(`//a[contains(.,'Sign out')]`));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Sign Out');\r\n\r\n}\r\n\r\n\r\nasync function findElementWithText(text) {\r\n  try {\r\n    await driver.wait(until.elementLocated(By.xpath(`//*[contains(text(),\"${text}\")]`)), 1000);\r\n  }\r\n  catch (e) {\r\n    await driver.navigate().refresh();\r\n    await driver.wait(until.elementLocated(By.xpath(`//*[contains(text(),\"${text}\")]`)), 1000);\r\n  }\r\n}\r\n\r\nasync function clickText(text) {\r\n  await click(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\n\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\n\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n    return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n    return false; // Will throw an error if element is not connected to the document\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      let strLogString = `${numberOfAttempts.toString()} - ${attemptError.name}`;\r\n      markers.set(strLogString.replace(/\\./g,` `));\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3155119"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3155119"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3155119"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3155119"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3155119"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3155119"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-11-10 15:20:42",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3250913,
            "testName": "Messaging - Outlook - Compose - Send - Verify - Logout",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://mymail.aexp.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 111,
            "targetTime": 40,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nlet myemail = 'svc.thouseyeexo@aexp.com';\r\n\r\n// DEFINED O365 password and stored in MSGEXO-TE-PWD\r\n\r\nasync function runScript() {\r\n\r\n  // Configure\r\n  await configureDriver();\r\n\r\n  markers.start('Login');\r\n  // Goto outlook.office.com\r\n  await driver.get('https://mymail.aexp.com');\r\n\r\n  // Enter 'svc.thouseyeexo@aexp.com' service account\r\n  await typeText('svc.thouseyeexo@aexp.com', By.id(`i0116`));\r\n  await click(By.id(`idSIButton9`));\r\n  await typeText('svc.thouseyeexo', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('MSGEXO-TE-PWD'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In'\r\n  await click(By.id(`okta-signin-submit`));\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'No'\r\n  await click(By.id('idBtn_Back'));\r\n  markers.stop('Login');\r\n\r\n  markers.start('Compose Mail');\r\n  //BELOW CODE TO TEST CREATING AND SENDING EMAIL FROM OUTLOOK\r\n  // Click on 'New message'\r\n  //await click(By.id(`id__7`));\r\n\r\n    //let new_message_button = By.xpath(\"//span[text()='New message']\"); Commented out JA 6-17-22\r\n    let new_message_button = By.xpath(`//span[text()=\"New message\" or text()='New mail']`);\r\n    await click(new_message_button);\r\n\r\n    //change 11.24.21- let to_box_locator = By.xpath(`//div[contains(.,\"To\")]/../input`);\r\n    // Updated below line to say //div instead of //input 05-31-2022 AMO\r\n    let to_box_locator = By.xpath(`//div[@aria-label=\"To\"]`);\r\n    let recipient_email = 'RoundTrip@Roundtrip.aexp.com'\r\n\r\n    await driver.wait(until.elementLocated(to_box_locator));\r\n    await driver.wait(until.elementIsVisible(driver.findElement(to_box_locator)));\r\n    await typeText(recipient_email, to_box_locator);\r\n\r\n    // Verify that the recipient address was typed correctly. If not, try again.\r\n    let to_box = await driver.findElement(to_box_locator);\r\n    let value = await to_box.getAttribute('value');\r\n    if (value != recipient_email){\r\n        await to_box.clear()\r\n        await typeText(recipient_email, to_box_locator);\r\n    }\r\n\r\n\r\n  //await typeText('RoundTrip@Roundtrip.aexp.com', By.css('input[aria-label=To]'));\r\n  //await driver.sleep(3000);\r\n  //await driver.switchTo().activeElement().sendKeys(\"RoundTrip@Roundtrip.aexp.com\");\r\n  \r\n\r\n  // Type a subject\r\n  //Update \"Message body\" to \"Message body, press Alt+F10 to exit\" JA 7.20.22\r\n  let subject = \"Hello \" + Date.now();\r\n  await typeText(subject, By.xpath(`//input[@placeholder=\"Add a subject\"]`));\r\n  await typeText(subject, By.xpath(`//div[@aria-label=\"Message body, press Alt+F10 to exit\"]`));\r\n  markers.stop('Compose Mail');\r\n\r\n  // Click on 'Send', wait for compose window to disappear\r\n  markers.start('Send Mail');\r\n  await click(By.xpath(`//button[@aria-label=\"Send\"]`));\r\n  await driver.wait(until.elementIsVisible(driver.findElement(By.xpath(`//span[contains(text(),'Select an item to read')]`))));\r\n  markers.stop('Send Mail');\r\n\r\n  markers.start('Verify Mail Sent');\r\n  //THIS CODE WILL SEARCH FOR EMAIL\r\n  // Open 'Sent Items'\r\n  await click(By.xpath(`//span[contains(text(),\"Navigation pane\")]/..//span[contains(text(),\"Sent Items\")]`));\r\n\r\n  // Find the email that was sent\r\n  await findElementWithText(subject);\r\n  await driver.takeScreenshot();\r\n  markers.stop('Verify Mail Sent');\r\n\r\n  //Validate Inbox - take screenshot\r\n  markers.start('Verify Inbox Receipt');\r\n  await driver.sleep(12000);\r\n  await click(By.xpath(`//div[@title=\"Inbox\"]`));\r\n  await findElementWithText(subject);\r\n  await driver.takeScreenshot();\r\n  markers.stop('Verify Inbox Receipt');\r\n\r\n  markers.start('Sign Out');\r\n  // ALL OF THE BELOW IS NEEDED FOR LOGOUT\r\n  // Click on 'Thousand Eyes'\r\n  await click(By.css(`[aria-label=\"Account manager for svc.ThousEyeEXO\"]`));\r\n  //await click(By.id(`meInitialsButton`));\r\n\r\n//   // Wait for sign out link to be visible\r\n//   let sign_out_link = await driver.wait(until.elementLocated(By.id(`mectrl_body_signOut`)));\r\n//   // await driver.wait(until.elementIsVisible(sign_out_link));\r\n\r\n//   // Click on 'Sign out'\r\n//   await click(By.id(`mectrl_body_signOut`));\r\n\r\n\r\n  await driver.wait(until.elementLocated(By.xpath(`//a[contains(.,'Sign out')]`)));\r\n  await click(By.xpath(`//a[contains(.,'Sign out')]`));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Sign Out');\r\n\r\n}\r\n\r\n\r\nasync function findElementWithText(text) {\r\n  try {\r\n    await driver.wait(until.elementLocated(By.xpath(`//*[contains(text(),\"${text}\")]`)), 1000);\r\n  }\r\n  catch (e) {\r\n    await driver.navigate().refresh();\r\n    await driver.wait(until.elementLocated(By.xpath(`//*[contains(text(),\"${text}\")]`)), 1000);\r\n  }\r\n}\r\n\r\nasync function clickText(text) {\r\n  await click(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\n\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\n\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\n\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n    return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n    return false; // Will throw an error if element is not connected to the document\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      let strLogString = `${numberOfAttempts.toString()} - ${attemptError.name}`;\r\n      markers.set(strLogString.replace(/\\./g,` `));\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3250913"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3250913"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3250913"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3250913"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3250913"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3250913"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-11-09 20:05:05",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2384029,
            "testName": "My-info test-GSOTE1 timeout 091121",
            "type": "web-transactions",
            "interval": 300,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://egug.login.us2.oraclecloud.com/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n\r\n    const settings = test.getSettings();\r\n\r\n    // Load page\r\n    await driver.get(settings.url); \r\n    \r\n    //Start Login\r\n    markers.start('MyInfo Login');\r\n\r\n    await typeText(credentials.get('MyInfo_ServiceAcccount'), By.id(`okta-signin-username`));\r\n\r\n    await typeText(credentials.get('MyInfo_svc_Password'), By.id(`okta-signin-password`));\r\n\r\n    await pressEnter(By.id(`okta-signin-password`));\r\n\r\n    //Take Snapshot\r\n    await driver.takeScreenshot();\r\n    \r\n    //Stop Login\r\n    markers.stop('MyInfo Login');\r\n\r\n     //Start HomePage\r\n    markers.start('MyInfo HomePage');\r\n    // Click on 'You have a new home page!'\r\n\tawait click(By.css(`#pt1\\\\3A commandLink1`));\r\n\r\n    await click(By.css(`#pt1\\\\3A_UIScmil1u\\\\3A\\\\3Aicon`));\r\n\r\n    //Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n     //Stop HomePage\r\n    markers.stop('MyInfo HomePage');\r\n\r\n    // Click on 'Sign Out'\r\n\tawait click(By.css(`#pt1\\\\3A_UISlg1`));\r\n\r\n    // Click on 'Confirm'\r\n\tawait click(By.id(`Confirm`));\r\n    \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n    await driver.findElement(selector)\r\n                .sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2384029"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2384029"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2384029"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2384029"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2384029"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2384029"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-11-06 13:14:08",
            "createdBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 4359907,
            "testName": "OneDrive_FileDownload_Graph_Cert",
            "type": "web-transactions",
            "interval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://drive.aexp.com/personal/sathiya_kamalanathan1_aexp_com/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 30,
            "targetTime": 5,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { markers, credentials } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n\r\nconst clientId = credentials.get('SPOCertClientID');        // Azure Application (client) ID\r\nconst tenantId = credentials.get('SPOCertTenantID');        // Azure Directory (tenant) ID\r\nconst thumbprint = credentials.get('SPOCertThumbPrint')     // Certificate thumbprint\r\nconst oauthUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`; //v2 Endpoint\r\nconst encryptedPrivateKey = `b33d5fa6460774896b191a09a3348bad:4294d24658941cd8da440e5acb8b47b9cf9762ee67d697337eeabc5a429454f268fa654c218d674140df3a506c9b232205710819414ac1753b8933e21cc17a2ad4a6d1ee52dd43c49325b4d26e4d91110655b18bb5ec170d6807badcb5b179a167ed0b35d94df7a8bcde36b70e859ceedb096190bbcb2608ccab149e94fd4843838680c06874706ab3945a83eaed5740134104c40179693e46a6287610b94a0b645dada98b95efa281f5a750224dbda470968c44ce2b9a986b71d1f8eb59b8353464224516234e724843b59a862d605bca042af0e7469578aa105da46b54bbbf8e3585daf694cd94e503a18b0913882179a43c047025b060628235f4b721c26dd5d1ee3725442c46c093448ce2d5173cde6f1ea3eaa4c6d7f65b59905282114cc1904c0b98d6b4dc7fd55219f920df6778d3e4f82ed04602e001501335743b15f9b2ed6ee46c1a9a12ee7f25c9b448bfaff3dc1f10e334360cb6acf5dd36f06863cdf8b99fa50c3132042f6d71336cdf39e3e57389bf22c89dc611fe10120073d35bf982d4ea2dc2bea4b9396678ac9df2a9a1fb560904f46e331005164087be6a8f84ae02461d739969980b73c3b8e1cc6e646455f441313386372e80ca5fbbf416ce16b49a00701191b7555f4c41422dff415572de7ae008f3e2e040ec7068fab5b12342433ed831603692adebeefe69fc42a366a775183c8e5e8e16928aac1427ece1f2103855fa8b625a66867c84a4a98e978b2ff4ce72eeda04868aff0b62ed07cb81f8b59a6745902d6f18722f771ecb1b8b64a6516c6408aae170192c8ebf89a9b055d4b2660550028f7286785a3bf74537c2747ec0d7d2264af7dfe8aa1b48591bcc42fac2e930b3e140396de9d082e99175577e73b2a7440d3c19a4ced9f6a3cf47493434fc1c6bdca538c0c828c918fbb9045eea55fe69c00baa635d5a978672c1bdc7c5381aad795d2a8c67dfcacd5c8b2e5d1045d55e2f54e9d4f57db93e47f4df38fcb76768291a0a73275cecc68c4aea010f49ff7a7cb3e3bf5916dcc2b4c266da50319865902720963867ebe2ec947df0c43c8e2db3e02cc6866f33829e6b4c72a72ff7f7a9041c7ff01221e3042eefb5a26fe98c3d989cdac430e0c65c4246053229e07978ab208d521358e244b72ddd9dac6516968f89563d1ff169bb44a92ad73465e6bbb3d2db8357f52c6283d7b40ede91ae9998d53e35dc1d10d99808776e1a829e841a7e1bb9fbce83626669434f61cb1362e0b5d00a7f47594ec52ee712c35acc5c5e1e6abd4312c444ff12e9ddc09707f168f474c83684f89de4ab41a53a18f2018179c28eddf965d63c896a2b498a84eb6fb70f662bc822c4ab52204a2e49609288858fb8055ef9f9f9f1d04d10bb231c2a541b0f8ec7a2c090e0193108126055a524e28ba872b5314e080ad2d83d5fa29ea1669ee610b86630681b995ae8e83a69c8bd2d6449782ddc38c6f73e6e4b1b7b5d2fe95c86b52bd5db5ddeccc2008e7609256b35f65ccc3857d1c8c17b0e9f51b67b03c981e7c8248a02d87504aceb9002f4e171ef9a81689b89192ec95bc11abc617836c7d5df5b817e80918ae857a0b2d24bf21e423eedb3d5297ce5f5141e27a8f75680a9bd1c5bfb88718443aefbac9e979f6557a31d2d62c08c60ada13583592f3d8f79edbb1e42d50725dfed1cbb213263df4042a2fda6972982dcf6afb5fadcccd7d160854a26a54bd586c219548b15eeff1a3fde28eca157d1e100397332a2046489457f24a293cb3b4568034c8df3c72a174b7c649acd8188c2337214b39295d3c7aa8fbc0481ef3f9d53791bdab9827838e3450e8dea222420179c08a39629f8889f0758279340a9555c566174a295c5f2a14b2f85deb9fc46bc86829b96984c9ed70a0a6d6578a938aa9adf41c5da2b97eaf0c1569d88c665345ecb8b2338314fb3e8062f769e7ecdb03fb5cd2c6f8da63663eeb8e34949247e2e08ab8e7757ee4a7f98fc5128c366d1b35c46d1e715be80a7d465fe6bd0567d0f392a5d77df0c9d390735bc56f5572a2a891d1d0cd054221c41da7bcc56a0c9415a9dcbe366a4a39ac23ac7298310e441a4d473eef448d2a5c090dcc35c1ba00c3085e0eb425a132a5ced8d7df4c796e4fe5b05cac3f2c9e1ae0a37048bcf40b4d8c5b4abefabb01bde380601e7733c9aa5cf9fae2c5a555e00d7a3df00529a29075e3c02468823591cd9dc12db43586d1c386a0d75b54c57f95486aad260245bf0b2ead02f8f67d8a2820c579a90dc6836d17b4e96ed4d73cf6a62cd732b89b5458103507d03b4257a71fe3dbf36d65a04f69dd2e96fe7d25a5787abe0ee63c1ffa1ae83670ce7cdb71421473f6a8b40b545`;\r\nconst strSiteURL = 'https://graph.microsoft.com/v1.0/users/ae1c0d3b-5b5a-46ce-b1d3-73f04f89a95c/drive/items/900d9974-5b1f-472c-b10a-4d2521617cc2/Content'; //ae1c0d3b-5b5a-46ce-b1d3-73f04f89a95c is userid of Sathiya\r\nconst passphrase = credentials.get('key-tEyes-SharePoint-OneDrive');\r\nconst privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n    // Generate Signed JWT\r\n    let signed_jwt = await generateSignedJWT();\r\n    \r\n    //Fetch the Access token from the OAuth service\r\n    let accessToken = await getOAUTHToken(signed_jwt);\r\n\r\n\r\n    // Download Content\r\n    markers.start('DownloadOneDriveContent');\r\n        let resp = await fetch(strSiteURL, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'authorization': accessToken\r\n            }\r\n        });\r\n    if (resp.status != 200) { throw new Error(`Received:${resp.status}:${resp.statusText}`); }\r\n    if (resp.status == 200) { \r\n        markers.set(`SUCCESS:${resp.status}:${resp.statusText}`);\r\n        console.log(await resp.text()); }\r\n    markers.stop('DownloadOneDriveContent');\r\n\r\n};\r\n\r\nasync function getOAUTHToken(_strSignedJWT){\r\n    markers.start('RetrieveAccessToken');\r\n    let formParams = {\r\n        \"redirect_uri\": \"http://localhost/\",\r\n        \"grant_type\": \"client_credentials\",\r\n        \"client_id\": clientId,\r\n        \"scope\": \"https://graph.microsoft.com/.default\",\r\n        \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n        \"client_assertion\": _strSignedJWT\r\n    }\r\n    const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n    const oauthRequest = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n            'Authorization': 'Bearer ' + _strSignedJWT\r\n        },\r\n        body: formBody\r\n    }\r\n    const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n    if (!oauthResponse.ok) {\r\n        const oauthErrorResponseText = await oauthResponse.text();\r\n        throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n    }\r\n\r\n    let responseJson = await oauthResponse.json();\r\n    const strAccessToken = responseJson.access_token;\r\n    console.log(strAccessToken)\r\n    markers.stop('RetrieveAccessToken');\r\n    return strAccessToken;\r\n}\r\n\r\nfunction generateSignedJWT() {\r\n    // Construct the signed JWT\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), { key: privateKey })\r\n    return (jwt_tosign + \".\" + base64Url(signature))\r\n\r\n    function base64Url(data) {\r\n        return Buffer.from(data).toString('base64').replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\r\n    }\r\n\r\n    function hexStringTo64(data) {\r\n        return Buffer.from(data, \"hex\").toString('base64');\r\n    }\r\n\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass) {\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':');\r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    \r\n    deciphered += decipher.final(\"utf8\");\r\n    \r\n    return deciphered;\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4359907"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4359907"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4359907"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4359907"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4359907"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4359907"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-11-14 22:51:48",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 4394249,
            "testName": "PowerApps V1 ",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://make.powerapps.com/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 120,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n\r\n    const settings = test.getSettings();\r\n\r\n    // Load page\r\n    await driver.get(settings.url); \r\n    \r\n    // Click on 'Enter your email, phone, or Skype.'\r\n\tawait click(By.id(`i0116`));\r\n\r\n    await typeText(credentials.get('PowerApps_SVC'), By.id(`i0116`));\r\n\r\n    // Click on 'Next'\r\n\tawait click(By.id(`idSIButton9`));\r\n\r\n    await click(By.id(`okta-signin-username`));\r\n\r\n    await typeText(credentials.get('PowerApps_SVC_Okta'), By.id(`okta-signin-username`));\r\n\r\n    await typeText(credentials.get('PowerApps_PW'), By.id(`okta-signin-password`));\r\n\r\n    await pressEnter(By.id(`okta-signin-password`));\r\n\r\n    // Click on 'No'\r\n\tawait click(By.id(`idBtn_Back`));\r\n\r\n    await click(By.css(`.\\\\_8ZYZKvxC8bvw1xgQGSkvvA\\\\=\\\\=`));\r\n\r\n    // Click on 'Sign out'\r\n\tawait click(By.id(`mectrl_body_signOut`));\r\n    \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 30 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n    await driver.findElement(selector)\r\n                .sendKeys(Key.RETURN);\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4394249"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4394249"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4394249"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4394249"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4394249"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4394249"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-11-08 15:57:28",
            "createdBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 4369039,
            "testName": "Process Unity - TSM",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.processunity.net/axp-tsm/Default.aspx",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 45,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  const settings = test.getSettings();\r\n\r\n  // Load page\r\n  markers.start('Login');\r\n  await driver.get(settings.url);\r\n\r\n  await click(By.id(`okta-signin-username`));\r\n\r\n  await typeText(credentials.get('Process_Unity_TSM_SVC'), By.id(`okta-signin-username`));\r\n\r\n  await click(By.id(`okta-signin-password`));\r\n\r\n  await typeText(credentials.get('Process_Unity_TSM_PW'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  markers.stop('Login');\r\n\r\n  // Click on 'Sign In'\r\n\r\n  markers.start('Home Page');\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Make driver sleep for 20 seconds | Rather than this sleep we may want to inspect for one of the last objects to load on the page to verify the page loaded successfully before logout\r\n  //await driver.sleep(20000);\r\n  await driver.findElement(By.xpath(\"//*[text()[contains(.,'WORKSPACE')]]\"));\r\n  \r\n  await driver.takeScreenshot();\r\n  markers.stop('Home Page');\r\n\r\n  // Click on 'DS'\r\n  markers.start('Logout');\r\n  await click(By.css(`[data-ui-test-id=\"profileInitials\"]`));\r\n\r\n  // Click on 'Logout'\r\n  await click(By.id(`LogoutMenuItem`));\r\n\r\n  // Click on 'OK'\r\n  await click(By.css(`.tiny .primary`));\r\n  await driver.takeScreenshot();\r\n  markers.stop('Logout');\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 45 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/4369039"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/4369039"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/4369039"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/4369039"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/4369039"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/4369039"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-05-10 16:09:26",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2869448,
            "testName": "Rahul pcap Akamai",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 39,
            "httpTimeLimit": 39,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "username": "svc.spoautomation@aexp.onmicrosoft.com",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\nimport { driver, markers, credentials, downloads, transaction } from 'thousandeyes';\nrunScript();\nasync function runScript() {\n  // Configure\n  await configureDriver();\n  // Page Load\n  markers.start('Page Load');\n  // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\n  await driver.get('https://spaces.aexp.com/teams/vgadde');\n  var actualTitle = await driver.getTitle();\n  markers.stop('Page Load');\n  \n  // Login process\n  //credentials.get('SPServiceaccount')\n  markers.start('Username');\n  await click(By.id(`i0116`));\n\n  await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\n  await click(By.id(`idSIButton9`));\n  markers.stop('Username');\n  // Enter Password\n  markers.start('OKTA Login');\n  await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\n  await driver.takeScreenshot();\n  await click(By.id(`okta-signin-submit`));\n  markers.stop('OKTA Login');\n  markers.start('Shared Documents');\n  await click(By.id('idBtn_Back'));\n  \n  await driver.wait(until.titleContains('Vgadde - Home'));\n\n\n  await driver.get('https://spaces.aexp.com/teams/vgadde/ThousandEyes/download');\nawait driver.takeScreenshot();\n  await click(By.css(`[aria-label=\"0CdW0MUPUn.txt\"] [data-icon-name=\"StatusCircleCheckmark\"]`));\n  \n  markers.stop('Shared Documents');\n \n  // Click on 'Download' and measure download time\n  // TODO: replace <your-filename> with the name of the file your downloading; eg. Public Cloud Performance Benchmark Report Final.pdf\n  markers.start('Download');\n  await click(By.css(`[data-icon-name=\"download\"]`));\n  await downloads.waitForDownload('0CdW0MUPUn.txt', 60000);\n\n  markers.stop('Download');\n  await driver.takeScreenshot();\n  // Logout\n    await markers.start('Logout');\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\n    \n    //await driver.takeScreenshot();   \n    await markers.stop('Logout'); \n}; \n\nasync function configureDriver() {\n  await driver.manage().window().setRect({\n    width: 1572,\n    height: 1133\n  });\n  await driver.manage().setTimeouts({\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n} \n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  await driver.findElement(selector)\n              .sendKeys(value);\n} \n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n} \n\nasync function click(selector) {\n  await simulateHumanDelay();\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n  async function attemptToClick() {\n      await driver.findElement(selector)\n                  .click().then(null, async function (err) {\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\n          await driver.findElement(selector)\n                      .click();\n      });\n  }\n} \n\nasync function isElementClickable(selector) {\n  try {\n      return await driver.findElement(selector).isDisplayed();\n  }\n  catch (error) {\n      return false; // Will throw an error if element is not connected to the document\n  }\n} \n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n      try {\n          numberOfAttempts += 1;\n          await attemptActionFn();\n      }\n      catch (error) {\n          attemptError = error;\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n          continue; // Attempt failed, reattempt\n      }\n      attemptError = null;\n      break; // Attempt succeeded, stop attempting\n  }\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n      throw attemptError;\n  }\n} \n\nasync function rightClick(selector) {\n  const element = await driver.findElement(selector);\n  await driver.actions({ bridge: true }).contextClick(element).perform();\n} ",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "desiredStatusCode": "401",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2869448"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2869448"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2869448"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2869448"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2869448"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2869448"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-02-23 08:07:19",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3514241,
            "testName": "SharePoint_FileUpload",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 75,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nlet fileFolder = 'UC8-Upload';\r\n\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    var myFilePath = await uploads.generateRandomTextFile(1024);\r\n    var fileName = await myFilePath.slice(-14);\r\nawait configureDriver();\r\n // Page Load\r\n    markers.start('Page Load');\r\n    \r\n    // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n    await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n    var actualTitle = await driver.getTitle();\r\n    markers.stop('Page Load');\r\n    markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n\tawait typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    markers.stop('Username');\r\n    markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id(`okta-signin-submit`));\r\n   markers.stop('OKTA Login');\r\n  markers.start('Shared Documents');\r\n  await click(By.id('idBtn_Back'));\r\n  await driver.takeScreenshot();\r\n  await driver.sleep(1000);\r\n    // Wait for backend page to load\r\n    await driver.wait(until.titleContains('Vamsi_Test'));\r\n    // Click on 'Documents'\r\n\t  await click(By.css(`[href=\"/teams/vgadde/ThousandEyes/Forms/AllItems.aspx\"] > .ms-Nav-linkText`));\r\n     markers.stop('Shared Documents');\r\n     markers.start('Upload File');\r\n    // Wait for the main page to load until the Upload button is present\r\n    await driver.wait(until.elementLocated(By.name(`Upload`)));\r\n    // Take a screenshot before uploading file\r\n \r\n    // Click Upload > Files\r\n    await click(By.name(`Upload`));\r\n    await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n    // Locate the file input element\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(myFilePath);\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"`+fileName+`\")]`)));\r\n    markers.stop('Upload File');\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n\r\n    \r\n}\r\nasync function findElementWithText(text) {\r\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\n\r\n",
            "desiredStatusCode": "403",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3514241"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3514241"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3514241"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3514241"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3514241"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3514241"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2023-03-16 14:21:46",
            "createdBy": "Bondada Raviteja (Bondada.Raviteja@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3566232,
            "testName": "SharePoint_FileUpload_Browser",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 80,
            "targetTime": 10,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nlet fileFolder = 'UC8-Upload';\r\n\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    var myFilePath = await uploads.generateRandomTextFile(1024);\r\n    var fileName = await myFilePath.slice(-14);\r\nawait configureDriver();\r\n // Page Load\r\n    markers.start('Page Load');\r\n    \r\n    // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n    await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n    var actualTitle = await driver.getTitle();\r\n    markers.stop('Page Load');\r\n    markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n\tawait typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    markers.stop('Username');\r\n    markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id(`okta-signin-submit`));\r\n   markers.stop('OKTA Login');\r\n  markers.start('Shared Documents');\r\n  await click(By.id('idBtn_Back'));\r\n  await driver.takeScreenshot();\r\n  await driver.sleep(1000);\r\n    // Wait for backend page to load\r\n    await driver.wait(until.titleContains('Vamsi_Test'));\r\n    // Click on 'Documents'\r\n\t  await click(By.css(`[href=\"/teams/vgadde/ThousandEyes/Forms/AllItems.aspx\"] > .ms-Nav-linkText`));\r\n     markers.stop('Shared Documents');\r\n     markers.start('Upload File');\r\n    // Wait for the main page to load until the Upload button is present\r\n    await driver.wait(until.elementLocated(By.name(`Upload`)));\r\n    // Take a screenshot before uploading file\r\n \r\n    // Click Upload > Files\r\n    await click(By.name(`Upload`));\r\n    await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n    // Locate the file input element\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(myFilePath);\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"`+fileName+`\")]`)));\r\n    markers.stop('Upload File');\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n\r\n    \r\n}\r\nasync function findElementWithText(text) {\r\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\n\r\n",
            "desiredStatusCode": "403",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "eager",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3566232"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3566232"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3566232"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3566232"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3566232"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3566232"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-03-31 14:27:37",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2737782,
            "testName": "SIN alert with no issue",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 70,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "username": "svc.spoautomation@aexp.onmicrosoft.com",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, uploads, transaction, authentication } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nlet fileFolder = 'UC8-Upload';\r\n\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    // Generate a random text file for upload\r\n    var myFilePath = await uploads.generateRandomTextFile(1024);\r\n    var fileName = await myFilePath.slice(-14);\r\nawait configureDriver();\r\n // Page Load\r\n    markers.start('Page Load');\r\n    \r\n    // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n    await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n    var actualTitle = await driver.getTitle();\r\n    markers.stop('Page Load');\r\n    markers.start('Username');\r\n    await click(By.id(`i0116`));\r\n\tawait typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n    await click(By.id(`idSIButton9`));\r\n    markers.stop('Username');\r\n    markers.start('OKTA Login');\r\n    await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await click(By.id(`okta-signin-submit`));\r\n  await driver.takeScreenshot();\r\n  await click(By.id('idBtn_Back'));\r\n   markers.stop('OKTA Login');\r\n   markers.start('Shared Documents');\r\n     await driver.takeScreenshot();\r\n   // await click(By.id(`idBtn_Back`));\r\n    await driver.sleep(1000);\r\n  \r\n\r\n    // Wait for backend page to load\r\n    await driver.wait(until.titleContains('Vgadde - Home'));\r\n  \r\n\r\n    // Click on 'Documents'\r\n\tawait click(By.css(`[href=\"/teams/vgadde/ThousandEyes/Forms/AllItems.aspx\"] > .ms-Nav-linkText`));\r\n     markers.stop('Shared Documents');\r\n        // Upload File\r\n    await markers.start('Upload File');\r\n\r\n    // Wait for the main page to load until the Upload button is present\r\n    await driver.wait(until.elementLocated(By.name(`Upload`)));\r\n\r\n    // Take a screenshot before uploading file\r\n    await driver.takeScreenshot();\r\n\r\n    // Click Upload > Files\r\n    await click(By.name(`Upload`));\r\n                  await click(By.css(`[name=\"Files\"] .ms-ContextualMenu-itemText`));\r\n\r\n    // Locate the file input element\r\n    await driver.wait(until.elementLocated(By.xpath(`//input[@type='file']`)));\r\n    var inputElement = await driver.findElement(By.xpath(`//input[@type='file']`));\r\n\r\n    // Send the file path to the input element\r\n    await inputElement.sendKeys(myFilePath);\r\n\r\n    // Verify the uploaded file appears in the file list\r\n    await driver.wait(until.elementLocated(By.xpath(`//button[contains(text(),\"`+fileName+`\")]`)));\r\n\r\n    await markers.stop('Upload File');\r\n\r\n   \r\n   \r\n    // Logout\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n\r\n    \r\n}\r\nasync function findElementWithText(text) {\r\n  return await driver.findElement(By.xpath(`//*[text()=\"${text}\"]`));\r\n}\r\nasync function markerClick(selector, markerStop, markerStart) {\r\n  await driver.findElement(selector);\r\n  await markers.stop(markerStop);\r\n  await markers.start(markerStart);\r\n  await click(selector);\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1500,\r\n    height: 1053 });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\n\r\n",
            "desiredStatusCode": "401",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2737782"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2737782"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2737782"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2737782"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2737782"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2737782"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-01-17 18:19:08",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2525508,
            "testName": "SIN myinfo deviation",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://egug.login.us2.oraclecloud.com/",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 45,
            "targetTime": 20,
            "httpTimeLimit": 20,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key } from 'selenium-webdriver';\r\nimport { driver, test, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n    \r\n    await configureDriver();\r\n\r\n    const settings = test.getSettings();\r\n\r\n    // Load page\r\n    await driver.get(settings.url); \r\n    \r\n    //Start Login\r\n    markers.start('MyInfo Login');\r\n\r\n    await typeText(credentials.get('MyInfo_ServiceAcccount'), By.id(`okta-signin-username`));\r\n\r\n    await typeText(credentials.get('MyInfo_svc_Password'), By.id(`okta-signin-password`));\r\n\r\n    await pressEnter(By.id(`okta-signin-password`));\r\n\r\n    //Take Snapshot\r\n    await driver.takeScreenshot();\r\n    \r\n    //Stop Login\r\n    markers.stop('MyInfo Login');\r\n\r\n     //Start HomePage\r\n    markers.start('MyInfo HomePage');\r\n    // Click on 'You have a new home page!'\r\n\tawait click(By.css(`#pt1\\\\3A commandLink1`));\r\n\r\n    await click(By.css(`#pt1\\\\3A_UIScmil1u\\\\3A\\\\3Aicon`));\r\n\r\n    //Take Snapshot\r\n    await driver.takeScreenshot();\r\n\r\n     //Stop HomePage\r\n    markers.stop('MyInfo HomePage');\r\n\r\n    // Click on 'Sign Out'\r\n\tawait click(By.css(`#pt1\\\\3A_UISlg1`));\r\n\r\n    // Click on 'Confirm'\r\n\tawait click(By.id(`Confirm`));\r\n    \r\n}\r\n\r\nasync function configureDriver() {\r\n    await driver.manage().setTimeouts({\r\n        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds\r\n    });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n    await simulateHumanDelay();\r\n    const element = await driver.findElement(selector);\r\n    await element.clear();\r\n    await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n    await driver.sleep(550);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n    await driver.findElement(selector)\r\n                .sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function click(selector) {\r\n    await simulateHumanDelay();\r\n\r\n    const configuredTimeouts = await driver.manage().getTimeouts();\r\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n    \r\n    async function attemptToClick() {\r\n        await driver.findElement(selector)\r\n                    .click();\r\n    }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n    const TIME_BETWEEN_ATTEMPTS = 100;\r\n    let numberOfAttempts = 0;\r\n    let attemptError;\r\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n        try {\r\n            numberOfAttempts += 1;\r\n            await attemptActionFn();\r\n        }\r\n        catch (error) {\r\n            attemptError = error;\r\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n            continue; // Attempt failed, reattempt\r\n        }\r\n        attemptError = null;\r\n        break; // Attempt succeeded, stop attempting\r\n    }\r\n\r\n    const wasAttemptSuccessful = !attemptError;\r\n    if (!wasAttemptSuccessful) {\r\n        throw attemptError;\r\n    }\r\n}\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2525508"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2525508"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2525508"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2525508"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2525508"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2525508"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-01-17 18:18:16",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2525507,
            "testName": "SIN slack deviation",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 1,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 86,
            "targetTime": 25,
            "httpTimeLimit": 7,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "//modified on 10-8-21 removing http authentication settings and \n//uncommented the okta login lines.\nimport { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\n\n  // Start Login\n  markers.start('Slack Login');\n\n  await typeText('aexp-hr', By.id(`domain`));\n\n  // Click on 'Continue'\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\n\n  // Click on 'Sign in with Okta'\n  await click(By.id(`enterprise_member_guest_account_signin_link`));\n  // Take Snapshot\n  await driver.takeScreenshot();\n\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\n \n  // Click on 'Next'\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\n\n  // Click on 'Sign In' to login\n  await click(By.id(`okta-signin-submit`));\n\n  // Stop Login\n  markers.stop('Slack Login');\n\n  //Slack Loads\n  markers.start('Slack Loading');\n  // Take Snapshot\n  await driver.takeScreenshot();\n\n  //Click in the message box\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n\n  //Type the message and Click Enter to Post Chat\n\n\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\n\n  // Take Snapshot\n  await driver.takeScreenshot();\n  markers.stop('Slack Loading');\n\n  markers.start('Post Chat');\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  await click(By.css('[aria-label=\"Send now\"]'));\n\n  markers.stop('Post Chat');\n\n  //Take Screenshot of Posted Message\n  await driver.takeScreenshot();\n\n}\n\nasync function configureDriver() {\n  await driver.manage().window().setRect({\n    width: 1200,\n    height: 908 });\n\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\n\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  const element = await driver.findElement(selector);\n  await element.clear();\n  await element.sendKeys(value);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2525507"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2525507"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2525507"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2525507"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2525507"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2525507"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-01-17 18:17:03",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2525506,
            "testName": "SIN webex deviation",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 40,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n\r\n  await driver.get(settings.url);\r\n\r\n  // Click on 'Sign In'\r\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\r\n  // commented out line 20 on 6-29-21 and replaced with line 22\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  //Okta\r\n  await click(By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.id(`okta-signin-password`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n  \r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n  await driver.sleep(5000);\r\n  markers.stop('SignOn');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n  markers.start('Connect to Personal Room');\r\n    // Start meeting\r\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n    await driver.takeScreenshot();\r\n\r\n  markers.stop('Connect to Personal Room');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function deleteText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function pressDelete(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.DELETE);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function arrowDown(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.ARROW_DOWN);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function switchToNextTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\nasync function switchToPrevTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\n\r\nasync function getBackupTabId() {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\r\n}\r\n\r\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== backupTabId);\r\n}\r\n\r\nasync function moveMouseInto(element) {\r\n  await driver.actions({ bridge: true }).\r\n  move({ x: -1, y: 0, origin: element }).\r\n  move({ x: 1, y: 0, origin: element }).\r\n  perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2525506"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2525506"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2525506"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2525506"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2525506"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2525506"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-06-10 23:31:57",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2927892,
            "testName": "SIN-30-31May",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 180,
            "targetTime": 60,
            "httpTimeLimit": 60,
            "httpTargetTime": 3000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\n\n  // Start Login\n  markers.start('Slack Login');\n\n  await typeText('aexp-hr', By.id(`domain`));\n\n  // Click on 'Continue'\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\n\n  // Click on 'Sign in with Okta'\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\n  //4-20-22 udpated id variable to end with `okta` \n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\n  \n  // Added screenshot 10-5-21 JY\n  // Take Snapshot\n  await driver.takeScreenshot();\n  //commenting out the Okta login process 9-21 (lines 24,29,31,37)\n  //uncommented the OKTA lines 092921 - 1013 MST\n  //101121 - Removed HTTP auth credentials in Advanced Tab\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\n\n  // Click on 'Next'\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\n\n  await driver.takeScreenshot();\n  // Click on 'Sign In' to login\n  await click(By.id(`okta-signin-submit`));\n\n  // Stop Login\n  markers.stop('Slack Login');\n\n  //Slack Loads\n  markers.start('Slack Loading');\n  // Take Snapshot\n  //await driver.takeScreenshot();\n\n  //Click in the message box\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n\n  //Type the message and Click Enter to Post Chat\n\n\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\n\n  // Take Snapshot\n  await driver.takeScreenshot();\n  markers.stop('Slack Loading');\n\n  markers.start('Post Chat');\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  await click(By.css('[aria-label=\"Send now\"]'));\n\n  markers.stop('Post Chat');\n\n  //Take Screenshot of Posted Message\n  await driver.takeScreenshot();\n\n}\n\nasync function configureDriver() {\n  await driver.manage().window().setRect({\n    width: 1200,\n    height: 908 });\n\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\n\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  const element = await driver.findElement(selector);\n  await element.clear();\n  await element.sendKeys(value);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2927892"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2927892"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2927892"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2927892"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2927892"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2927892"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-06-10 22:27:03",
            "createdBy": "Rajesh K Khulbe (rajesh.k.khulbe@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2927797,
            "testName": "SIN-30May-1800-2200",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 180,
            "targetTime": 60,
            "httpTimeLimit": 60,
            "httpTargetTime": 3000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\n\n  // Start Login\n  markers.start('Slack Login');\n\n  await typeText('aexp-hr', By.id(`domain`));\n\n  // Click on 'Continue'\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\n\n  // Click on 'Sign in with Okta'\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\n  //4-20-22 udpated id variable to end with `okta` \n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\n  \n  // Added screenshot 10-5-21 JY\n  // Take Snapshot\n  await driver.takeScreenshot();\n  //commenting out the Okta login process 9-21 (lines 24,29,31,37)\n  //uncommented the OKTA lines 092921 - 1013 MST\n  //101121 - Removed HTTP auth credentials in Advanced Tab\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\n\n  // Click on 'Next'\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\n\n  await driver.takeScreenshot();\n  // Click on 'Sign In' to login\n  await click(By.id(`okta-signin-submit`));\n\n  // Stop Login\n  markers.stop('Slack Login');\n\n  //Slack Loads\n  markers.start('Slack Loading');\n  // Take Snapshot\n  //await driver.takeScreenshot();\n\n  //Click in the message box\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n\n  //Type the message and Click Enter to Post Chat\n\n\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\n\n  // Take Snapshot\n  await driver.takeScreenshot();\n  markers.stop('Slack Loading');\n\n  markers.start('Post Chat');\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  //await click(By.css('[aria-label=\"Send message\"]'))\n  await click(By.css('[aria-label=\"Send now\"]'));\n\n  markers.stop('Post Chat');\n\n  //Take Screenshot of Posted Message\n  await driver.takeScreenshot();\n\n}\n\nasync function configureDriver() {\n  await driver.manage().window().setRect({\n    width: 1200,\n    height: 908 });\n\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\n\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  const element = await driver.findElement(selector);\n  await element.clear();\n  await element.sendKeys(value);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2927797"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2927797"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2927797"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2927797"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2927797"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2927797"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-07-21 14:18:39",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3004332,
            "testName": "Slack GSO routing",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 106,
            "targetTime": 60,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n  \r\n  // Added screenshot 10-5-21 JY\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  //commenting out the Okta login process 9-21 (lines 24,29,31,37)\r\n  //uncommented the OKTA lines 092921 - 1013 MST\r\n  //101121 - Removed HTTP auth credentials in Advanced Tab\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  //await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 908 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3004332"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3004332"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3004332"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3004332"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3004332"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3004332"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-02-22 16:20:13",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2595330,
            "testName": "Slack Outage 2/21/22",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 39,
            "targetTime": 25,
            "httpTimeLimit": 6,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "//modified on 10-8-21 removing http authentication settings and \r\n//uncommented the okta login lines.\r\nimport { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n \r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 908 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2595330"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2595330"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2595330"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2595330"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2595330"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2595330"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-02-22 17:37:47",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2595593,
            "testName": "Slack Outage 2/22/22",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 39,
            "targetTime": 25,
            "httpTimeLimit": 6,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "//modified on 10-8-21 removing http authentication settings and \r\n//uncommented the okta login lines.\r\nimport { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n \r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 908 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2595593"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2595593"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2595593"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2595593"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2595593"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2595593"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-07-21 14:19:07",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3004333,
            "testName": "Slack routing GSO",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 106,
            "targetTime": 60,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n  \r\n  // Added screenshot 10-5-21 JY\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  //commenting out the Okta login process 9-21 (lines 24,29,31,37)\r\n  //uncommented the OKTA lines 092921 - 1013 MST\r\n  //101121 - Removed HTTP auth credentials in Advanced Tab\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  //await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 908 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3004333"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3004333"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3004333"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3004333"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3004333"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3004333"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-07-21 14:19:29",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3004334,
            "testName": "Slack routing PHX",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 106,
            "targetTime": 60,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n  \r\n  // Added screenshot 10-5-21 JY\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  //commenting out the Okta login process 9-21 (lines 24,29,31,37)\r\n  //uncommented the OKTA lines 092921 - 1013 MST\r\n  //101121 - Removed HTTP auth credentials in Advanced Tab\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  //await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 908 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3004334"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3004334"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3004334"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3004334"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3004334"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3004334"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-07-21 14:19:52",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3004335,
            "testName": "Slack routing PHX",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 1,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 106,
            "targetTime": 60,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  //4-18-22 updated id variable to end with `_okta` - this was reverted on 4-19-22\r\n  //4-20-22 udpated id variable to end with `okta` \r\n  //await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  await click(By.id(`enterprise_member_guest_account_signin_link_okta`));\r\n  \r\n  // Added screenshot 10-5-21 JY\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  //commenting out the Okta login process 9-21 (lines 24,29,31,37)\r\n  //uncommented the OKTA lines 092921 - 1013 MST\r\n  //101121 - Removed HTTP auth credentials in Advanced Tab\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n\r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  await driver.takeScreenshot();\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  //await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 908 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3004335"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3004335"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3004335"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3004335"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3004335"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/3004335"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-02-11 10:40:54",
            "createdBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2575352,
            "testName": "Slack SSL error",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 39,
            "targetTime": 25,
            "httpTimeLimit": 6,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 0,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "//modified on 10-8-21 removing http authentication settings and \r\n//uncommented the okta login lines.\r\nimport { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, credentials, markers } from 'thousandeyes';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n\r\n  await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\r\n\r\n  // Start Login\r\n  markers.start('Slack Login');\r\n\r\n  await typeText('aexp-hr', By.id(`domain`));\r\n\r\n  // Click on 'Continue'\r\n  await click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\r\n\r\n  // Click on 'Sign in with Okta'\r\n  await click(By.id(`enterprise_member_guest_account_signin_link`));\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\r\n \r\n  // Click on 'Next'\r\n  await click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\r\n\r\n  await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\r\n\r\n  // Click on 'Sign In' to login\r\n  await click(By.id(`okta-signin-submit`));\r\n\r\n  // Stop Login\r\n  markers.stop('Slack Login');\r\n\r\n  //Slack Loads\r\n  markers.start('Slack Loading');\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n\r\n  //Click in the message box\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n\r\n  //Type the message and Click Enter to Post Chat\r\n\r\n\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\r\n  //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\r\n  await typeText('Test', By.css(`[aria-label=\"Message to teyes-test\"]`));\r\n  // await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`));\r\n  //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\r\n\r\n  // Take Snapshot\r\n  await driver.takeScreenshot();\r\n  markers.stop('Slack Loading');\r\n\r\n  markers.start('Post Chat');\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\r\n  //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  //await click(By.css('[aria-label=\"Send message\"]'))\r\n  await click(By.css('[aria-label=\"Send now\"]'));\r\n\r\n  markers.stop('Post Chat');\r\n\r\n  //Take Screenshot of Posted Message\r\n  await driver.takeScreenshot();\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1200,\r\n    height: 908 });\r\n\r\n  await driver.manage().setTimeouts({\r\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  const element = await driver.findElement(selector);\r\n  await element.clear();\r\n  await element.sendKeys(value);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}",
            "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2575352"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2575352"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2575352"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2575352"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2575352"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2575352"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-11-30 08:28:07",
            "createdBy": "Sathiya Kamalanathan (Sathiya.Kamalanathan1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 3301787,
            "testName": "SPOTest-Sat (Nov 30, 2022 08:18 UTC)",
            "type": "web-transactions",
            "interval": 60,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 3,
            "url": "https://spaces.aexp.com/teams/Sathiya",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 0,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 95,
            "targetTime": 35,
            "httpTimeLimit": 10,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, transaction, test } from 'thousandeyes';\r\nimport { sign, createDecipheriv } from 'crypto';\r\nimport fetch from 'node-fetch';\r\n\r\nconst clientId = '66fc5081-0082-4b4b-8b2c-73324b5fa346';        // Azure Application (client) ID\r\nconst tenantId = '66295b3b-c4fd-41af-a077-c0ec2a40e369';        // Azure Directory (tenant) ID\r\nconst thumbprint = '33AA50AD728E605EF283C44E9902C1F9B3AB6FAF'   // Certificate thumbprint\r\nconst oauthUrl = 'https://login.microsoftonline.com/' + tenantId + '/oauth2/v2.0/token';\r\nconst encryptedPrivateKey = `a2a607445de2a7e401f56e41862d69cd:b51b379cbdc3e1600a082ec33bb7f25798c03a998c7ccfaecaad23d35fb84698cf65a4c5a016841d3dee74283f9fc1f3e0d728e7b665e3e74ec732e69b75b323d279296692f9007f333cf692179b6d247f19853c1277be1bfa72f5132d03cf05461b4769bb6f42f011318fd1db45d1774f1f6d8faa9e277b2edbbfafe22448779ba1b8a2297161174a383dd65f1fcec7a6cbdc17f6d432c94925053b8a7badc443c8179ed304043b3f56383f11a377cc4198e2fab23626936791e27adf58223eff0aeb4256735328dfcc92a54f5f91b31097dbc86bfa85625c0fd788824ba4e00fa718261d70aa9c3ba93a1dca46d56f2980db34b91de3a4318b9ba2e98756522f55ddd1d0af922f6fb49721d1844e2719a30d0f961e5274c96260a4c75031134938f4eba0da9870378dc82c26bb8ec684361878bde7b2d2c5035114b41e74ab9e714ff9f8cf8b017832cc7a2100691fbb7216acc7299325a88c6d4216a381be8d5fa0db16a5778cdf8d5623fe5bd5f2d9a69acfdb45f26ead28c7b28496ec26364f356413ffb3e37d14619b347504db086165e6f8a17a4439a83c26ed3d4e153870be48fbbaf2591616e97262cfd7472ff15ef9e857dab410111f31c0d634b31e7351779f070135982df86bc72ca190b129ff4c9bef8aaa59f5c9e303fbbc7759bc268c8bc2fcc3d3eb5d85368143d7f0ca3aa7e6912f8227e4f3b0e7b07992180ede58d316505f8d7a7e97a0dfade9ab7204891fa79699dbdcc72b546cb9935d482e8a0b025c86505d03d572c42e9d79b55d44cc76b11a0b2486d03d500d5c49b556573bfde20186343763731956ba972045161f88397dbc2463027f1f5e08cef5b7fe0ae448011dd0dadf9cb2f6f44dc9f238be7c7881a7ec400bd2ec34915e476ea285566bd49e573bf05c77a765ad432a4a46ae78c8e806c6379cd1ae5abb53d064daf9e2098d54d703f0cf9fa2b045373265ce157140c3c76d2f49a4b6cfa475d3386cac85ff8595b531de71a6b05ab20b8689d668076050d65955dd044311c88172c5d8b3955ad8a78d3683e0729f0d6595e1318bbe98d6b153b8e00229fadd8d8bdd4334f1e022336e07adf1698c0ba789f30bb8cdb8a62a0ab2d41de74050eb33c0dceece280922d6a55d59516751b9be1e4ee3077da2dfc2f0baea514a8ee3d38804990dae7fde586274f8acc01b39558a9c25c65dd8cd7ff354dcf7321e5c50351d01f918998ebde252001e8438290f31cabfd387a1904317b9946bd49f9afd27328880398573bad6d0934212e67cccb2417b893016b9dc0c0cc2c52af09b613837f208a4923cb3becbf4d5dc829ac544aee344a4c168191ea0a9d56ec43252029e2cf892f53c4f74a06f196f5762942a43236fb4a1f99d1b067216f5f4a12a599481de712d7b72adbd634612788ca7f939fbbf48c834173c61cd9307c499d12dd7ee460b4fb060779fd9161514dac6e462ac249efad888bd8fb374fa351ed9270cf6c7b1639eb8990270cf4632832fbd3fd2e7ba73fbdb8582a1d99b6cef8b0c403e4785b19fabac70f5e1e351ad0e2a6fe3a74e8faca76c1abff06c02fac5a789b86627eee36714ebc5a472bac30b00a55331ed280fb0a75b3e7d2e99e860501feb5e15d75321f4e83453796a0ca48eaae011542c91318ab01a3e173b70224451d8c9e5fc57e4d913d7901a1d1a6c8f91797285cd584a14366a1a0af747c1188ed3e9c6e26bd7127de68cfb63e961f6c6fbf8080ece286bed396ccf21b52dbeef8065a3e89198667619779b4427b8bff7bc3e1598549a765f6b6efc6a5d023f4d77744ea09d742de000936359159b653aad29ad23cc5296655e0d3fa02bf408104c259f34c0d51afe4bca3ef801266287a09d0017686894ddbb645b8a878aabbc5d0c8eb707b7be975c5631ad6f934125f31ef8c103bae8e0fa00f76ef3bdf07f9fbdd9b526d8fca900870060efff2b945f4df2856fbb6aa7ab71613e237e690b16706c96b14f33233a79124553869d25e2f419224f15d4e2c2855c2a2d47f33c841dd647bbe9041b37c9859ec50076c4a41faa1e13c5d7b02dac972ded7b6db1d7e52a6fc6d4de29ce284772116e825f45650273f3ea4ab26ddb5eb0ad844342bf857d601caac6595f76845d51c044da56a7a0b2220a28ca166744d8dca5608f13b93670e49dfc9397cb8f08e5609d8667ccaef126b3c4730583aa04f974e2969862d2e080497d6c23ce5c6ab86e8535dea814ca210b78880ddbf8d7141b18754d5cec8007c6f7c099871c27a1d286bc5aa709bb9b33caa5e64446f971846dbd4835c980dce188640dc2eac0fd0b8b305365e4637426aa94a5b70d2ff9004acdb21c9e3dbff672a7c4e948d048c99fbc26b3e864b471bca1fd88b1fa0b8ed1a8a09c1742705e726b15`;\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n const passphrase = credentials.get('key-tEyes-SharePoint-OneDrive');\r\n const privateKey = getDecryptedPrivateKey(encryptedPrivateKey, passphrase);\r\n\r\n    /*\r\n        Construct the signed JWT\r\n    */\r\n    let current_time = Math.floor(new Date().getTime() / 1000);\r\n    let nbf_time = current_time - 1;\r\n    let exp_time = current_time + (5 * 60);\r\n\r\n    let jwt_header = base64Url(JSON.stringify({\r\n        \"typ\": \"JWT\",\r\n        \"alg\": \"RS256\",\r\n        \"x5t\": hexStringTo64(thumbprint),\r\n    }))\r\n    let jwt_payload = base64Url(JSON.stringify({\r\n        \"iss\": clientId,\r\n        \"sub\": clientId,\r\n        \"aud\": oauthUrl,\r\n        \"exp\": exp_time,\r\n        \"nbf\": nbf_time\r\n    }))\r\n    let jwt_tosign = (jwt_header + \".\" + jwt_payload)\r\n    let signature = sign(\"RSA-SHA256\", Buffer.from(jwt_tosign), {key: privateKey})\r\n    let signed_jwt = (jwt_tosign +  \".\" + base64Url(signature))\r\n\r\n    /*\r\n        Fetch the Access token from the OAuth service\r\n    */\r\n    await markers.start('OAuth Query Time');\r\n\r\n        let formParams = {\r\n                \"redirect_uri\": \"http://localhost/\",\r\n                \"grant_type\": \"client_credentials\",\r\n                \"client_id\": clientId,\r\n                \"scope\": \"https://graph.microsoft.com/.default\",\r\n                \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n                \"client_assertion\": signed_jwt\r\n        }\r\n        const formBody = Object.keys(formParams).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formParams[key])).join('&');\r\n        const oauthRequest = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n                'Authorization': 'Bearer ' + signed_jwt\r\n            },\r\n            body: formBody\r\n        }\r\n        const oauthResponse = await fetch(oauthUrl, oauthRequest);\r\n        if (!oauthResponse.ok) {\r\n            const oauthErrorResponseText = await oauthResponse.text();\r\n            throw new Error('OAuth HTTP ' + oauthResponse.status + '(' + oauthResponse.statusText + ')\\n' + oauthErrorResponseText);\r\n        }\r\n\r\n        let responseJson = await oauthResponse.json();\r\n        const accessToken = responseJson.access_token;\r\n\r\n        console.log(accessToken)\r\n        await markers.stop('OAuth Query Time');\r\n\r\n/*\r\nconst settings = test.getSettings();\r\n\r\n// Load page\r\nmarkers.start('Page Load');\r\nawait driver.get(settings.url);\r\nvar actualTitle = await driver.getTitle();\r\nmarkers.stop('Page Load');\r\n\r\n\r\nmarkers.start('Shared Documents');\r\n  await click(By.id(`idBtn_Back`));\r\n  await driver.get('https://spaces.aexp.com/teams/Sathiya/Shared%20Documents');\r\n  await click(By.css(`[aria-label=\"Test.docx\"] [data-icon-name=\"StatusCircleCheckmark\"]`));\r\n  markers.stop('Shared Documents');\r\n  \r\n  \r\n  markers.start('Download');\r\n  await click(By.css(`[data-icon-name=\"download\"]`));\r\n  await downloads.waitForDownload('Test.docx', 60000);\r\n  markers.stop('Download');*/\r\n  \r\n};\r\n\r\nfunction base64Url(data) {\r\n    return Buffer.from(data).toString('base64').replace(/\\+/g,\"-\").replace(/\\//g,\"_\").replace(/=/g,\"\");\r\n}\r\n\r\nfunction hexStringTo64(data){\r\n    return Buffer.from(data, \"hex\").toString('base64');\r\n}\r\n\r\nfunction getDecryptedPrivateKey(encKey, pass){\r\n    var key = Buffer.from(pass, \"utf8\");\r\n    var components = encKey.split(':');\r\n    \r\n    var iv_from_ciphertext = Buffer.from(components.shift(), \"hex\");\r\n    var decipher = createDecipheriv(\"aes-256-cbc\", key, iv_from_ciphertext);\r\n    var deciphered = decipher.update(components.join(':'), \"hex\", \"utf8\");\r\n    deciphered += decipher.final(\"utf8\");\r\n\r\n    return deciphered;\r\n\r\n}                \r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n      await driver.findElement(selector)\r\n                  .click().then(null, async function (err) {\r\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\r\n          await driver.findElement(selector)\r\n                      .click();\r\n      });\r\n  }\r\n} \r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n      try {\r\n          numberOfAttempts += 1;\r\n          await attemptActionFn();\r\n      }\r\n      catch (error) {\r\n          attemptError = error;\r\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n          continue; // Attempt failed, reattempt\r\n      }\r\n      attemptError = null;\r\n      break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n      throw attemptError;\r\n  }\r\n} \r\nasync function isElementClickable(selector) {\r\n  try {\r\n      return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n      return false; // Will throw an error if element is not connected to the document\r\n  }\r\n} \r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n} \r\n\r\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/3301787"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/3301787"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/3301787"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/3301787"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/3301787"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-01-05 11:54:54",
            "createdBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2508152,
            "testName": "Stream multiple Outages on 26th Dec",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amexstream.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 40,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n\r\n  await driver.get(settings.url);\r\n\r\n  // Click on 'Sign In'\r\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\r\n  // commented out line 20 on 6-29-21 and replaced with line 22\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  //Okta\r\n  await click(By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.id(`okta-signin-password`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n  \r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n  await driver.sleep(5000);\r\n  markers.stop('SignOn');\r\n  await driver.takeScreenshot();\r\n\r\n\r\n  markers.start('Connect to Personal Room');\r\n    // Start meeting\r\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\r\n\r\n    // Load/join meeting\r\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\r\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\r\n    await driver.takeScreenshot();\r\n  markers.stop('Connect to Personal Room');\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function deleteText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function pressDelete(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.DELETE);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function arrowDown(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.ARROW_DOWN);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function switchToNextTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\nasync function switchToPrevTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\n\r\nasync function getBackupTabId() {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\r\n}\r\n\r\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== backupTabId);\r\n}\r\n\r\nasync function moveMouseInto(element) {\r\n  await driver.actions({ bridge: true }).\r\n  move({ x: -1, y: 0, origin: element }).\r\n  move({ x: 1, y: 0, origin: element }).\r\n  perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2508152"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2508152"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2508152"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2508152"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2508152"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2508152"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-08-26 14:26:26",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2230929,
            "testName": "Sunday DMZ Probe",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 43,
            "targetTime": 25,
            "httpTimeLimit": 7,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.Teyes.slack.prod",
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions  } from 'selenium-webdriver';\nimport { driver, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    \n    await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\n\n    // Start Login\n    markers.start('Slack Login');\n\n    await typeText('aexp-hr', By.id(`domain`));\n\n    // Click on 'Continue'\n\tawait click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\n\n    // Click on 'Sign in with Okta'\n\tawait click(By.id(`enterprise_member_guest_account_signin_link`));\n\n    await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\n    \n    // Click on 'Next'\n\tawait click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n\n    await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\n    \n    // Take Snapshot\n    await driver.takeScreenshot();\n\n    // Click on 'Sign In' to login\n\tawait click(By.id(`okta-signin-submit`));\n\n    // Stop Login\n    markers.stop('Slack Login');\n\n   //Slack Loads\n    markers.start('Slack Loading')\n    //Click in the message box\n    //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n    //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n\n\n \n\n    //Type the message and Click Enter to Post Chat\n\n\n    //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n    //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n    await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`))\n    //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\n\n    // Take Snapshot\n    await driver.takeScreenshot();   \n    markers.stop('Slack Loading')\n\n    markers.start('Post Chat')\n    //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\n    //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\n    //await click(By.css('[aria-label=\"Send message\"]'))\n    //await click(By.css('[aria-label=\"Send message\"]'))\n    await click(By.css('[aria-label=\"Send now\"]'))\n    \n    markers.stop('Post Chat')\n\n    //Take Screenshot of Posted Message\n    await driver.takeScreenshot();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 908\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2230929"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2230929"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2230929"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2230929"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2230929"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2230929"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2022-02-05 14:25:17",
            "createdBy": "Rahul Maurya (Rahul.Maurya1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2565096,
            "testName": "Syd-webex Jan",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 41,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\nimport assert from 'assert';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n  const settings = test.getSettings();\n\n  // Starting Login\n  markers.start('SignOn');\n\n  await driver.get(settings.url);\n\n  // Click on 'Sign In'\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\n  // commented out line 20 on 6-29-21 and replaced with line 22\n  await click(By.css(`#guest_signin_split_button-action > span`));\n\n  //Okta\n  await click(By.id(`okta-signin-username`));\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\n  await click(By.id(`okta-signin-password`));\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\n  \n  await driver.takeScreenshot();\n  \n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\n\n  await driver.sleep(5000);\n  markers.stop('SignOn');\n  await driver.takeScreenshot();\n\n\n  markers.start('Connect to Personal Room');\n    // Start meeting\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\n\n    // Load/join meeting\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\n    await driver.takeScreenshot();\n\n  markers.stop('Connect to Personal Room');\n}\n\nasync function configureDriver() {\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  await driver.findElement(selector).\n  sendKeys(value);\n}\n\nasync function deleteText(value, selector) {\n  await simulateHumanDelay();\n  await driver.findElement(selector).\n  sendKeys(value);\n}\n\nasync function pressDelete(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.DELETE);\n}\n\nasync function pressEnter(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.RETURN);\n}\n\nasync function arrowDown(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.ARROW_DOWN);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}\n\nasync function switchToNextTab(backupTabId) {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\n  return driver.switchTo().window(nextTabId);\n}\nasync function switchToPrevTab(backupTabId) {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\n  return driver.switchTo().window(nextTabId);\n}\n\nasync function getBackupTabId() {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await driver.getAllWindowHandles();\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\n}\n\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\n  const allTabIds = await driver.getAllWindowHandles();\n  return allTabIds.filter(tabId => tabId !== backupTabId);\n}\n\nasync function moveMouseInto(element) {\n  await driver.actions({ bridge: true }).\n  move({ x: -1, y: 0, origin: element }).\n  move({ x: 1, y: 0, origin: element }).\n  perform();\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2565096"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2565096"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2565096"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2565096"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2565096"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2565096"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-03-22 11:23:14",
            "createdBy": "Hitesh Keshav (Hitesh.Keshav1@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2645519,
            "testName": "time error in Sharepoint",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://spaces.aexp.com/teams/vgadde",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 60,
            "targetTime": 39,
            "httpTimeLimit": 39,
            "httpTargetTime": 1000,
            "httpVersion": 1,
            "followRedirects": 1,
            "username": "svc.spoautomation@aexp.onmicrosoft.com",
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 1,
            "authType": "NTLM",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until } from 'selenium-webdriver';\r\nimport { driver, markers, credentials, downloads, transaction } from 'thousandeyes';\r\nrunScript();\r\nasync function runScript() {\r\n  // Configure\r\n  await configureDriver();\r\n  // Page Load\r\n  markers.start('Page Load');\r\n  // TODO: Replace <your-sharepoint-url> with your sharepoint site URL (ex yourcompany.sharepoint.com/sites/YourSite\r\n  await driver.get('https://spaces.aexp.com/teams/vgadde');\r\n  var actualTitle = await driver.getTitle();\r\n  markers.stop('Page Load');\r\n  \r\n  // Login process\r\n  //credentials.get('SPServiceaccount')\r\n  markers.start('Username');\r\n  await click(By.id(`i0116`));\r\n\r\n  await typeText('svc.thousandeyeSPO@aexp.com', By.id(`i0116`));\r\n  await click(By.id(`idSIButton9`));\r\n  markers.stop('Username');\r\n  // Enter Password\r\n  markers.start('OKTA Login');\r\n  await typeText('svc.thousandeyeSPO', By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('SPO_OneDrive_SAccount'), By.id(`okta-signin-password`));\r\n  await click(By.id(`okta-signin-submit`));\r\n  await click(By.id('idBtn_Back'));\r\n  markers.stop('OKTA Login');\r\n\r\n  markers.start('Shared Documents');\r\n  \r\n  await driver.wait(until.titleContains('Vgadde - Home'));\r\n\r\n\r\n  await driver.get('https://spaces.aexp.com/teams/vgadde/ThousandEyes/download');\r\n\r\n  await click(By.css(`[aria-label=\"0CdW0MUPUn.txt\"] [data-icon-name=\"StatusCircleCheckmark\"]`));\r\n   await driver.takeScreenshot();\r\n  markers.stop('Shared Documents');\r\n \r\n  // Click on 'Download' and measure download time\r\n  // TODO: replace <your-filename> with the name of the file your downloading; eg. Public Cloud Performance Benchmark Report Final.pdf\r\n  markers.start('Download');\r\n  await click(By.css(`[data-icon-name=\"download\"]`));\r\n  await downloads.waitForDownload('0CdW0MUPUn.txt', 60000);\r\n  markers.stop('Download');\r\n  // Logout\r\n    await markers.start('Logout');\r\n    await driver.get(\"https://spaces.aexp.com/teams/vgadde/_layouts/15/SignOut.aspx?ru=https%3A%2F%2Fspaces.aexp.com%2Fteams%2Fvgadde%2FThousandEyes%2FForms%2FAllItems.aspx\")\r\n    \r\n    await driver.takeScreenshot();   \r\n    await markers.stop('Logout'); \r\n}; \r\n\r\nasync function configureDriver() {\r\n  await driver.manage().window().setRect({\r\n    width: 1572,\r\n    height: 1133\r\n  });\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n} \r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector)\r\n              .sendKeys(value);\r\n} \r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n} \r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n      await driver.findElement(selector)\r\n                  .click().then(null, async function (err) {\r\n          await driver.wait(() => isElementClickable(selector), configuredTimeouts.implicit);\r\n          await driver.findElement(selector)\r\n                      .click();\r\n      });\r\n  }\r\n} \r\n\r\nasync function isElementClickable(selector) {\r\n  try {\r\n      return await driver.findElement(selector).isDisplayed();\r\n  }\r\n  catch (error) {\r\n      return false; // Will throw an error if element is not connected to the document\r\n  }\r\n} \r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n      try {\r\n          numberOfAttempts += 1;\r\n          await attemptActionFn();\r\n      }\r\n      catch (error) {\r\n          attemptError = error;\r\n          await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n          continue; // Attempt failed, reattempt\r\n      }\r\n      attemptError = null;\r\n      break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n      throw attemptError;\r\n  }\r\n} \r\n\r\nasync function rightClick(selector) {\r\n  const element = await driver.findElement(selector);\r\n  await driver.actions({ bridge: true }).contextClick(element).perform();\r\n} \r\n\r\n",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "desiredStatusCode": "401",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2645519"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2645519"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2645519"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2645519"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2645519"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2645519"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-08-26 14:27:56",
            "createdBy": "Joshua Young (Joshua.C.Young@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2230933,
            "testName": "Tuesday DMZ Probe",
            "type": "web-transactions",
            "interval": 900,
            "subinterval": 300,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 43,
            "targetTime": 25,
            "httpTimeLimit": 7,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "username": "svc.Teyes.slack.prod",
            "includeHeaders": 1,
            "sslVersionId": 6,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "BASIC",
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions  } from 'selenium-webdriver';\nimport { driver, credentials, markers } from 'thousandeyes';\n\nrunScript();\n\nasync function runScript() {\n    \n    await configureDriver();\n    \n    await driver.get('https://app.slack.com/client/T4RJGGUJV/G01N6KV9XE0');\n\n    // Start Login\n    markers.start('Slack Login');\n\n    await typeText('aexp-hr', By.id(`domain`));\n\n    // Click on 'Continue'\n\tawait click(By.css(`[data-qa=\"submit_team_domain_button\"]`));\n\n    // Click on 'Sign in with Okta'\n\tawait click(By.id(`enterprise_member_guest_account_signin_link`));\n\n    await typeText('svc.Teyes.slack.prod', By.id(`okta-signin-username`));\n    \n    // Click on 'Next'\n\tawait click(By.xpath(`//*[@id=\"okta-signin-password\"]`));\n\n    await typeText(credentials.get('svcSlackProd'), By.id(`okta-signin-password`));\n    \n    // Take Snapshot\n    await driver.takeScreenshot();\n\n    // Click on 'Sign In' to login\n\tawait click(By.id(`okta-signin-submit`));\n\n    // Stop Login\n    markers.stop('Slack Login');\n\n   //Slack Loads\n    markers.start('Slack Loading')\n    //Click in the message box\n    //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n    //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n\n\n \n\n    //Type the message and Click Enter to Post Chat\n\n\n    //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[1]/div[1]/p`));\n    //await typeText('Test', By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[1]/div/div[1]/p`));\n    await typeText('Test', By.css(`[aria-label=\"Message teyes-test\"]`))\n    //await typeText('Test', By.css(`[aria-label=\"[object Object]\"]`))\n\n    // Take Snapshot\n    await driver.takeScreenshot();   \n    markers.stop('Slack Loading')\n\n    markers.start('Post Chat')\n    //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div[1]/div[2]/button[1]/i`));\n    //await click(By.xpath(`/html/body/div[2]/div/div[2]/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div[2]/div[3]/div/button[4]/i`));\n    //await click(By.css('[aria-label=\"Send message\"]'))\n    //await click(By.css('[aria-label=\"Send message\"]'))\n    await click(By.css('[aria-label=\"Send now\"]'))\n    \n    markers.stop('Post Chat')\n\n    //Take Screenshot of Posted Message\n    await driver.takeScreenshot();\n\n}\n\nasync function configureDriver() {\n    await driver.manage().window().setRect({ \n        width: 1200, \n        height: 908\n    });\n    await driver.manage().setTimeouts({\n        implicit: 15 * 1000, // If an element is not found, reattempt for this many milliseconds\n    });\n}\n\n\n\nasync function typeText(value, selector) {\n    await simulateHumanDelay();\n    const element = await driver.findElement(selector);\n    await element.clear();\n    await element.sendKeys(value);\n}\n\nasync function simulateHumanDelay() {\n    await driver.sleep(550);\n}\n\nasync function click(selector) {\n    await simulateHumanDelay();\n\n    const configuredTimeouts = await driver.manage().getTimeouts();\n    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n\n    await reattemptUntil(attemptToClick, clickAttemptEndTime);\n    \n    async function attemptToClick() {\n        await driver.findElement(selector)\n                    .click();\n    }\n}\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n    const TIME_BETWEEN_ATTEMPTS = 100;\n    let numberOfAttempts = 0;\n    let attemptError;\n    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n        try {\n            numberOfAttempts += 1;\n            await attemptActionFn();\n        }\n        catch (error) {\n            attemptError = error;\n            await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n            continue; // Attempt failed, reattempt\n        }\n        attemptError = null;\n        break; // Attempt succeeded, stop attempting\n    }\n\n    const wasAttemptSuccessful = !attemptError;\n    if (!wasAttemptSuccessful) {\n        throw attemptError;\n    }\n}\n",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2230933"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2230933"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2230933"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2230933"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2230933"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2230933"
                }
            ],
            "sslVersion": "TLSv1.2"
        },
        {
            "createdDate": "2021-10-26 14:51:17",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2351990,
            "testName": "Webex impact 10/25",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 26,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n\r\n  await driver.get(settings.url);\r\n\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'Sign In'\r\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\r\n  // commented out line 20 on 6-29-21 and replaced with line 22\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  //Okta\r\n  await click(By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.id(`okta-signin-password`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n  \r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n  await driver.sleep(5000);\r\n  markers.stop('SignOn');\r\n  driver.navigate().refresh();\r\n  await driver.takeScreenshot();\r\n\r\n  // Sign-out\r\n  driver.findElement(By.css(`.avatar_name`)).click();\r\n  // Click on 'Sign out'\r\n  driver.findElement(By.xpath(`//*[@id='dashboard_nav_logout_item']`));\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function deleteText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function pressDelete(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.DELETE);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function arrowDown(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.ARROW_DOWN);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function switchToNextTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\nasync function switchToPrevTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\n\r\nasync function getBackupTabId() {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\r\n}\r\n\r\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== backupTabId);\r\n}\r\n\r\nasync function moveMouseInto(element) {\r\n  await driver.actions({ bridge: true }).\r\n  move({ x: -1, y: 0, origin: element }).\r\n  move({ x: 1, y: 0, origin: element }).\r\n  perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2351990"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2351990"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2351990"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2351990"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2351990"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2351990"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2021-10-26 14:53:55",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2352001,
            "testName": "Webex impact 2 10/25",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 26,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\r\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\r\nimport assert from 'assert';\r\n\r\nrunScript();\r\n\r\nasync function runScript() {\r\n\r\n  await configureDriver();\r\n  const settings = test.getSettings();\r\n\r\n  // Starting Login\r\n  markers.start('SignOn');\r\n\r\n  await driver.get(settings.url);\r\n\r\n  await driver.takeScreenshot();\r\n\r\n  // Click on 'Sign In'\r\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\r\n  // commented out line 20 on 6-29-21 and replaced with line 22\r\n  await click(By.css(`#guest_signin_split_button-action > span`));\r\n\r\n  //Okta\r\n  await click(By.id(`okta-signin-username`));\r\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\r\n  await click(By.id(`okta-signin-password`));\r\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\r\n  \r\n  await driver.takeScreenshot();\r\n  \r\n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\r\n\r\n  await driver.sleep(5000);\r\n  markers.stop('SignOn');\r\n  driver.navigate().refresh();\r\n  await driver.takeScreenshot();\r\n\r\n  // Sign-out\r\n  driver.findElement(By.css(`.avatar_name`)).click();\r\n  // Click on 'Sign out'\r\n  driver.findElement(By.xpath(`//*[@id='dashboard_nav_logout_item']`));\r\n\r\n}\r\n\r\nasync function configureDriver() {\r\n  await driver.manage().setTimeouts({\r\n    implicit: 7 * 1000 // If an element is not found, reattempt for this many milliseconds\r\n  });\r\n}\r\n\r\nasync function typeText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function deleteText(value, selector) {\r\n  await simulateHumanDelay();\r\n  await driver.findElement(selector).\r\n  sendKeys(value);\r\n}\r\n\r\nasync function pressDelete(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.DELETE);\r\n}\r\n\r\nasync function pressEnter(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.RETURN);\r\n}\r\n\r\nasync function arrowDown(selector) {\r\n  await driver.findElement(selector).\r\n  sendKeys(Key.ARROW_DOWN);\r\n}\r\n\r\nasync function simulateHumanDelay() {\r\n  await driver.sleep(550);\r\n}\r\n\r\nasync function click(selector) {\r\n  await simulateHumanDelay();\r\n  const configuredTimeouts = await driver.manage().getTimeouts();\r\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\r\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\r\n  async function attemptToClick() {\r\n    await driver.findElement(selector).\r\n    click();\r\n  }\r\n}\r\n\r\n\r\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\r\n  const TIME_BETWEEN_ATTEMPTS = 100;\r\n  let numberOfAttempts = 0;\r\n  let attemptError;\r\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\r\n    try {\r\n      numberOfAttempts += 1;\r\n      await attemptActionFn();\r\n    }\r\n    catch (error) {\r\n      attemptError = error;\r\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\r\n      continue; // Attempt failed, reattempt\r\n    }\r\n    attemptError = null;\r\n    break; // Attempt succeeded, stop attempting\r\n  }\r\n  const wasAttemptSuccessful = !attemptError;\r\n  if (!wasAttemptSuccessful) {\r\n    throw attemptError;\r\n  }\r\n}\r\n\r\nasync function switchToNextTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\nasync function switchToPrevTab(backupTabId) {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\r\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\r\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\r\n  return driver.switchTo().window(nextTabId);\r\n}\r\n\r\nasync function getBackupTabId() {\r\n  const currentTabId = await driver.getWindowHandle();\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\r\n}\r\n\r\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\r\n  const allTabIds = await driver.getAllWindowHandles();\r\n  return allTabIds.filter(tabId => tabId !== backupTabId);\r\n}\r\n\r\nasync function moveMouseInto(element) {\r\n  await driver.actions({ bridge: true }).\r\n  move({ x: -1, y: 0, origin: element }).\r\n  move({ x: 1, y: 0, origin: element }).\r\n  perform();\r\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "classic",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2352001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2352001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2352001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2352001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2352001"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2352001"
                }
            ],
            "sslVersion": "Auto"
        },
        {
            "createdDate": "2022-02-03 14:18:50",
            "createdBy": "Jared Adams (Jared.Adams@aexp.com)",
            "enabled": 1,
            "savedEvent": 1,
            "testId": 2560853,
            "testName": "WebEx Jan 10 Timestamp",
            "type": "web-transactions",
            "interval": 600,
            "subinterval": 120,
            "flagOverrideAgentProxy": 0,
            "emulatedDeviceId": 4,
            "url": "https://amex.webex.com",
            "protocol": "TCP",
            "networkMeasurements": 1,
            "mtuMeasurements": 1,
            "bandwidthMeasurements": 0,
            "bgpMeasurements": 1,
            "usePublicBgp": 1,
            "alertsEnabled": 0,
            "liveShare": 0,
            "timeLimit": 41,
            "targetTime": 10,
            "httpTimeLimit": 5,
            "httpTargetTime": 1000,
            "httpVersion": 2,
            "followRedirects": 1,
            "includeHeaders": 1,
            "sslVersionId": 0,
            "verifyCertificate": 1,
            "useNtlm": 0,
            "authType": "NONE",
            "customHeaders": {},
            "contentRegex": "",
            "identifyAgentTrafficWithUserAgent": 0,
            "transactionScript": "import { By, Key, until, Actions } from 'selenium-webdriver';\nimport { driver, markers, browser, credentials, downloads, transaction, test } from 'thousandeyes';\nimport assert from 'assert';\n\nrunScript();\n\nasync function runScript() {\n\n  await configureDriver();\n  const settings = test.getSettings();\n\n  // Starting Login\n  markers.start('SignOn');\n\n  await driver.get(settings.url);\n\n  // Click on 'Sign In'\n  // await click(By.xpath(`//*[@id=\"guest_signin_split_button-trigger\"]/div/button[1]`));\n  // commented out line 20 on 6-29-21 and replaced with line 22\n  await click(By.css(`#guest_signin_split_button-action > span`));\n\n  //Okta\n  await click(By.id(`okta-signin-username`));\n  await typeText(credentials.get('WebExSvcAcctUser'), By.id(`okta-signin-username`));\n  await click(By.id(`okta-signin-password`));\n  await typeText(credentials.get('WebExSvcAcctPassword'), By.id(`okta-signin-password`));\n  \n  await driver.takeScreenshot();\n  \n  await click(By.xpath(`//*[@id=\"okta-signin-submit\"]`));\n\n  await driver.sleep(5000);\n  markers.stop('SignOn');\n  await driver.takeScreenshot();\n\n\n  markers.start('Connect to Personal Room');\n    // Start meeting\n    await click(By.xpath(`//button[contains(.,\"Start a meeting\")]`));\n\n    // Load/join meeting\n    await driver.wait(until.elementIsVisible(driver.findElement(By.name(`thinIframe`))));\n    await driver.switchTo().frame(driver.findElement(By.name(`thinIframe`)));\n    await driver.takeScreenshot();\n\n  markers.stop('Connect to Personal Room');\n}\n\nasync function configureDriver() {\n  await driver.manage().setTimeouts({\n    implicit: 15 * 1000 // If an element is not found, reattempt for this many milliseconds\n  });\n}\n\nasync function typeText(value, selector) {\n  await simulateHumanDelay();\n  await driver.findElement(selector).\n  sendKeys(value);\n}\n\nasync function deleteText(value, selector) {\n  await simulateHumanDelay();\n  await driver.findElement(selector).\n  sendKeys(value);\n}\n\nasync function pressDelete(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.DELETE);\n}\n\nasync function pressEnter(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.RETURN);\n}\n\nasync function arrowDown(selector) {\n  await driver.findElement(selector).\n  sendKeys(Key.ARROW_DOWN);\n}\n\nasync function simulateHumanDelay() {\n  await driver.sleep(550);\n}\n\nasync function click(selector) {\n  await simulateHumanDelay();\n  const configuredTimeouts = await driver.manage().getTimeouts();\n  const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;\n  await reattemptUntil(attemptToClick, clickAttemptEndTime);\n  async function attemptToClick() {\n    await driver.findElement(selector).\n    click();\n  }\n}\n\n\nasync function reattemptUntil(attemptActionFn, attemptEndTime) {\n  const TIME_BETWEEN_ATTEMPTS = 100;\n  let numberOfAttempts = 0;\n  let attemptError;\n  while (Date.now() < attemptEndTime || numberOfAttempts === 0) {\n    try {\n      numberOfAttempts += 1;\n      await attemptActionFn();\n    }\n    catch (error) {\n      attemptError = error;\n      await driver.sleep(TIME_BETWEEN_ATTEMPTS);\n      continue; // Attempt failed, reattempt\n    }\n    attemptError = null;\n    break; // Attempt succeeded, stop attempting\n  }\n  const wasAttemptSuccessful = !attemptError;\n  if (!wasAttemptSuccessful) {\n    throw attemptError;\n  }\n}\n\nasync function switchToNextTab(backupTabId) {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\n  const nextTabId = allTabIds[currentTabIndex + 1] || allTabIds[0];\n  return driver.switchTo().window(nextTabId);\n}\nasync function switchToPrevTab(backupTabId) {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await getAllWindowHandlesExcludingBackup(backupTabId);\n  const currentTabIndex = allTabIds.findIndex(tabId => tabId === currentTabId);\n  const nextTabId = allTabIds[currentTabIndex - 1] || allTabIds[0];\n  return driver.switchTo().window(nextTabId);\n}\n\nasync function getBackupTabId() {\n  const currentTabId = await driver.getWindowHandle();\n  const allTabIds = await driver.getAllWindowHandles();\n  return allTabIds.filter(tabId => tabId !== currentTabId)[0];\n}\n\nasync function getAllWindowHandlesExcludingBackup(backupTabId) {\n  const allTabIds = await driver.getAllWindowHandles();\n  return allTabIds.filter(tabId => tabId !== backupTabId);\n}\n\nasync function moveMouseInto(element) {\n  await driver.actions({ bridge: true }).\n  move({ x: -1, y: 0, origin: element }).\n  move({ x: 1, y: 0, origin: element }).\n  perform();\n}",
            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36",
            "blockDomains": "",
            "disableScreenshot": 0,
            "allowMicAndCamera": 0,
            "allowGeolocation": 0,
            "pageLoadingStrategy": "normal",
            "browserLanguage": "en-US",
            "isApi": 0,
            "probeMode": "AUTO",
            "continuousMode": 0,
            "pathTraceMode": "inSession",
            "numPathTraces": 3,
            "apiLinks": [
                {
                    "rel": "self",
                    "href": "https://api.thousandeyes.com/v6/tests/2560853"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/http-server/2560853"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/web/web-transactions/2560853"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/metrics/2560853"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/path-vis/2560853"
                },
                {
                    "rel": "data",
                    "href": "https://api.thousandeyes.com/v6/net/bgp-metrics/2560853"
                }
            ],
            "sslVersion": "Auto"
        }
    ]
}